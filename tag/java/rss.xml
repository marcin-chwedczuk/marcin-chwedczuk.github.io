<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>marcin-chwedczuk.github.io/</title>
   
   <link>https://marcin-chwedczuk.github.io/</link>
   <description>A place where I can share my thoughts about programming</description>
   <language>en-uk</language>
   <managingEditor> marcin-chwedczuk</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Spy JVM network traffic with Owasp ZAP proxy</title>
	  <link>//spy-jvm-network-traffic-with-owasp-zap</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2019-01-24T01:00:00+01:00</pubDate>
	  <guid>//spy-jvm-network-traffic-with-owasp-zap</guid>
	  <description><![CDATA[
	     <p>We start by downloading <a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project">Owasp ZAP proxy</a>:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="gp">$ </span><span class="c"># Download and unpack...</span>
<span class="gp">$ </span>curl -O -J -L https://github.com/zaproxy/zaproxy/releases/download/2.7.0/ZAP_2.7.0_Linux.tar.gz
<span class="gp">$ </span>tar xvzf ZAP_2.7.0_Linux.tar.gz

<span class="gp">$ </span><span class="c"># Run ZAP proxy...</span>
<span class="gp">$ </span>./ZAP_2.7.0/zap.sh  </code></pre></figure>

<p>By default ZAP listens on <code class="highlighter-rouge">localhost:8080</code>. You can change default address
and port by going into Tools -&gt; Options -&gt; Local Proxies tab:
<img src="assets/images/2019-01-25/zap_options.png" alt="ZAP Local Proxies tab" /></p>

<p>To test that network traffic interception works, 
we will use a simple Java app:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
    <span class="n">CloseableHttpClient</span> <span class="n">client</span> <span class="o">=</span> <span class="n">HttpClientBuilder</span><span class="o">.</span><span class="na">create</span><span class="o">()</span>
            <span class="o">.</span><span class="na">useSystemProperties</span><span class="o">()</span>
            <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">status</span> <span class="o">=</span> <span class="n">client</span>
            <span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">HttpGet</span><span class="o">(</span><span class="s">"http://httpstat.us/200"</span><span class="o">))</span>
            <span class="o">.</span><span class="na">getStatusLine</span><span class="o">()</span>
            <span class="o">.</span><span class="na">toString</span><span class="o">();</span>

        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">status</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">finally</span> <span class="o">{</span>
        <span class="n">client</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>There are few things to notice:</p>

<ul>
  <li>We use Apache HttpClient to perform http requests.</li>
  <li>By default Apache HttpClient do not use proxy servers,
 even if you set ZAP as a system wide proxy. We will deal
 with this problem later. For now we will use <code class="highlighter-rouge">useSystemProperties()</code> method
 on <code class="highlighter-rouge">HttpClientBuilder</code> class that will enable proxy support.</li>
  <li>Right now we will concentrate on intercepting HTTP traffic.
 I will show you how to deal with HTTPS connections later.</li>
</ul>

<p>If we, now, run our application, we will notice that ZAP did not
intercept any traffic:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="gp">$ </span>java -jar ./build/libs/zapproxydemo-1.0-SNAPSHOT.jar 
HTTP/1.1 200 OK</code></pre></figure>

<p>Indeed right now our application does not know that it should use
a proxy server. We may force it to use a proxy via JVM command line
parameters:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="gp">$ </span>java -Dhttp.proxyHost<span class="o">=</span>127.0.0.1 <span class="se">\</span>
 -Dhttp.proxyPort<span class="o">=</span>8080 <span class="se">\</span>
 -Dhttps.proxyHost<span class="o">=</span>127.0.0.1 <span class="se">\</span>
 -Dhttps.proxyPort<span class="o">=</span>8080 <span class="se">\</span>
 -jar ./build/libs/zapproxydemo-1.0-SNAPSHOT.jar </code></pre></figure>

<p>or by dynamicaly setting system properties in code:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"http.proxyHost"</span><span class="o">,</span> <span class="s">"127.0.0.1"</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"http.proxyPort"</span><span class="o">,</span> <span class="s">"8080"</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"https.proxyHost"</span><span class="o">,</span> <span class="s">"127.0.0.1"</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"https.proxyPort"</span><span class="o">,</span> <span class="s">"8080"</span><span class="o">);</span></code></pre></figure>

<p>Whatever method you use, if you run the application again,
you should be able to see now a single intercepted request in ZAP:
<img src="assets/images/2019-01-25/intercepted_request.png" alt="Intercepted request in ZAP" />
You can remove previously recorded requests in ZAP by pressing <code class="highlighter-rouge">Ctrl+N</code>.</p>

<h4 id="intercepting-traffic-from-proxy-unfriendly-apps">Intercepting traffic from proxy unfriendly apps</h4>

<p>As I mentioned previously, Apache HttpClient ignores
proxy settings by default.
If we create our <code class="highlighter-rouge">HttpClient</code> using <code class="highlighter-rouge">create()</code> method:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
    <span class="n">CloseableHttpClient</span> <span class="n">client</span> <span class="o">=</span> <span class="n">HttpClientBuilder</span><span class="o">.</span><span class="na">create</span><span class="o">()</span>
            <span class="o">.</span><span class="na">build</span><span class="o">();</span>

    <span class="k">try</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">status</span> <span class="o">=</span> <span class="n">client</span>
            <span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">HttpGet</span><span class="o">(</span><span class="s">"http://httpstat.us/200"</span><span class="o">))</span>
            <span class="o">.</span><span class="na">getStatusLine</span><span class="o">()</span>
            <span class="o">.</span><span class="na">toString</span><span class="o">();</span>

        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">status</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">finally</span> <span class="o">{</span>
        <span class="n">client</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p><code class="highlighter-rouge">HttpClient</code> will ignore proxy settings no matter how we set them.</p>

<p>For dealing with cases like this, we may use
<a href="https://github.com/rofl0r/proxychains-ng/tree/v4.13">proxychains-ng</a>.
This project is a new reincarnation of old
<a href="https://github.com/haad/proxychains">proxychains</a> util which is no
longer maintained.
Please be aware of this difference. On my system <code class="highlighter-rouge">apt-get install proxychains</code>
installs <code class="highlighter-rouge">proxychains</code> and not <code class="highlighter-rouge">proxychains-ng</code> that we need here.
To install <code class="highlighter-rouge">proxychains-ng</code> I needed to download sources from GitHub
and compile them myself:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="gp">$ </span><span class="c"># Checkout tag v4.13</span>
<span class="gp">$ </span>git clone --branch v4.13 git@github.com:rofl0r/proxychains-ng.git

<span class="gp">$ </span><span class="nb">cd </span>proxychains-ng
<span class="gp">$ </span>./configure
<span class="gp">$ </span><span class="c"># If there are no errors from configure script</span>
<span class="gp">$ </span>make
<span class="gp">$ </span>./proxychains4 --help

Usage:  ./proxychains4 -q -f config_file program_name <span class="o">[</span>arguments]
    -q makes proxychains quiet - this overrides the config setting
    -f allows one to manually specify a configfile to use
    <span class="k">for </span>example : proxychains telnet somehost.com
More <span class="nb">help </span><span class="k">in </span>README file

<span class="gp">$ </span><span class="c"># Install system wide...</span>
<span class="gp">$ </span>sudo make install</code></pre></figure>

<p>We also need to change default <code class="highlighter-rouge">proxychains-ng</code> configuration:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">sudo vim /etc/proxychains.conf

<span class="c"># Comment out line:</span>
<span class="c"># proxy_dns</span>

<span class="c"># Change ProxyList to:</span>
<span class="o">[</span>ProxyList]
http 127.0.0.1 8080</code></pre></figure>

<p>Now if we run our application using <code class="highlighter-rouge">proxychains</code>:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="gp">$ </span>proxychains4 java -jar ./build/libs/zapproxydemo-1.0-SNAPSHOT.jar 
<span class="o">[</span>proxychains] config file found: /etc/proxychains.conf
<span class="o">[</span>proxychains] preloading /usr/local/lib/libproxychains4.so
<span class="o">[</span>proxychains] DLL init: proxychains-ng 4.13-git-10-g1198857
<span class="o">[</span>proxychains] Strict chain  ...  127.0.0.1:8080  ...  23.99.0.12:80  ...  OK
HTTP/1.1 200 OK</code></pre></figure>

<p>We will be able to intercept traffic using ZAP.</p>

<p>One of the limitations of proxychains is that it may not work for
subprocesses. If you app launches other applications they may
not be proxied at all.</p>

<h4 id="intercepting-https-traffic">Intercepting HTTPS traffic</h4>

<p>So far, so good, but what will happen if we try to intercept
HTTPS traffic from a new, more secure, example:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
    <span class="n">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"http.proxyHost"</span><span class="o">,</span> <span class="s">"127.0.0.1"</span><span class="o">);</span>
    <span class="n">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"http.proxyPort"</span><span class="o">,</span> <span class="s">"8080"</span><span class="o">);</span>
    <span class="n">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"https.proxyHost"</span><span class="o">,</span> <span class="s">"127.0.0.1"</span><span class="o">);</span>
    <span class="n">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"https.proxyPort"</span><span class="o">,</span> <span class="s">"8080"</span><span class="o">);</span>

    <span class="n">CloseableHttpClient</span> <span class="n">client</span> <span class="o">=</span> <span class="n">HttpClientBuilder</span><span class="o">.</span><span class="na">create</span><span class="o">()</span>
            <span class="o">.</span><span class="na">useSystemProperties</span><span class="o">()</span>
            <span class="o">.</span><span class="na">build</span><span class="o">();</span>

    <span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="s">"https://www.random.org/integers/?num=12&amp;min=1&amp;max=100&amp;col=3&amp;base=10&amp;format=plain&amp;rnd=new"</span><span class="o">;</span>

    <span class="k">try</span> <span class="o">{</span>
        <span class="n">HttpEntity</span> <span class="n">entity</span> <span class="o">=</span> <span class="n">client</span>
            <span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">HttpGet</span><span class="o">(</span><span class="n">url</span><span class="o">))</span>
            <span class="o">.</span><span class="na">getEntity</span><span class="o">();</span>

        <span class="n">String</span> <span class="n">responseBody</span> <span class="o">=</span> <span class="n">EntityUtils</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">entity</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">responseBody</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">finally</span> <span class="o">{</span>
        <span class="n">client</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>We will get an exception similar to:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">Exception in thread "main" javax.net.ssl.SSLHandshakeException:
sun.security.validator.ValidatorException: PKIX path building failed:
sun.security.provider.certpath.SunCertPathBuilderException: unable
to find valid certification path to requested target</code></pre></figure>

<p>We get this exception because certificate returned by ZAP
proxy is not trusted.
To fix this problem we must generate a new ZAP root cert and add it
(temporarily) to Java keystore.</p>

<p>Generate a new cert and save it somewhere
(Tools -&gt; Options -&gt; Dynamic SSL Certificates):
<img src="assets/images/2019-01-25/gen_cert.png" alt="ZAP generate a new root certificate" />
Don’t forget to click OK.</p>

<p>Then add ZAP root certificate to Java keystore:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="gp">$ </span><span class="nb">cd</span> <span class="nv">$JAVA_HOME</span>/jre/lib/security
<span class="gp">$ </span><span class="nb">pwd</span>
/usr/lib/jvm/java-8-oracle/jre/lib/security
<span class="gp">$ </span><span class="c"># You should see cacerts file in this directory.</span>

<span class="gp">$ </span><span class="c"># Create a backup</span>
<span class="gp">$ </span>sudo cp cacerts cacerts.bakup2019-01-26

<span class="gp">$ </span><span class="c"># Add certificate to the store</span>
<span class="gp">$ </span>sudo keytool -importcert <span class="se">\</span>
 -alias zap-proxy.org <span class="se">\</span>
 -file ~/owasp_zap_root_ca.cer <span class="se">\</span>
 -keystore cacerts
<span class="gp">$ </span><span class="c"># When asked about keystore password </span>
<span class="gp">$ </span><span class="c"># write: changeit (the default password)</span></code></pre></figure>

<p>If we run our app again, we will be able to intercept an HTTPS request:
<img src="assets/images/2019-01-25/intercept_https.png" alt="Intercepted HTTPS call" /></p>

<p>This again should work with <code class="highlighter-rouge">proxychains-ng</code>.
Sometimes to make it work you will have to <strong>uncommend</strong> <code class="highlighter-rouge">proxy_dns</code>
option in <code class="highlighter-rouge">/etc/proxychains.conf</code> file, that I earlier said to
comment out. Why is this sometimes needed, to be honest, I don’t know but
it works this way…</p>

<p><strong>For security reasons</strong> after you finished your debugging session,
you should remove ZAP certificate from Java keystore:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="gp">$ </span><span class="nb">cd</span> <span class="nv">$JAVA_HOME</span>/jre/lib/security

<span class="gp">$ </span><span class="c"># Make sure you see your cert</span>
<span class="gp">$ </span>sudo keytool -list -v -keystore cacerts | grep zap-proxy.org
Enter keystore password:  changeit

<span class="gp">$ </span><span class="c"># Remove it</span>
<span class="gp">$ </span>sudo keytool -delete -alias zap-proxy.org -keystore cacerts

<span class="gp">$ </span><span class="c"># Make sure it's gone</span>
<span class="gp">$ </span>sudo keytool -list -v -keystore cacerts | grep zap-proxy.org
Enter keystore password:  changeit</code></pre></figure>

<p>Always generate a new ZAP proxy certificate
before adding it to Java keystore. If you must do this
often, I can advice you to create a script and/or bash alias to
make entire process more convenient.</p>


	  ]]></description>
	</item>

	<item>
	  <title>Java streams best practices</title>
	  <link>//java-streams-best-practices</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2017-11-08T01:00:00+01:00</pubDate>
	  <guid>//java-streams-best-practices</guid>
	  <description><![CDATA[
	     <p>In this short post I am going to present Java 8 streams 
best practices. Most of them either I figured out myself or
learned from my colleagues.</p>

<p>Let’s start with some “obvious” things about code formatting:</p>

<ul>
  <li>You should have at most one stream method call per line.
 This will make stream operations like <code class="highlighter-rouge">map</code>, <code class="highlighter-rouge">filter</code> and 
 <code class="highlighter-rouge">collect</code> easily recognizable.</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// BAD CODE:</span>
<span class="n">strings</span><span class="o">.</span><span class="na">stream</span><span class="o">().</span><span class="na">filter</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="o">).</span><span class="na">sorted</span><span class="o">()</span>
	<span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">2</span><span class="o">)).</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span>

<span class="c1">// GOOD CODE:</span>
<span class="n">strings</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
	<span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">()</span> <span class="o">&gt;</span> <span class="mi">2</span><span class="o">)</span>
	<span class="o">.</span><span class="na">sorted</span><span class="o">()</span>
	<span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">2</span><span class="o">))</span>
	<span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toList</span><span class="o">());</span></code></pre></figure>

<ul>
  <li>You should <code class="highlighter-rouge">import static</code> all of the standard 
 stream related methods. This will make code shorter, 
 easier to read and easier to understand by removing all 
 unnecessary visual noise.</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// BAD CODE:</span>
<span class="n">strings</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
	<span class="o">.</span><span class="na">sorted</span><span class="o">(</span><span class="n">Comparator</span><span class="o">.</span><span class="na">reverseOrder</span><span class="o">())</span>
	<span class="o">.</span><span class="na">limit</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span>
	<span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">Collectors</span><span class="o">.</span><span class="na">toMap</span><span class="o">(</span><span class="n">Function</span><span class="o">.</span><span class="na">identity</span><span class="o">(),</span> <span class="nl">String:</span><span class="o">:</span><span class="n">length</span><span class="o">));</span>

<span class="c1">// GOOD CODE:</span>
<span class="n">strings</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
	<span class="o">.</span><span class="na">sorted</span><span class="o">(</span><span class="n">reverseOrder</span><span class="o">())</span>
	<span class="o">.</span><span class="na">limit</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span>
	<span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">toMap</span><span class="o">(</span><span class="n">identity</span><span class="o">(),</span> <span class="nl">String:</span><span class="o">:</span><span class="n">length</span><span class="o">));</span></code></pre></figure>

<ul>
  <li>You should prefer method references to lambdas.</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// AVOID:</span>
<span class="n">strings</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
	<span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">s</span> <span class="o">-&gt;</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">())</span>
	<span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">toList</span><span class="o">());</span>

<span class="c1">// PREFER:</span>
<span class="n">strings</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
	<span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="nl">String:</span><span class="o">:</span><span class="n">length</span><span class="o">)</span>
	<span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">toList</span><span class="o">());</span></code></pre></figure>

<p>Method references are easier to read since we
avoid all the visual noise generated by <code class="highlighter-rouge">-&gt;</code> and <code class="highlighter-rouge">()</code> operators.
They are also handled more efficiently by current version of Java.
Lambda expressions like <code class="highlighter-rouge">s -&gt; s.length()</code> are compiled
to a private static method and an <code class="highlighter-rouge">invokedynamic</code> instruction.</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// s -&gt; s.lenght() is translated into:</span>
<span class="kd">private</span> <span class="kd">static</span> <span class="n">Integer</span> <span class="n">lambda$main</span><span class="err">$</span><span class="mi">0</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="o">{</span>
	<span class="k">return</span> <span class="n">s</span><span class="o">.</span><span class="na">length</span><span class="o">();</span>
<span class="o">}</span></code></pre></figure>

<p>Method references are compiled to only <code class="highlighter-rouge">invokedynamic</code> instruction.</p>

<ul>
  <li>You should use methods from <code class="highlighter-rouge">Class&lt;T&gt;</code> to filter stream elements by a type
 and to cast stream elements to a type.</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">Stream</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">objects</span> <span class="o">=</span> <span class="n">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span>
	<span class="s">"a string"</span><span class="o">,</span>
	<span class="mi">42</span><span class="o">,</span>
	<span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span> <span class="s">"an array"</span> <span class="o">},</span>
	<span class="s">"another string"</span><span class="o">);</span>

<span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">strings</span> <span class="o">=</span> <span class="n">objects</span>
	<span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">::</span><span class="n">isInstance</span><span class="o">)</span>
	<span class="o">.</span><span class="na">map</span><span class="o">(</span><span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">::</span><span class="n">cast</span><span class="o">)</span>
	<span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">toList</span><span class="o">());</span></code></pre></figure>

<p>Also rember that <code class="highlighter-rouge">Class&lt;T&gt;::isInstance</code> only checks if 
the value can be assigned to a variable of type <code class="highlighter-rouge">T</code>. For example
<code class="highlighter-rouge">Object.class.isInstance("foo")</code> returns <code class="highlighter-rouge">true</code> because string
<code class="highlighter-rouge">"foo"</code> can be assigned to a variable of type <code class="highlighter-rouge">Object</code>.
If you want to check that stream elements have exactly type <code class="highlighter-rouge">T</code>
you must use expression:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="o">.</span><span class="na">filter</span><span class="o">(</span><span class="n">x</span> <span class="o">-&gt;</span> <span class="o">(</span><span class="n">x</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">&amp;&amp;</span> <span class="n">x</span><span class="o">.</span><span class="na">getClass</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">T</span><span class="o">.</span><span class="na">class</span><span class="o">))</span></code></pre></figure>

<ul>
  <li>Give meaningful names to frequently used collector expressions.
 In most cases this means extracting collector expression into
 its own method.</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// USED FROM TIME TO TIME:</span>
<span class="n">Map</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Entity</span><span class="o">&gt;</span> <span class="n">entityById</span> <span class="o">=</span> <span class="n">entities</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
	<span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">toMap</span><span class="o">(</span><span class="nl">Entity:</span><span class="o">:</span><span class="n">getId</span><span class="o">,</span> <span class="n">identity</span><span class="o">()));</span>

<span class="c1">// USED FREQUENTLY:</span>
<span class="n">Map</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span> <span class="n">Entity</span><span class="o">&gt;</span> <span class="n">entityById</span> <span class="o">=</span> <span class="n">entities</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
	<span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">ExtraCollectors</span><span class="o">.</span><span class="na">toByIdMap</span><span class="o">());</span>

<span class="kd">private</span> <span class="kd">static</span> <span class="kd">class</span> <span class="nc">ExtraCollectors</span> <span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="n">Collector</span><span class="o">&lt;</span><span class="n">Entity</span><span class="o">,?,</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">,</span><span class="n">Entity</span><span class="o">&gt;&gt;</span> <span class="n">toByIdMap</span><span class="o">()</span> <span class="o">{</span>
	<span class="k">return</span> <span class="n">Collectors</span><span class="o">.</span><span class="na">toMap</span><span class="o">(</span><span class="nl">Entity:</span><span class="o">:</span><span class="n">getId</span><span class="o">,</span> <span class="n">identity</span><span class="o">());</span>
  <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>You may also consider using static import for your own frequently
used collectors.</p>

<ul>
  <li>Use the following pattern when you sort stream values at hoc:</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">List</span><span class="o">&lt;</span><span class="n">Student</span><span class="o">&gt;</span> <span class="n">result</span> <span class="o">=</span> <span class="n">students</span><span class="o">.</span><span class="na">stream</span><span class="o">()</span>
	<span class="o">.</span><span class="na">sorted</span><span class="o">(</span>
	  <span class="n">comparing</span><span class="o">(</span><span class="nl">Student:</span><span class="o">:</span><span class="n">getSurname</span><span class="o">)</span>
		<span class="o">.</span><span class="na">thenComparing</span><span class="o">(</span><span class="nl">Student:</span><span class="o">:</span><span class="n">getName</span><span class="o">,</span> <span class="n">reverseOrder</span><span class="o">())</span>
		<span class="o">.</span><span class="na">thenComparing</span><span class="o">(</span><span class="nl">Student:</span><span class="o">:</span><span class="n">getAge</span><span class="o">)</span>
		<span class="o">.</span><span class="na">thenComparing</span><span class="o">(</span><span class="nl">Student:</span><span class="o">:</span><span class="n">getId</span><span class="o">,</span> <span class="n">reverseOrder</span><span class="o">())</span>
	<span class="o">)</span>
	<span class="o">.</span><span class="na">collect</span><span class="o">(</span><span class="n">toList</span><span class="o">());</span></code></pre></figure>

<p>Notice how we used <code class="highlighter-rouge">reverseOrder()</code> to reverse order of sorting
by name and id. Also bear in mind that it is always a good idea
to extract complicated comparers to its own method or a final field.</p>

<ul>
  <li>Use <code class="highlighter-rouge">IntStream</code>, <code class="highlighter-rouge">LongStream</code> and <code class="highlighter-rouge">DoubleStream</code> when working with
 primitive types. They are faster (they avoid boxing) and easier to
 use (they add useful methods like <code class="highlighter-rouge">sum</code>).</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">Stream</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">strings</span> <span class="o">=</span> <span class="n">Stream</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="s">"a"</span><span class="o">,</span> <span class="s">"foo"</span><span class="o">,</span> <span class="s">"bar"</span><span class="o">,</span> <span class="s">"baz"</span><span class="o">);</span>

<span class="kt">double</span> <span class="n">averageLength</span> <span class="o">=</span> <span class="n">strings</span>
		<span class="o">.</span><span class="na">mapToInt</span><span class="o">(</span><span class="nl">String:</span><span class="o">:</span><span class="n">length</span><span class="o">)</span>
		<span class="o">.</span><span class="na">summaryStatistics</span><span class="o">()</span>
		<span class="o">.</span><span class="na">getAverage</span><span class="o">();</span></code></pre></figure>

<p>Use <code class="highlighter-rouge">mapTo[Int|Long|Double]</code> and <code class="highlighter-rouge">mapToObj</code> to convert 
between a stream and a specialized primitive stream.</p>

<p>Also learn about static helper methods exposed by specialized stream
classes:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// prints: 0 1 2 3 4 5 6 7 8 9</span>
<span class="n">IntStream</span><span class="o">.</span><span class="na">range</span><span class="o">(</span><span class="mi">0</span><span class="o">,</span> <span class="mi">10</span><span class="o">)</span>
	<span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>

<span class="c1">// prints: 1 2 4 8 16 32 64 128 256 512</span>
<span class="n">IntStream</span><span class="o">.</span><span class="na">iterate</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">i</span> <span class="o">-&gt;</span> <span class="mi">2</span><span class="o">*</span><span class="n">i</span><span class="o">)</span>
	<span class="o">.</span><span class="na">limit</span><span class="o">(</span><span class="mi">10</span><span class="o">)</span>
	<span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>

<span class="n">ThreadLocalRandom</span> <span class="n">random</span> <span class="o">=</span> <span class="n">ThreadLocalRandom</span><span class="o">.</span><span class="na">current</span><span class="o">();</span>

<span class="c1">// prints: -376368599 2112239618</span>
<span class="c1">// just to demo generate method:</span>
<span class="n">IntStream</span><span class="o">.</span><span class="na">generate</span><span class="o">(</span><span class="nl">random:</span><span class="o">:</span><span class="n">nextInt</span><span class="o">)</span>
	<span class="o">.</span><span class="na">limit</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
	<span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>

<span class="c1">// prints: -1134353240 2007034835</span>
<span class="c1">// stream of random int's - more idiomatic way:</span>
<span class="n">random</span><span class="o">.</span><span class="na">ints</span><span class="o">()</span>
	<span class="o">.</span><span class="na">limit</span><span class="o">(</span><span class="mi">2</span><span class="o">)</span>
	<span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span></code></pre></figure>

<ul>
  <li>Avoid using <code class="highlighter-rouge">peek()</code>.
 Try to make your streams free of side-effects.</li>
</ul>

<p>This list is by no means complete. I will try to add some more
practices in the future. Bye!</p>


	  ]]></description>
	</item>

	<item>
	  <title>Hibernate HHH000179 warning&#58 Narrowing proxy to class this operation breaks ==</title>
	  <link>//HHH000179-narrowing-proxy-to-class-this-operation-breaks-equality</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2017-07-30T02:00:00+02:00</pubDate>
	  <guid>//HHH000179-narrowing-proxy-to-class-this-operation-breaks-equality</guid>
	  <description><![CDATA[
	     <p>In this post I will explain why Hibernate is generating the HHH000179
warning and when ignoring it may introduce bugs in your code.</p>

<p>To understand what this “Narrowing proxy” is all about,
first we must learn about Hibernate proxies.
When we read a value of lazy loaded property or when we call
<code class="highlighter-rouge">EntityManager::getReference</code> Hibernate returns a proxy object.
This proxy is an instance of a class that was generated at runtime using
library like <a href="http://jboss-javassist.github.io/javassist/">Javassit</a>.</p>

<p>For example for a simple entity:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Entity</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"person"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="kd">extends</span> <span class="n">BaseEntity</span> <span class="o">{</span>
    <span class="nd">@Column</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"person_name"</span><span class="o">,</span> <span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="nd">@ManyToOne</span><span class="o">(</span><span class="n">optional</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">fetch</span> <span class="o">=</span> <span class="n">FetchType</span><span class="o">.</span><span class="na">LAZY</span><span class="o">,</span> <span class="n">cascade</span> <span class="o">=</span> <span class="n">CascadeType</span><span class="o">.</span><span class="na">ALL</span><span class="o">)</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"house_id"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">House</span> <span class="n">house</span><span class="o">;</span>

    <span class="nd">@OneToMany</span><span class="o">(</span><span class="n">mappedBy</span> <span class="o">=</span> <span class="s">"owner"</span><span class="o">,</span> <span class="n">fetch</span> <span class="o">=</span> <span class="n">FetchType</span><span class="o">.</span><span class="na">LAZY</span><span class="o">,</span> <span class="n">cascade</span> <span class="o">=</span> <span class="n">CascadeType</span><span class="o">.</span><span class="na">ALL</span><span class="o">,</span> <span class="n">orphanRemoval</span> <span class="o">=</span> <span class="kc">true</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">Set</span><span class="o">&lt;</span><span class="n">Pet</span><span class="o">&gt;</span> <span class="n">pets</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;(</span><span class="mi">0</span><span class="o">);</span>

    <span class="c1">// ...</span>
<span class="o">}</span></code></pre></figure>

<p>Generated proxy class looks similar to:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person_</span><span class="err">$</span><span class="n">$_jvst5ed_2</span> 
        <span class="kd">extends</span> <span class="n">Person</span> 
        <span class="kd">implements</span> <span class="n">HibernateProxy</span><span class="o">,</span> <span class="n">ProxyObject</span> <span class="o">{</span>
 
    <span class="kd">private</span> <span class="n">MethodHandler</span> <span class="n">handler</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Method</span><span class="o">[]</span> <span class="n">_methods_</span><span class="o">;</span>
 
    <span class="c1">// plenty of other stuff here</span>
 
    <span class="kd">public</span> <span class="kd">final</span> <span class="n">UUID</span> <span class="n">_d7getId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kd">super</span><span class="o">.</span><span class="na">getId</span><span class="o">();</span>
    <span class="o">}</span>
 
    <span class="kd">public</span> <span class="kd">final</span> <span class="n">UUID</span> <span class="n">getId</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">Method</span><span class="o">[]</span> <span class="n">var1</span> <span class="o">=</span> <span class="n">_methods_</span><span class="o">;</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">UUID</span><span class="o">)</span><span class="k">this</span><span class="o">.</span><span class="na">handler</span><span class="o">.</span><span class="na">invoke</span><span class="o">(</span><span class="k">this</span><span class="o">,</span> <span class="n">var1</span><span class="o">[</span><span class="mi">14</span><span class="o">],</span> <span class="n">var1</span><span class="o">[</span><span class="mi">15</span><span class="o">],</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[</span><span class="mi">0</span><span class="o">]);</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>TIP: In Hibernate 5.1 you may write generated 
proxy classes to disk by putting a breakpoint
in <a href="https://github.com/hibernate/hibernate-orm/blob/ba3359fe62be258638554fe23a2a0a6a50f7e732/hibernate-core/src/main/java/org/hibernate/proxy/pojo/javassist/JavassistProxyFactory.java#L102"><code class="highlighter-rouge">JavassistProxyFactory::buildJavassistProxyFactory</code></a>
method and setting 
<code class="highlighter-rouge">factory.writeDirectory</code> field to a valid path. 
You may want to use a conditional
breakpoint to avoid doing this manually every time a proxy is generated.</p>

<p>The most important point here is that proxy class <em>extends</em> entity class.</p>

<p>Now let’s see what happens when we mix proxies with inheritance.
Given a simple class hierarchy:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Entity</span>
<span class="nd">@Inheritance</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="n">InheritanceType</span><span class="o">.</span><span class="na">SINGLE_TABLE</span><span class="o">)</span>
<span class="nd">@DiscriminatorColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"animal_type"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Pet</span> <span class="kd">extends</span> <span class="n">BaseEntity</span> <span class="o">{</span>
    <span class="nd">@Column</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"owner_id"</span><span class="o">,</span> <span class="n">nullable</span> <span class="o">=</span> <span class="kc">false</span><span class="o">)</span>
    <span class="nd">@OneToOne</span><span class="o">(</span><span class="n">optional</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">fetch</span> <span class="o">=</span> <span class="n">FetchType</span><span class="o">.</span><span class="na">LAZY</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">Person</span> <span class="n">owner</span><span class="o">;</span>

    <span class="kd">public</span> <span class="kd">abstract</span> <span class="n">String</span> <span class="n">makeNoise</span><span class="o">();</span>
    <span class="c1">// ...</span>
<span class="o">}</span>

<span class="nd">@Entity</span>
<span class="nd">@DiscriminatorValue</span><span class="o">(</span><span class="s">"cat"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Cat</span> <span class="kd">extends</span> <span class="n">Pet</span> <span class="o">{</span> <span class="cm">/* ... */</span> <span class="o">}</span>

<span class="nd">@Entity</span>
<span class="nd">@DiscriminatorValue</span><span class="o">(</span><span class="s">"dog"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Dog</span> <span class="kd">extends</span> <span class="n">Pet</span> <span class="o">{</span> <span class="cm">/* ... */</span> <span class="o">}</span></code></pre></figure>

<p>When we use <code class="highlighter-rouge">EntityManager::getReference</code> to load a <code class="highlighter-rouge">Pet</code> we will
get a proxy that extends <code class="highlighter-rouge">Pet</code> class because Hibernate does not know yet
whatever our pet is a <code class="highlighter-rouge">Cat</code> or a <code class="highlighter-rouge">Dog</code>:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// In some earlier transaction:</span>
<span class="n">Cat</span> <span class="n">gerard</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Cat</span><span class="o">(</span><span class="s">"gerard"</span><span class="o">);</span>
<span class="n">entityManager</span><span class="o">.</span><span class="na">persist</span><span class="o">(</span><span class="n">gerard</span><span class="o">);</span>

<span class="n">gerardId</span> <span class="o">=</span> <span class="n">gerard</span><span class="o">.</span><span class="na">getId</span><span class="o">();</span>

<span class="c1">// In current transaction:</span>
<span class="n">Pet</span> <span class="n">pet</span> <span class="o">=</span> <span class="n">entityManager</span><span class="o">.</span><span class="na">getReference</span><span class="o">(</span><span class="n">Pet</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">gerardId</span><span class="o">);</span>

<span class="n">assertThat</span><span class="o">(</span><span class="n">pet</span><span class="o">)</span>
        <span class="o">.</span><span class="na">is</span><span class="o">(</span><span class="n">hibernateProxy</span><span class="o">())</span>
        <span class="o">.</span><span class="na">is</span><span class="o">(</span><span class="n">uninitialized</span><span class="o">())</span>
        <span class="o">.</span><span class="na">isInstanceOf</span><span class="o">(</span><span class="n">Pet</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
        <span class="o">.</span><span class="na">isNotInstanceOf</span><span class="o">(</span><span class="n">Cat</span><span class="o">.</span><span class="na">class</span><span class="o">);</span></code></pre></figure>

<p>We may force Hiberante to query database to load proxied entity
state but that doesn’t change proxy identity:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// makeNoise() will access field *via getter* to initialize proxy</span>
<span class="n">logger</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">"Pet is a cat: "</span> <span class="o">+</span> <span class="n">pet</span><span class="o">.</span><span class="na">makeNoise</span><span class="o">());</span> <span class="c1">// meow meeeow</span>

<span class="n">assertThat</span><span class="o">(</span><span class="n">pet</span><span class="o">)</span>
        <span class="o">.</span><span class="na">isNot</span><span class="o">(</span><span class="n">uninitialized</span><span class="o">())</span>
        <span class="o">.</span><span class="na">isNotInstanceOf</span><span class="o">(</span><span class="n">Cat</span><span class="o">.</span><span class="na">class</span><span class="o">);</span></code></pre></figure>

<p>Even though now Hibernate knows that our pet is a <code class="highlighter-rouge">Cat</code> it cannot
change already loaded proxy class definition,
<code class="highlighter-rouge">Pet</code> proxy continues to be so.
This may cause you problems because tests like <code class="highlighter-rouge">pet instanceof Cat</code> will
fail although pet indeed represents a cat.</p>

<p>There is also a second issue that may come up when working with proxies.
If <code class="highlighter-rouge">makeNoise()</code> method would access pet data via field, proxy would not
be notified about that data access and it wouldn’t load data from DB,
causing our method to read an uninitialized field value.
<em>The moral is that we should always use getters and setters 
when dealing with entity state</em>.</p>

<p>Now you may think that if we try to load <code class="highlighter-rouge">Pet</code> again (after proxy was
initialized), Hibernate will return instance of the <code class="highlighter-rouge">Cat</code> entity.
The behavior displayed by Hibernate is slightly different
because of Hibernate first level cache
that prefers returning already
loaded entity instance than creating a new one:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">Pet</span> <span class="n">pet2</span> <span class="o">=</span> <span class="n">entityManager</span><span class="o">.</span><span class="na">getReference</span><span class="o">(</span><span class="n">Pet</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">gerardId</span><span class="o">);</span>

<span class="n">assertThat</span><span class="o">(</span><span class="n">pet2</span><span class="o">)</span>
        <span class="o">.</span><span class="na">isNotInstanceOf</span><span class="o">(</span><span class="n">Cat</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
        <span class="o">.</span><span class="na">isSameAs</span><span class="o">(</span><span class="n">pet</span><span class="o">);</span></code></pre></figure>

<p>What will happen when we try to explicitly load a <code class="highlighter-rouge">Cat</code> entity:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// HHH000179: Narrowing proxy to class Cat - this operation breaks ==</span>
<span class="n">Pet</span> <span class="n">pet3</span> <span class="o">=</span> <span class="n">entityManager</span><span class="o">.</span><span class="na">getReference</span><span class="o">(</span><span class="n">Cat</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">gerardId</span><span class="o">);</span>
<span class="n">assertThat</span><span class="o">(</span><span class="n">pet3</span><span class="o">)</span>
        <span class="o">.</span><span class="na">isInstanceOf</span><span class="o">(</span><span class="n">Cat</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
        <span class="o">.</span><span class="na">isNot</span><span class="o">(</span><span class="n">hibernateProxy</span><span class="o">());</span></code></pre></figure>

<p>Now we got the famous HHH000179 warning, and Hiberante handled
us unproxied <code class="highlighter-rouge">Cat</code> instance.
But why was this warning generated? Because right now we 
we have two different object (the proxy and the <code class="highlighter-rouge">Cat</code> instance)
in our session that point to exactly the same entity.</p>

<p>Of course the pet proxy is pointing to the cat instance,
and changes applied to e.g. entity instance are reflected in the proxy state:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">assertThat</span><span class="o">(</span><span class="n">pet</span><span class="o">.</span><span class="na">getName</span><span class="o">())</span>
    <span class="o">.</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s">"gerard"</span><span class="o">);</span>

<span class="n">assertThat</span><span class="o">(</span><span class="n">pet</span><span class="o">)</span>
    <span class="o">.</span><span class="na">isNotSameAs</span><span class="o">(</span><span class="n">pet3</span><span class="o">);</span>

<span class="c1">// set via Cat entity</span>
<span class="n">pet3</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"proton"</span><span class="o">);</span>

<span class="c1">// reflected via proxy</span>
<span class="n">assertThat</span><span class="o">(</span><span class="n">pet</span><span class="o">.</span><span class="na">getName</span><span class="o">())</span>
    <span class="o">.</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s">"proton"</span><span class="o">);</span></code></pre></figure>

<p>So you may think that having two representation of the same DB row 
in memory is OK,
but the real troubles begin if we do not override <code class="highlighter-rouge">equals()</code> and <code class="highlighter-rouge">hashCode()</code>
methods properly. This is demonstrated by example:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// Alice is owner of the cat</span>
<span class="n">Person</span> <span class="n">alice</span> <span class="o">=</span> <span class="n">entityManager</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">Person</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">aliceId</span><span class="o">);</span>

<span class="c1">// Alice can own and not own the same cat...</span>
<span class="n">assertThat</span><span class="o">(</span><span class="n">alice</span><span class="o">.</span><span class="na">getPets</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span><span class="n">pet</span><span class="o">))</span>
        <span class="o">.</span><span class="na">isFalse</span><span class="o">();</span>

<span class="n">assertThat</span><span class="o">(</span><span class="n">alice</span><span class="o">.</span><span class="na">getPets</span><span class="o">().</span><span class="na">contains</span><span class="o">(</span><span class="n">pet3</span><span class="o">))</span>
        <span class="o">.</span><span class="na">isTrue</span><span class="o">();</span>

<span class="c1">// But only if we rely on default equals() and </span>
<span class="c1">// hashCode() implementation</span></code></pre></figure>

<p>Fortunately this can be easily fixed by providing <code class="highlighter-rouge">equals()</code> implementation
that is based either on primary key or business key equality, for example:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@MappedSuperclass</span>
<span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">BaseEntity</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@Type</span><span class="o">(</span><span class="n">type</span><span class="o">=</span><span class="s">"binary(16)"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">UUID</span> <span class="n">id</span><span class="o">;</span>

    <span class="kd">protected</span> <span class="n">BaseEntity</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="n">equals</span><span class="o">(</span><span class="n">Object</span> <span class="n">o</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="k">this</span> <span class="o">==</span> <span class="n">o</span><span class="o">)</span> <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">o</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="o">!(</span><span class="n">o</span> <span class="k">instanceof</span> <span class="n">BaseEntity</span><span class="o">))</span> <span class="k">return</span> <span class="kc">false</span><span class="o">;</span>

        <span class="n">BaseEntity</span> <span class="n">that</span> <span class="o">=</span> <span class="o">(</span><span class="n">BaseEntity</span><span class="o">)</span> <span class="n">o</span><span class="o">;</span>

        <span class="c1">// remember to use *getters*</span>
        <span class="k">return</span> <span class="n">getId</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">that</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="n">hashCode</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">getId</span><span class="o">().</span><span class="na">hashCode</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>We may also reproduce above behaviour with lazy loading,
you can find an example of how to do this in the attached source code.</p>

<h4 id="significance-in-the-real-world-application">Significance in the real world application</h4>

<p>Recently I developed a module in an application that was based on huge
in-house framework (Ughhh). This framework let’s call it X
contained some of the entities that we used, but we have no way of
modifying them. The only way to add some fields to an already existing entity
was to extend it (fortunately for us, most entities in X were declared
as base classes with inheritance strategy SINGLE_TABLE).
At the end of this project we had plenty of small class hierarchies
consisting only of super class and a single subclass.
We also had plenty of references from other entities to either
this sup or super classes. As you may expect this was a fertile 
ground for Hibernate HHH000179 warnings, and so I devoted a few hours of
my time to figure out what this warning is all about. In our case
providing proper <code class="highlighter-rouge">equals()</code> and <code class="highlighter-rouge">hashCode()</code> was all that was needed.
But just to sum up I want to present the last, more real world example.</p>

<p>Shipped with framework X:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Entity</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"extensible_user"</span><span class="o">)</span>
<span class="nd">@Inheritance</span><span class="o">(</span><span class="n">strategy</span> <span class="o">=</span> <span class="n">InheritanceType</span><span class="o">.</span><span class="na">SINGLE_TABLE</span><span class="o">)</span>
<span class="nd">@DiscriminatorColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"discriminator"</span><span class="o">)</span>
<span class="nd">@DiscriminatorValue</span><span class="o">(</span><span class="s">"NOT_USED"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LegacyUser</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">id</span><span class="o">;</span>

    <span class="nd">@Column</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">userPreference1</span><span class="o">;</span>

    <span class="nd">@Column</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">userPreference2</span><span class="o">;</span>
    <span class="c1">// ...</span>
<span class="o">}</span>

<span class="nd">@Entity</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"document"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LegacyDocument</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">id</span><span class="o">;</span>

    <span class="nd">@Column</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">contents</span><span class="o">;</span>

    <span class="nd">@ManyToOne</span><span class="o">(</span><span class="n">optional</span> <span class="o">=</span> <span class="kc">false</span><span class="o">,</span> <span class="n">fetch</span> <span class="o">=</span> <span class="n">FetchType</span><span class="o">.</span><span class="na">LAZY</span><span class="o">)</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"owner_id"</span><span class="o">)</span>
    <span class="c1">// !!! Entity referes to super class !!!</span>
    <span class="kd">private</span> <span class="n">LegacyUser</span> <span class="n">owner</span><span class="o">;</span>

    <span class="c1">// ...</span>
<span class="o">}</span></code></pre></figure>

<p>Shipped with my module:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Entity</span>
<span class="nd">@DiscriminatorValue</span><span class="o">(</span><span class="s">"EXTENDED"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">ExtendedUser</span> <span class="kd">extends</span> <span class="n">LegacyUser</span> <span class="o">{</span>
    <span class="nd">@Column</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">userPreference3</span><span class="o">;</span>
    <span class="c1">// ...</span>
<span class="o">}</span>

<span class="nd">@Entity</span>
<span class="nd">@Table</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"comment"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Comment</span> <span class="o">{</span>
    <span class="nd">@Id</span>
    <span class="nd">@GeneratedValue</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">id</span><span class="o">;</span>

    <span class="nd">@ManyToOne</span><span class="o">(</span><span class="cm">/*...*/</span><span class="o">)</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"document_id"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">LegacyDocument</span> <span class="n">document</span><span class="o">;</span>

    <span class="nd">@ManyToOne</span><span class="o">(</span><span class="cm">/*...*/</span>
    <span class="nd">@JoinColumn</span><span class="o">(</span><span class="n">name</span> <span class="o">=</span> <span class="s">"author_id"</span><span class="o">)</span>
    <span class="c1">// !!! Entity refers to subclass !!!</span>
    <span class="kd">private</span> <span class="n">ExtendedUser</span> <span class="n">author</span><span class="o">;</span>

    <span class="nd">@Column</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">contents</span><span class="o">;</span>
    <span class="c1">// ...</span>
<span class="o">}</span></code></pre></figure>

<p>As you can see legacy class <code class="highlighter-rouge">Document</code> is using <code class="highlighter-rouge">LegacyUser</code> to refer to
a system user. New class <code class="highlighter-rouge">Comment</code> is using <code class="highlighter-rouge">ExtendedUser</code> to refer to
a system user.</p>

<p>Without proper <code class="highlighter-rouge">equals()</code> implementation we may get into troubles:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">LegacyDocument</span> <span class="n">document</span> <span class="o">=</span> 
    <span class="n">entityManager</span><span class="o">.</span><span class="na">find</span><span class="o">(</span><span class="n">LegacyDocument</span><span class="o">.</span><span class="na">class</span><span class="o">,</span> <span class="n">documentId</span><span class="o">);</span>

<span class="c1">// we load some data from document owner</span>
<span class="n">LegacyUser</span> <span class="n">documentOwner</span> <span class="o">=</span> <span class="n">document</span><span class="o">.</span><span class="na">getOwner</span><span class="o">();</span>
<span class="n">doSomethingWithOwner</span><span class="o">(</span><span class="n">documentOwner</span><span class="o">);</span>

<span class="c1">// HHH000179: Narrowing proxy to class ExtendedUser </span>
<span class="c1">//  - this operation breaks ==</span>
<span class="c1">// When Hibernate loads comment that has </span>
<span class="c1">// field of type ExtendedUser with the same Id as LegacyUser </span>
<span class="c1">// it realizes that documentOwner is indeed ExtendedUser.</span>
<span class="c1">// So this time Hibernate could figure out that </span>
<span class="c1">// it generated wrong proxy without querying DB.</span>
<span class="n">List</span><span class="o">&lt;</span><span class="n">Comment</span><span class="o">&gt;</span> <span class="n">comments</span> <span class="o">=</span> <span class="n">entityManager</span><span class="o">.</span><span class="na">createQuery</span><span class="o">(</span>
            <span class="s">"select c from Comment c where c.document.id = :docId"</span><span class="o">,</span>
            <span class="n">Comment</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
        <span class="o">.</span><span class="na">setParameter</span><span class="o">(</span><span class="s">"docId"</span><span class="o">,</span> <span class="n">document</span><span class="o">.</span><span class="na">getId</span><span class="o">())</span>
        <span class="o">.</span><span class="na">getResultList</span><span class="o">();</span>

<span class="c1">// Now the most interesting part</span>
<span class="n">ExtendedUser</span> <span class="n">commentAuthor</span> <span class="o">=</span> <span class="n">comments</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">).</span><span class="na">getAuthor</span><span class="o">();</span>

<span class="c1">// comment author and doc author is the same user</span>
<span class="n">assertThat</span><span class="o">(</span><span class="n">commentAuthor</span><span class="o">.</span><span class="na">getId</span><span class="o">())</span>
        <span class="o">.</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">documentOwner</span><span class="o">.</span><span class="na">getId</span><span class="o">());</span>

<span class="c1">// but...</span>
<span class="n">assertThat</span><span class="o">(</span><span class="n">commentAuthor</span><span class="o">)</span>
        <span class="o">.</span><span class="na">isNotSameAs</span><span class="o">(</span><span class="n">documentOwner</span><span class="o">);</span>

<span class="c1">// Now without overloading hashCode()/equals() we may</span>
<span class="c1">// expect troubles...</span>
<span class="n">Set</span><span class="o">&lt;</span><span class="n">LegacyUser</span><span class="o">&gt;</span> <span class="n">users</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashSet</span><span class="o">&lt;&gt;();</span>
<span class="n">users</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">commentAuthor</span><span class="o">);</span>
<span class="n">users</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">documentOwner</span><span class="o">);</span>

<span class="n">assertThat</span><span class="o">(</span><span class="n">users</span><span class="o">).</span><span class="na">hasSize</span><span class="o">(</span><span class="mi">2</span><span class="o">);</span></code></pre></figure>

<p>And that is all that I wanted to say about HHH000179. 
The most important thing that
you should remember from this article is that with 
good <code class="highlighter-rouge">equals()</code> and <code class="highlighter-rouge">hashCode()</code> implementation
HHH000179 warning can be safely ignored.</p>

<p>Source code: <a href="https://github.com/marcin-chwedczuk/hibernate_narrowing_proxy_warning_demo">https://github.com/marcin-chwedczuk/hibernate_narrowing_proxy_warning_demo</a></p>


	  ]]></description>
	</item>

	<item>
	  <title>Debugging OpenJDK 8 with NetBeans on Ubuntu</title>
	  <link>//debugging-openjdk8-with-netbeans-on-ubuntu</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2017-06-24T02:00:00+02:00</pubDate>
	  <guid>//debugging-openjdk8-with-netbeans-on-ubuntu</guid>
	  <description><![CDATA[
	     <p>In this post we will learn how to download, compile and debug OpenJDK 8
using Ubuntu and NetBeans IDE.</p>

<h4 id="downloading-and-compiling-openjdk-8">Downloading and compiling OpenJDK 8</h4>

<p><a href="http://openjdk.java.net/">OpenJDK</a> project uses Mercurial for source
code versioning. To get sources using Mercurial follow instructions described 
<a href="https://stackoverflow.com/a/29845834/1779504">in this SO answer</a>.</p>

<p>To get OpenJDK sources using Git, we need to clone OpenJDK repository mirror
provided by <a href="https://adoptopenjdk.net/about.html">AdoptOpenJDK project</a>.
To speed things up we will only clone <code class="highlighter-rouge">master</code> branch without commit history:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">$ git clone \
	--depth 1 \
	-b master \
	git@github.com:AdoptOpenJDK/openjdk-jdk8u.git</code></pre></figure>

<p>Now when we have sources, its time to compile OpenJDK.
First we need to install all required dependencies:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">$ sudo apt install \
        libx11-dev \
        libxext-dev \
        libxrender-dev \
        libxtst-dev \
        libxt-dev \
        libcups2-dev \
        libfreetype6-dev \
        libasound2-dev</code></pre></figure>

<p>Then we must run <code class="highlighter-rouge">configure</code> script:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">$ cd openjdk-jdk8u/
$ chmod +x ./configure
$ ./configure \
	--with-debug-level=slowdebug \
	--with-target-bits=64</code></pre></figure>

<p>We call <code class="highlighter-rouge">configure</code> with two options:</p>

<ul>
  <li><code class="highlighter-rouge">--with-debug-level=slowdebug</code> - enables generating debug information
 when compiling OpenJDK</li>
  <li><code class="highlighter-rouge">--with-target-bits=64</code> - we will generate 64-bit binaries</li>
</ul>

<p>It may happen than <code class="highlighter-rouge">configure</code> will return error telling you that you need
to install some additional tool/library. This is something to be expected,
just follow instructions printed by <code class="highlighter-rouge">configure</code>.
You may need to do this several times until you will 
have all required dependencies installed on your system.</p>

<p>Now it’s time to actually build OpenJDK:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">$ make</code></pre></figure>

<p>This may take some time…</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">----- Build times -------
Start 2017-06-24 17:45:26
End   2017-06-24 17:48:53
00:00:12 corba
00:01:25 hotspot
00:00:08 jaxp
00:00:12 jaxws
00:01:13 jdk
00:00:17 langtools
00:03:27 TOTAL
-------------------------
Finished building OpenJDK for target 'default'</code></pre></figure>

<p>Now we may use our newly built <code class="highlighter-rouge">java</code> to run “Hello, world!” program:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">$ ./build/linux-x86_64-normal-server-slowdebug/jdk/bin/java \
	-cp "/home/me/dev/java/helloWorld/" \
	App
Hello, world!</code></pre></figure>

<h4 id="creating-project-for-openjdk-8-in-netbeans">Creating project for OpenJDK 8 in NetBeans</h4>

<p>You need to <a href="https://netbeans.org/downloads/">download</a>
and install NetBeans IDE. Since HotSpot is written in C++ we will need
NetBeans with C/C++ support.</p>

<p>Now it is time to create project for OpenJDK in NetBeans.
Select File-&gt;New Project…-&gt;C/C++ Project with Existing Sources…
<img src="assets/images/2017-06-24/new_proj.png" alt="New project dialog window." /></p>

<p>Then select “Custom” configuration mode:
<img src="assets/images/2017-06-24/new_proj2.png" alt="New project dialog window 2 step." /></p>

<p>We must use the same <code class="highlighter-rouge">configure</code> arguments that we used on command line:
<img src="assets/images/2017-06-24/new_proj3.png" alt="Configure options." /></p>

<p>Now click “Next” a few more times and then click “Finish”.
NetBeans should now run <code class="highlighter-rouge">configure</code> and build OpenJDK, you should
see compiler output in Build tab:
<img src="assets/images/2017-06-24/new_proj4.png" alt="Build window." /></p>

<p>After build ends you should see output similar to:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">----- Build times -------
Start 2017-06-24 18:07:15
End   2017-06-24 18:11:17
00:00:14 corba
00:01:45 hotspot
00:00:08 jaxp
00:00:13 jaxws
00:01:22 jdk
00:00:20 langtools
00:04:02 TOTAL
-------------------------
Finished building OpenJDK for target 'default'

BUILD SUCCESSFUL (total time: 4m 2s)</code></pre></figure>

<p>Now we should try to run our “Hello, World!” program from NetBeans.
Click on project and then select “Properties”:
<img src="assets/images/2017-06-24/run_1.png" alt="Run command." />
Then go to “Run” category and click on “…” next to “Run command”, then
write any command that you want to run. Assume that <code class="highlighter-rouge">"${OUTPUT_PATH}"</code>
refers to <code class="highlighter-rouge">java</code> binary:
<img src="assets/images/2017-06-24/run_2.png" alt="Run command step 2." /></p>

<p>Now select Run-&gt;Run Project, NetBeans will ask you what binary you want to
run, select <code class="highlighter-rouge">java</code>:
<img src="assets/images/2017-06-24/run_3.png" alt="Run command step 3." /></p>

<p>Now you should see “Hello, world!” written in Output window:
<img src="assets/images/2017-06-24/run_4.png" alt="Run command step 4." /></p>

<h4 id="debugging-with-netbeans">Debugging with NetBeans</h4>

<p>Call to <code class="highlighter-rouge">System.out.println(...)</code> in Java will ultimately be handled
by <code class="highlighter-rouge">writeBytes</code> function in <code class="highlighter-rouge">jdk/src/share/native/java/io/io_util.c</code> file
(this is only valid for Linux builds of OpenJDK).</p>

<p>Lets put a breakpoint inside that function and see what will happen when we
try to debug Hello world program:
<img src="assets/images/2017-06-24/debug_1.png" alt="Debug step 1." /></p>

<p>Select Debug-&gt;Debug Main Project. After executing this command you
may see window:
<img src="assets/images/2017-06-24/debug_2.png" alt="Debug step 2." />
JVM uses <code class="highlighter-rouge">SIGSEGV</code> for its internal purposes, from our point of view
we may just ignore it (select “Don’t Catch this Singla Again” and 
“Forward and Continue”). After a few seconds we should be able to
catch a breakpoint and see what JVM is doing:
<img src="assets/images/2017-06-24/debug_3.png" alt="Debug step 3." /></p>

<p>And that’s it! 
Now you will be able to check and understand how JVM is working under cover.</p>

<h4 id="references">References</h4>

<ul>
  <li><a href="http://marcelinorc.com/2016/02/17/using-netbeans-to-hack-openjdk9-in-ubuntu/">http://marcelinorc.com/2016/02/17/using-netbeans-to-hack-openjdk9-in-ubuntu/</a></li>
  <li><a href="https://neugens.wordpress.com/2015/02/26/debugging-the-jdk-with-gdb/">https://neugens.wordpress.com/2015/02/26/debugging-the-jdk-with-gdb/</a></li>
  <li><a href="https://github.com/AdoptOpenJDK/openjdk-build">https://github.com/AdoptOpenJDK/openjdk-build</a></li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>Zen and the Art of Unit Testing</title>
	  <link>//zen-and-the-art-of-unit-testing</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2017-02-19T01:00:00+01:00</pubDate>
	  <guid>//zen-and-the-art-of-unit-testing</guid>
	  <description><![CDATA[
	     <p>In this blog post we will concern ourselves with unit testing of
classic 3-layer business applications. We will assume that
all business logic lives in services and components,
that these services operate on entities that are stored and retrieved
from relational database, 
and that these entities doesn’t contain any logic.
Moreover we assume usage of 
DTO (<a href="https://en.wikipedia.org/wiki/Data_transfer_object">Data Transfer Object</a>)
to pass data between GUI and application services.</p>

<p><img src="assets/images/2017-02-19/L3arch.svg" alt="High level overview of 3-layer architecture" /></p>

<p><a href="https://en.wikipedia.org/wiki/Dependency_injection">Dependency Injection</a>
is indispensable when it comes to unit testing of
modern business applications. Without DI you are forced to write slow
and difficult to maintain integration tests instead of unit tests.
If you don’t know what DI
is or if you don’t used it before please read articles on <a href="https://en.wikipedia.org/wiki/Dependency_injection">Wikipedia</a> and <a href="https://martinfowler.com/articles/injection.html">Martin Fowler site</a>,
and return here after you are comfortable with both idea and usage of DI.</p>

<p>Now when we are ready to start, we will follow Confucius advice:</p>

<blockquote>
  <p>By three methods we may learn wisdom: First, by reflection, which is noblest;
Second, by imitation, which is easiest; 
and third by experience, which is the bitterest.</p>

  <p>Confucius</p>
</blockquote>

<p>and learn by imitation,
by observing how we may unit test <code class="highlighter-rouge">UserService</code> component.
We will use popular <a href="http://junit.org/junit4/">JUnit</a> unit testing framework
with <a href="http://site.mockito.org/">Mockito</a> mocking library.</p>

<h4 id="userservice-component"><code class="highlighter-rouge">UserService</code> component</h4>

<p><code class="highlighter-rouge">UserService</code> implements following business requirements:</p>

<ul>
  <li>Users forgot their passwords from time to time, application should
 provide a way to reset forgotten passwords.</li>
  <li>To reset their passwords users must provide email address they use
 to login to our system.</li>
  <li>If provided email address does not belong to any user, application 
 should do nothing. Otherwise application should generate unique
 password reset token and send
 to provided email address message with link to reset password form.
 Link should contain reset password token.
 In both cases application should show to user success message.</li>
  <li>Password reset tokens should be unique. Tokens should be hard to
 guess or enumerate (no numbers here). Token may be used only once
 to reset password. If we want to reset password again we need a new token.
 Token is valid for 24 hours starting from the date it was created, after 24
 hours token cannot be used to change password.</li>
  <li>When user open reset password link in her browser it should be presented
 with a form that allows to enter a new password. After clicking OK,
 application should validate token used in link, and if it is still
 valid application should change user password and make token invalid.
 Then application should send password change confirmation message to user.
 In case of expired token application should show warning to user.</li>
</ul>

<p><img src="assets/images/2017-02-19/flow.svg" alt="Password change flow" /></p>

<p>WARNING Before implementing real password reset feature please read
<a href="https://www.troyhunt.com/everything-you-ever-wanted-to-know/">Everything you ever wanted to know about building a secure password reset feature</a>.</p>

<p>Now when we understand business requirements we may attempt to implement
<code class="highlighter-rouge">UserService</code> component:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImpl</span> <span class="kd">implements</span> <span class="n">UserService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">UserRepository</span> <span class="n">userRepository</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">NotificationService</span> <span class="n">notificationService</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">DateTimeProvider</span> <span class="n">dateTimeProvider</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">CryptoService</span> <span class="n">cryptoService</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">UserServiceImpl</span><span class="o">(</span>
		<span class="n">UserRepository</span> <span class="n">userRepository</span><span class="o">,</span>
		<span class="n">DateTimeProvider</span> <span class="n">dateTimeProvider</span><span class="o">,</span>
		<span class="n">CryptoService</span> <span class="n">cryptoService</span><span class="o">,</span>
		<span class="n">NotificationService</span> <span class="n">notificationService</span><span class="o">)</span>
    <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">userRepository</span> <span class="o">=</span> <span class="n">requireNonNull</span><span class="o">(</span><span class="n">userRepository</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">notificationService</span> <span class="o">=</span> <span class="n">requireNonNull</span><span class="o">(</span><span class="n">notificationService</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">dateTimeProvider</span> <span class="o">=</span> <span class="n">requireNonNull</span><span class="o">(</span><span class="n">dateTimeProvider</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">cryptoService</span> <span class="o">=</span> <span class="n">requireNonNull</span><span class="o">(</span><span class="n">cryptoService</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">startResetPasswordProcess</span><span class="o">(</span><span class="n">String</span> <span class="n">userEmailAddress</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userRepository</span><span class="o">.</span><span class="na">findByEmailAddress</span><span class="o">(</span><span class="n">userEmailAddress</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">user</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
            <span class="k">return</span><span class="o">;</span>

        <span class="n">UUID</span> <span class="n">token</span> <span class="o">=</span> <span class="n">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">();</span>
        <span class="n">LocalDateTime</span> <span class="n">tokenValidityEndDate</span> <span class="o">=</span>
                <span class="n">dateTimeProvider</span><span class="o">.</span><span class="na">now</span><span class="o">().</span><span class="na">plusDays</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>

        <span class="n">user</span><span class="o">.</span><span class="na">setResetPasswordToken</span><span class="o">(</span><span class="n">token</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setResetPasswordTokenValidityEndDate</span><span class="o">(</span>
                <span class="n">tokenValidityEndDate</span><span class="o">);</span>

        <span class="n">ResetPasswordNotificationData</span> <span class="n">notificationData</span> <span class="o">=</span> 
            <span class="k">new</span> <span class="n">ResetPasswordNotificationData</span><span class="o">(</span>
                <span class="n">user</span><span class="o">.</span><span class="na">getEmail</span><span class="o">(),</span>
                <span class="n">token</span><span class="o">,</span>
                <span class="n">tokenValidityEndDate</span><span class="o">);</span>

        <span class="n">notificationService</span>
            <span class="o">.</span><span class="na">sendResetPasswordNotification</span><span class="o">(</span><span class="n">notificationData</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">finishResetPasswordProcess</span><span class="o">(</span>
            <span class="n">String</span> <span class="n">userEmailAddress</span><span class="o">,</span>
            <span class="n">String</span> <span class="n">newPassword</span><span class="o">,</span>
            <span class="n">UUID</span> <span class="n">resetPasswordToken</span><span class="o">)</span>
    <span class="o">{</span>
        <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userRepository</span><span class="o">.</span><span class="na">findByEmailAddress</span><span class="o">(</span><span class="n">userEmailAddress</span><span class="o">);</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">user</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
            <span class="k">return</span><span class="o">;</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getResetPasswordToken</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
            <span class="k">return</span><span class="o">;</span>

        <span class="k">if</span> <span class="o">(!</span><span class="n">user</span><span class="o">.</span><span class="na">getResetPasswordToken</span><span class="o">().</span><span class="na">equals</span><span class="o">(</span><span class="n">resetPasswordToken</span><span class="o">))</span>
            <span class="k">return</span><span class="o">;</span>

        <span class="k">if</span> <span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getResetPasswordTokenValidityEndDate</span><span class="o">()</span>
                <span class="o">.</span><span class="na">isBefore</span><span class="o">(</span><span class="n">dateTimeProvider</span><span class="o">.</span><span class="na">now</span><span class="o">()))</span>
            <span class="k">return</span><span class="o">;</span>

        <span class="n">user</span><span class="o">.</span><span class="na">setResetPasswordToken</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setResetPasswordTokenValidityEndDate</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>

        <span class="n">String</span> <span class="n">newPasswordHash</span> <span class="o">=</span> <span class="n">cryptoService</span><span class="o">.</span><span class="na">sha1</span><span class="o">(</span><span class="n">newPassword</span><span class="o">);</span>
        <span class="n">user</span><span class="o">.</span><span class="na">setPasswordHash</span><span class="o">(</span><span class="n">newPasswordHash</span><span class="o">);</span>

        <span class="n">notificationService</span>
            <span class="o">.</span><span class="na">sendPasswordChangedConfirmation</span><span class="o">(</span><span class="n">user</span><span class="o">.</span><span class="na">getEmail</span><span class="o">());</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p><code class="highlighter-rouge">UserService</code> operates on the following <code class="highlighter-rouge">User</code> entity:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">id</span><span class="o">;</span>
    
    <span class="kd">private</span> <span class="n">String</span> <span class="n">email</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">passwordHash</span><span class="o">;</span>
    
    <span class="kd">private</span> <span class="n">UUID</span> <span class="n">resetPasswordToken</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">LocalDateTime</span> <span class="n">resetPasswordTokenValidityEndDate</span><span class="o">;</span>
    
    <span class="c1">// getter, setter, etc.</span>
<span class="o">}</span></code></pre></figure>

<p>And requires four other components to work, namely: <code class="highlighter-rouge">UserRepository</code>,
<code class="highlighter-rouge">NotificationService</code>, <code class="highlighter-rouge">DateTimeProvider</code> and <code class="highlighter-rouge">CryptoService</code>:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">UserRepository</span> <span class="o">{</span>
    <span class="n">User</span> <span class="n">findByEmailAddress</span><span class="o">(</span><span class="n">String</span> <span class="n">emailAddress</span><span class="o">);</span>
<span class="o">}</span>
    
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">NotificationService</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="n">sendResetPasswordNotification</span><span class="o">(</span>
            <span class="n">ResetPasswordNotificationData</span> <span class="n">data</span><span class="o">);</span>
    <span class="kt">void</span> <span class="n">sendPasswordChangedConfirmation</span><span class="o">(</span><span class="n">String</span> <span class="n">email</span><span class="o">);</span>
<span class="o">}</span>
    
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">DateTimeProvider</span> <span class="o">{</span>
    <span class="n">LocalDateTime</span> <span class="n">now</span><span class="o">();</span>
<span class="o">}</span>
    
<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">CryptoService</span> <span class="o">{</span>
    <span class="n">String</span> <span class="n">sha1</span><span class="o">(</span><span class="n">String</span> <span class="n">input</span><span class="o">);</span>
<span class="o">}</span></code></pre></figure>

<p><code class="highlighter-rouge">DateTimeProvider</code> dependency was introduced solely for the purpose
of easier unit testing, as we will find out later.</p>

<p>Design of <code class="highlighter-rouge">UserService</code> follows principles of DI, component advertises
all dependencies it needs as constructor parameters.
DI containers may then use <a href="https://www.tutorialspoint.com/spring/constructor_based_dependency_injection.htm">constructor based dependency injection</a> to
provide implementations of these dependencies.
Right now we have only implemented <code class="highlighter-rouge">UserService</code>, <code class="highlighter-rouge">UserRepository</code> and
other dependencies are not implemented yet.
Nevertheless with usage of stubs and
mocks we may test <code class="highlighter-rouge">UserService</code> implementation right now.</p>

<h4 id="writing-tests-for-startresetpasswordprocess">Writing tests for <code class="highlighter-rouge">startResetPasswordProcess</code></h4>

<p>By convention we should put tests for <code class="highlighter-rouge">ComponentName</code> into <code class="highlighter-rouge">ComponentNameTest</code>
class. For example tests for <code class="highlighter-rouge">UserServiceImpl</code> should be put 
into <code class="highlighter-rouge">UserServiceImplTest</code> class.</p>

<p>When you use Maven you should put your test class in 
the same package that contains tested component.
For example <code class="highlighter-rouge">UserServiceImpl</code>
is part of <code class="highlighter-rouge">io.mc.letsmock.demo</code> package, so <code class="highlighter-rouge">UserServiceImplTest</code>
should also belong to <code class="highlighter-rouge">io.mc.letsmock.demo</code> package.
With Maven the only difference between application code and test code is the
directory in which code resides. Application code will be in <code class="highlighter-rouge">src/main/java</code>
directory and test code will be in <code class="highlighter-rouge">src/test/java</code> directory:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">.
`-- src
    |-- main
    |   `-- java
    |       `-- io
    |           `-- mc
    |               `-- letsmock
    |                   `-- demo
    |                       |-- UserServiceImpl.java
    |                       `-- UserService.java
    `-- test
        `-- java
            `-- io
                `-- mc
                    `-- letsmock
                        `-- demo
                            `-- UserServiceImplTest.java</code></pre></figure>

<p>Another popular
convention used with e.g. Ant is to put applicaiton code into
<code class="highlighter-rouge">mycompany.productA.xx.yy</code> package and test code
into <code class="highlighter-rouge">mycompany.productA.test.xx.yy</code> package.</p>

<p>The important thing here is that team should choose one particular convention
how to name tests and where to put test classes and stick to it.
If you use Maven I strongly encourage using conventions that I described above.</p>

<h5 id="naming-tests">Naming tests</h5>

<p>After reading requirements we come to conclusion that we need the following
test cases to be sure that <code class="highlighter-rouge">startResetPasswordProcess</code> method works:</p>

<ul>
  <li>When we couldn’t find <code class="highlighter-rouge">User</code> with specified email address, component should
 do not nothing, in particular is should not crash</li>
  <li>When there is <code class="highlighter-rouge">User</code> with specified email address, component should set
 <code class="highlighter-rouge">resetPasswordToken</code> and <code class="highlighter-rouge">resetPasswordTokenValidityEndDate</code> fields on <code class="highlighter-rouge">User</code>
 instance to respectively 
 newly generated token, and <code class="highlighter-rouge">LocalDateTime</code> instance that represent point
 in time 24 hours later than now.</li>
  <li>When there is <code class="highlighter-rouge">User</code> with specified email address, component should send
 message with token to user using <code class="highlighter-rouge">NotificationService</code>.</li>
</ul>

<p>Notice that each of these test cases test only single thing, this is
very important if we want to have clean and independent tests.
As method should do only one thing, 
test should test only one “outcome” of a method.
When you gain more experience you may want to relax this rule, 
but if you just started unit testing
you should stick with it for some time.</p>

<p>There are two schools when it comes to naming test methods, first
school teaches that test name should consists of three parts:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Test</span>
<span class="kt">void</span> <span class="nf">scenario_conditions_outcome</span><span class="p">(</span><span class="o">)</span></code></pre></figure>

<p><code class="highlighter-rouge">scenario</code> is the thing that we want to test, this in most cases
will be the name of the method that we want to test.
<code class="highlighter-rouge">conditions</code> describe the state of program that tested method
may expect when it is called. <code class="highlighter-rouge">outcome</code> is the state of the program
that we expect after tested method returns.</p>

<p>To give you a feeling how this naming scheme works here
are some dummy tests for Java <code class="highlighter-rouge">+</code> operator:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kt">void</span> <span class="nf">plusOperator_given1And5_returns6</span><span class="p">(</span><span class="o">)</span>
<span class="kt">void</span> <span class="nf">plusOperator_given1AndMinus7_returnsMinus6</span><span class="p">(</span><span class="o">)</span>
<span class="kt">void</span> <span class="nf">plusOperator_whenResultIsGreaterThanMAXINT_wrapsResultsUsingMod2Arithmetic</span><span class="p">(</span><span class="o">)</span></code></pre></figure>

<p>The second school took inspiration for thier naming scheme from 
<a href="https://en.wikipedia.org/wiki/Behavior-driven_development">BDD</a>
movement.
This school advices that 
test names should consists of full sentences that describe both
conditions and outcome of tested method. 
Names for <code class="highlighter-rouge">+</code> operator tests following this
scheme looks like:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kt">void</span> <span class="nf">_1_plus_5_should_return_6</span><span class="p">(</span><span class="o">)</span>
<span class="kt">void</span> <span class="nf">_1_plus_minus_7_should_return_minus_6</span><span class="p">(</span><span class="o">)</span>
<span class="kt">void</span> <span class="nf">when_result_of_addition_is_greater_than_MAXINT_plus_operator_should_wrap_result_using_mod_2_arithmetic</span><span class="p">(</span><span class="o">)</span></code></pre></figure>

<p>As you can see test names generated using this approach 
can be quite verbose at times. Verbosity of this schema is it great advantage 
because the main purpose of test name is to tell you
what exactly is not working when given test fails.</p>

<p>I prefer first school with scenario/conditions/outcome division of test name,
so I will use it exclusively in the rest of this post.</p>

<p>Returning to <code class="highlighter-rouge">startResetPasswordProcess</code> we should create three tests:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kt">void</span> <span class="nf">startResetPasswordProcess_givenEmailNotBelongingToAnyUser_doesNothing</span><span class="p">(</span><span class="o">)</span>
<span class="kt">void</span> <span class="nf">startResetPasswordProcess_givenEmailOfExistingUser_generatesToken</span><span class="p">(</span><span class="o">)</span>
<span class="kt">void</span> <span class="nf">startResetPasswordProcess_givenEmailOfExistingUser_sendsNotificationToUser</span><span class="p">(</span><span class="o">)</span></code></pre></figure>

<p>These test names are not as descriptive as they may be, but are close
to what you may expect in average enterprise application.</p>

<h5 id="anatomy-of-test-method">Anatomy of test method</h5>

<p>Our first test will check that <code class="highlighter-rouge">startResetPasswordProcess</code> won’t throw
exceptions when called with email address of non-existing user.
But to test <code class="highlighter-rouge">UserServiceImpl</code> class we must create it’s instance and this
will require providing all necessary dependencies.
Fortunately we may use Mockito library to 
to generate 
dummy implementations of <code class="highlighter-rouge">UserRepository</code>, <code class="highlighter-rouge">NotificationService</code> 
and others. By default these dummy implementations do nothing and
are similar to handcrafted test stubs like:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserRepositoryStub</span> <span class="kd">implements</span> <span class="n">UserRepository</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">User</span> <span class="n">findByEmailAddress</span><span class="o">(</span><span class="n">String</span> <span class="n">emailAddress</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>But we will soon see that we can instruct Mockito to return
values from these stubs or to check if a given method was called
on dummy object.</p>

<p>Below you can see our first test code:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Test</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">startResetPasswordProcess_givenEmailNotBelongingToAnyUser_doesNothing</span><span class="p">(</span><span class="o">)</span> <span class="o">{</span>
   <span class="c1">// arrange</span>
   <span class="n">UserRepository</span> <span class="n">userRepository</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">UserRepository</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
   <span class="n">DateTimeProvider</span> <span class="n">dateTimeProvider</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">DateTimeProvider</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
   <span class="n">CryptoService</span> <span class="n">cryptoService</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">CryptoService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
   <span class="n">NotificationService</span> <span class="n">notificationService</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">NotificationService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

   <span class="n">when</span><span class="o">(</span><span class="n">userRepository</span><span class="o">.</span><span class="na">findByEmailAddress</span><span class="o">(</span><span class="s">"unknown@example.com"</span><span class="o">))</span>
	   <span class="o">.</span><span class="na">thenReturn</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>

   <span class="n">UserServiceImpl</span> <span class="n">userService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UserServiceImpl</span><span class="o">(</span>
	   <span class="n">userRepository</span><span class="o">,</span>
	   <span class="n">dateTimeProvider</span><span class="o">,</span>
	   <span class="n">cryptoService</span><span class="o">,</span>
	   <span class="n">notificationService</span><span class="o">);</span>
   <span class="c1">// act</span>
   <span class="n">userService</span><span class="o">.</span><span class="na">startResetPasswordProcess</span><span class="o">(</span><span class="s">"unknown@example.com"</span><span class="o">);</span>

   <span class="c1">// assert</span>
   <span class="n">verify</span><span class="o">(</span><span class="n">notificationService</span><span class="o">,</span> <span class="n">never</span><span class="o">())</span>
	   <span class="o">.</span><span class="na">sendResetPasswordNotification</span><span class="o">(</span><span class="n">any</span><span class="o">());</span>

   <span class="n">verify</span><span class="o">(</span><span class="n">notificationService</span><span class="o">,</span> <span class="n">never</span><span class="o">())</span>
	   <span class="o">.</span><span class="na">sendPasswordChangedConfirmation</span><span class="o">(</span><span class="n">anyString</span><span class="o">());</span>
<span class="o">}</span></code></pre></figure>

<p>Before we dig into details let’s look at this test from high level
point of view. Almost every test method can be divided into three
parts called Arrange-Act-Assert or Given-When-Then. I used comments
to signify when each of these parts start. Each of these parts has
different purpose. In Arrange part we must create instance of
tested component and all necessary test data and
also we must set up Mockito mocks.
If we may compare test method to theater play, then Arrange is like 
preparing scene, costumes and lights.</p>

<p>The first four lines of our test Arrange section are responsible for
creating dummy implementations of <code class="highlighter-rouge">UserServiceImpl</code> dependencies:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">UserRepository</span> <span class="n">userRepository</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">UserRepository</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="n">DateTimeProvider</span> <span class="n">dateTimeProvider</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">DateTimeProvider</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="n">CryptoService</span> <span class="n">cryptoService</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">CryptoService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="n">NotificationService</span> <span class="n">notificationService</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">NotificationService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span></code></pre></figure>

<p>Then we set up one of our stub objects:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">when</span><span class="o">(</span><span class="n">userRepository</span><span class="o">.</span><span class="na">findByEmailAddress</span><span class="o">(</span><span class="s">"unknown@example.com"</span><span class="o">))</span>
	<span class="o">.</span><span class="na">thenReturn</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span></code></pre></figure>

<p>Here we instruct Mockito that dummy implementation generated for 
<code class="highlighter-rouge">UserRepository::findByEmailAddress</code>
should return <code class="highlighter-rouge">null</code> when called with <code class="highlighter-rouge">"unknown@example.com"</code> string.
But to be honest these lines are redundant because
method stubs generated by Mockito by default return <code class="highlighter-rouge">null</code> for
reference types, default values for primitives and empty collections
for methods returning collections. 
Still I leave them because they 
make purpose of our test more evident.</p>

<p>After Arrange section we have an Act section. Again (so many AAAAs)
returning to our theater play analogy (another A, no pun intended)
Act section is like the actual play, we invoke tested component and let
the code be alive. Act part is usually very short, in most cases
it consists of single line of code:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">userService</span><span class="o">.</span><span class="na">startResetPasswordProcess</span><span class="o">(</span><span class="s">"unknown@example.com"</span><span class="o">);</span></code></pre></figure>

<p>The last section in the test method is Assert when we want to
check results produced by tested code. In our test we check two
assumptions:</p>

<ol>
  <li>Invocation of <code class="highlighter-rouge">startResetPasswordProcess</code> does not throw any exceptions.
 This is tested implicitly by JUnit - test fails when test method throwns
 exception. Since our test passes we are certain that <code class="highlighter-rouge">startResetPasswordProcess</code>
 doesn’t throw any.</li>
  <li>We want to be certain that no notification was send to provided email address
 so we asses with the help of Mockit that none of the methods on <code class="highlighter-rouge">NotificationService</code>
 was called.</li>
</ol>

<p>Mockito verification syntax is a bit unintuitive, so let’s take a closer
look at one of our assertions:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">verify</span><span class="o">(</span><span class="n">notificationService</span><span class="o">,</span> <span class="n">never</span><span class="o">())</span>
	   <span class="o">.</span><span class="na">sendResetPasswordNotification</span><span class="o">(</span><span class="n">any</span><span class="o">());</span></code></pre></figure>

<p>We use <code class="highlighter-rouge">verify</code> to tell Mockit that we want to preform verification.
<code class="highlighter-rouge">never()</code> means that we expect that method was not called on dummy object.
Then we specify method that should not be called,
in our case <code class="highlighter-rouge">sendResetPasswordNotification</code>. 
We pass <code class="highlighter-rouge">any()</code> as method parameter to tell Mockito that method
should just not be called, and that we don’t care about parameters
that was passed to it. Mockito is quite flexible here
and we may for example verify that method should not be called with given
set of parameters but must be called with another. We may also replace
<code class="highlighter-rouge">never()</code> with one of several predicates like e.g. <code class="highlighter-rouge">times(2)</code> to assert that
method was called twice.</p>

<h4 id="testing-with-assertions">Testing with assertions</h4>

<p>Our first test assured us that <code class="highlighter-rouge">startResetPasswordProcess</code> works correctly
with email address of unknown user. Now it is time to check if
it also works correctly given email addresses of existing user.
Our second test will check if given valid email address <code class="highlighter-rouge">UserServiceImpl</code>
generates a new token for <code class="highlighter-rouge">User</code> and sets it expiry date correctly.
We also will check that user password is not altered in any way by
starting reset password process (it should change only when we <em>finish</em>
password change process).
Here is our second test code:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Test</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">startResetPasswordProcess_givenEmailOfExistingUser_generatesToken</span><span class="p">(</span><span class="o">)</span> <span class="o">{</span>
   <span class="c1">// arrange</span>
   <span class="n">UserRepository</span> <span class="n">userRepository</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">UserRepository</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
   <span class="n">DateTimeProvider</span> <span class="n">dateTimeProvider</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">DateTimeProvider</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
   <span class="n">CryptoService</span> <span class="n">cryptoService</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">CryptoService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
   <span class="n">NotificationService</span> <span class="n">notificationService</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">NotificationService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

   <span class="n">UserServiceImpl</span> <span class="n">userService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UserServiceImpl</span><span class="o">(</span>
	   <span class="n">userRepository</span><span class="o">,</span>
	   <span class="n">dateTimeProvider</span><span class="o">,</span>
	   <span class="n">cryptoService</span><span class="o">,</span>
	   <span class="n">notificationService</span><span class="o">);</span>

   <span class="n">User</span> <span class="n">joe</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>
   <span class="n">joe</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="s">"joe@example.com"</span><span class="o">);</span>
   <span class="n">joe</span><span class="o">.</span><span class="na">setResetPasswordToken</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
   <span class="n">joe</span><span class="o">.</span><span class="na">setResetPasswordTokenValidityEndDate</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
   <span class="n">joe</span><span class="o">.</span><span class="na">setPasswordHash</span><span class="o">(</span><span class="s">"old-password-hash"</span><span class="o">);</span>

   <span class="n">when</span><span class="o">(</span><span class="n">userRepository</span><span class="o">.</span><span class="na">findByEmailAddress</span><span class="o">(</span><span class="s">"joe@example.com"</span><span class="o">))</span>
	   <span class="o">.</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">joe</span><span class="o">);</span>

   <span class="n">when</span><span class="o">(</span><span class="n">dateTimeProvider</span><span class="o">.</span><span class="na">now</span><span class="o">())</span>
	   <span class="o">.</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">LocalDateTime</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2017</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">10</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">));</span>

   <span class="c1">// act</span>
   <span class="n">userService</span><span class="o">.</span><span class="na">startResetPasswordProcess</span><span class="o">(</span><span class="s">"joe@example.com"</span><span class="o">);</span>

   <span class="c1">// assert</span>
   <span class="n">assertThat</span><span class="o">(</span><span class="n">joe</span><span class="o">.</span><span class="na">getResetPasswordToken</span><span class="o">())</span>
	   <span class="o">.</span><span class="na">isNotNull</span><span class="o">();</span>

   <span class="n">assertThat</span><span class="o">(</span><span class="n">joe</span><span class="o">.</span><span class="na">getResetPasswordTokenValidityEndDate</span><span class="o">())</span>
	   <span class="o">.</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">LocalDateTime</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2017</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">11</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">));</span>

   <span class="n">assertThat</span><span class="o">(</span><span class="n">joe</span><span class="o">.</span><span class="na">getPasswordHash</span><span class="o">())</span>
	   <span class="o">.</span><span class="na">withFailMessage</span><span class="o">(</span><span class="s">"Password should not be changed"</span><span class="o">)</span>
	   <span class="o">.</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s">"old-password-hash"</span><span class="o">);</span>
<span class="o">}</span></code></pre></figure>

<p>Arrange section of our second test does not differ much from Arrange
section of our first test, except that we added code for creation
of an <code class="highlighter-rouge">User</code> instance. Notice that we populate <code class="highlighter-rouge">User</code> with carefully 
chosen data that will allow us to test <code class="highlighter-rouge">startResetPasswordProcess</code>
implementation easily e.g. we set both <code class="highlighter-rouge">resetPasswordToken</code> and
<code class="highlighter-rouge">resetPasswordTokenValidityEndDate</code> to <code class="highlighter-rouge">null</code>.
Then we instruct Mockito to return our <code class="highlighter-rouge">User</code> instance when we
ask <code class="highlighter-rouge">UserRepository</code> for user with <code class="highlighter-rouge">joe@example.com</code> email address:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">when</span><span class="o">(</span><span class="n">userRepository</span><span class="o">.</span><span class="na">findByEmailAddress</span><span class="o">(</span><span class="s">"joe@example.com"</span><span class="o">))</span>
	<span class="o">.</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">joe</span><span class="o">);</span></code></pre></figure>

<p>We should strive to make our unit tests as much deterministic as possible.
Unit test that sometimes fails without a reason is burden rather than
a benefit, and should be either fixed or removed.
To make unit more robust we should avoid depending on external input
like information about current time. To facilitate that I decided to
introduce <code class="highlighter-rouge">DateTimeProvider</code> component with sole purpose of making
unit tests more predictable. With small help of Mockito we are now
masters of time:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">when</span><span class="o">(</span><span class="n">dateTimeProvider</span><span class="o">.</span><span class="na">now</span><span class="o">())</span>
	<span class="o">.</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">LocalDateTime</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2017</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">10</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">));</span></code></pre></figure>

<p>After all this preparations, we are now free to invoke <code class="highlighter-rouge">startResetPasswordProcess</code>
and check it’s outcome. In unit tests we mainly use assertions to check
correctness of tested code. JUnit already comes with handy assertion library
that we may use like this:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.*;</span>

<span class="n">assertNotNull</span><span class="o">(</span><span class="n">joe</span><span class="o">.</span><span class="na">getResetPasswordToken</span><span class="o">());</span>
<span class="n">assertEquals</span><span class="o">(</span><span class="s">"old-password-hash"</span><span class="o">,</span> <span class="n">joe</span><span class="o">.</span><span class="na">getPasswordHash</span><span class="o">());</span></code></pre></figure>

<p>When JUnit assertion fails it throws <code class="highlighter-rouge">AssertionError</code>, test fails and
we get error similar to:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">AssertionError</span>
	<span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">fail</span><span class="o">(</span><span class="n">Assert</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">86</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertTrue</span><span class="o">(</span><span class="n">Assert</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">41</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertNotNull</span><span class="o">(</span><span class="n">Assert</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">712</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">org</span><span class="o">.</span><span class="na">junit</span><span class="o">.</span><span class="na">Assert</span><span class="o">.</span><span class="na">assertNotNull</span><span class="o">(</span><span class="n">Assert</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">722</span><span class="o">)</span>
	<span class="n">at</span> <span class="n">io</span><span class="o">.</span><span class="na">mc</span><span class="o">.</span><span class="na">letsmock</span><span class="o">.</span><span class="na">demo</span><span class="o">.</span><span class="na">UserServiceImplTest</span><span class="o">.</span><span class="na">startResetPasswordProcess_givenEmailOfExistingUser_generatesToken</span><span class="o">(</span><span class="n">UserServiceImplTest</span><span class="o">.</span><span class="na">java</span><span class="o">:</span><span class="mi">113</span><span class="o">)</span></code></pre></figure>

<p>Unfortunately error messages generated by JUnit assertions are not
always the best way to find out what went wrong with failing tests.
JUnit assertions are also cumbersome to use at times. From these
and other reasons I prefer to use assertions from assertJ library
and I used them when I wrote our second test:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kn">import</span> <span class="nn">static</span> <span class="n">org</span><span class="o">.</span><span class="na">assertj</span><span class="o">.</span><span class="na">core</span><span class="o">.</span><span class="na">api</span><span class="o">.</span><span class="na">Assertions</span><span class="o">.</span><span class="na">assertThat</span><span class="o">;</span>

<span class="n">assertThat</span><span class="o">(</span><span class="n">joe</span><span class="o">.</span><span class="na">getResetPasswordToken</span><span class="o">())</span>
	<span class="o">.</span><span class="na">isNotNull</span><span class="o">();</span>

<span class="n">assertThat</span><span class="o">(</span><span class="n">joe</span><span class="o">.</span><span class="na">getResetPasswordTokenValidityEndDate</span><span class="o">())</span>
	<span class="o">.</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">LocalDateTime</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2017</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">11</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">));</span>

<span class="n">assertThat</span><span class="o">(</span><span class="n">joe</span><span class="o">.</span><span class="na">getPasswordHash</span><span class="o">())</span>
	<span class="o">.</span><span class="na">withFailMessage</span><span class="o">(</span><span class="s">"Password should not be changed"</span><span class="o">)</span>
	<span class="o">.</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s">"old-password-hash"</span><span class="o">);</span></code></pre></figure>

<p>Here we check three things:</p>

<ol>
  <li>New password reset token was generated and assigned to <code class="highlighter-rouge">resetPasswordToken</code>
 property</li>
  <li>Expiry date of password reset token was set correctly (token should be
 valid for the next 24 hours)</li>
  <li>Current user password was not changed</li>
</ol>

<p>Notice also that we use <code class="highlighter-rouge">withFailMessage</code> to provide additional
information in case our third assertion fails.
Without <code class="highlighter-rouge">withFailMessage</code> we would get following error:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">org.junit.ComparisonFailure: 
Expected :"old-password-hash"
Actual   :"xxx"</code></pre></figure>

<p>With <code class="highlighter-rouge">withFailMessage</code> we get:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">java.lang.AssertionError: Password should not be changed</code></pre></figure>

<h4 id="merciless-refactoring">Merciless refactoring</h4>

<p>Right now both of our tests pass, but we see a lot of code duplication
between them. Now it is a good time to extract common parts of both
tests into <code class="highlighter-rouge">setUp</code> method and to create some fields in our test class:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserServiceImplTestAfterRefactoring</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">UserRepository</span> <span class="n">userRepository</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">DateTimeProvider</span> <span class="n">dateTimeProvider</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">CryptoService</span> <span class="n">cryptoService</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">NotificationService</span> <span class="n">notificationService</span><span class="o">;</span>

    <span class="kd">private</span> <span class="n">UserServiceImpl</span> <span class="n">userService</span><span class="o">;</span>

    <span class="nd">@Before</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">setUp</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">userRepository</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">UserRepository</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">dateTimeProvider</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">DateTimeProvider</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">cryptoService</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">CryptoService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="n">notificationService</span> <span class="o">=</span> <span class="n">mock</span><span class="o">(</span><span class="n">NotificationService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

        <span class="n">userService</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UserServiceImpl</span><span class="o">(</span>
                <span class="n">userRepository</span><span class="o">,</span>
                <span class="n">dateTimeProvider</span><span class="o">,</span>
                <span class="n">cryptoService</span><span class="o">,</span>
                <span class="n">notificationService</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">startResetPasswordProcess_givenEmailNotBelongingToAnyUser_doesNothing</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// arrange</span>
        <span class="n">when</span><span class="o">(</span><span class="n">userRepository</span><span class="o">.</span><span class="na">findByEmailAddress</span><span class="o">(</span><span class="s">"unknown@example.com"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">thenReturn</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>

        <span class="c1">// act</span>
        <span class="n">userService</span><span class="o">.</span><span class="na">startResetPasswordProcess</span><span class="o">(</span><span class="s">"unknown@example.com"</span><span class="o">);</span>

        <span class="c1">// assert</span>
        <span class="n">verify</span><span class="o">(</span><span class="n">notificationService</span><span class="o">,</span> <span class="n">never</span><span class="o">())</span>
                <span class="o">.</span><span class="na">sendResetPasswordNotification</span><span class="o">(</span><span class="n">any</span><span class="o">());</span>

        <span class="n">verify</span><span class="o">(</span><span class="n">notificationService</span><span class="o">,</span> <span class="n">never</span><span class="o">())</span>
                <span class="o">.</span><span class="na">sendPasswordChangedConfirmation</span><span class="o">(</span><span class="n">anyString</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="nd">@Test</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">startResetPasswordProcess_givenEmailOfExistingUser_generatesToken</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// arrange</span>
        <span class="n">User</span> <span class="n">joe</span> <span class="o">=</span> <span class="n">Fixtures</span><span class="o">.</span><span class="na">userJoe</span><span class="o">();</span>

        <span class="n">when</span><span class="o">(</span><span class="n">userRepository</span><span class="o">.</span><span class="na">findByEmailAddress</span><span class="o">(</span><span class="s">"joe@example.com"</span><span class="o">))</span>
                <span class="o">.</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">joe</span><span class="o">);</span>

        <span class="n">when</span><span class="o">(</span><span class="n">dateTimeProvider</span><span class="o">.</span><span class="na">now</span><span class="o">())</span>
                <span class="o">.</span><span class="na">thenReturn</span><span class="o">(</span><span class="n">LocalDateTime</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2017</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">10</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">));</span>

        <span class="c1">// act</span>
        <span class="n">userService</span><span class="o">.</span><span class="na">startResetPasswordProcess</span><span class="o">(</span><span class="s">"joe@example.com"</span><span class="o">);</span>

        <span class="c1">// assert</span>
        <span class="n">assertThat</span><span class="o">(</span><span class="n">joe</span><span class="o">.</span><span class="na">getResetPasswordToken</span><span class="o">())</span>
                <span class="o">.</span><span class="na">isNotNull</span><span class="o">();</span>

        <span class="n">assertThat</span><span class="o">(</span><span class="n">joe</span><span class="o">.</span><span class="na">getResetPasswordTokenValidityEndDate</span><span class="o">())</span>
                <span class="o">.</span><span class="na">isEqualTo</span><span class="o">(</span><span class="n">LocalDateTime</span><span class="o">.</span><span class="na">of</span><span class="o">(</span><span class="mi">2017</span><span class="o">,</span><span class="mi">3</span><span class="o">,</span><span class="mi">11</span><span class="o">,</span> <span class="mi">0</span><span class="o">,</span><span class="mi">0</span><span class="o">));</span>

        <span class="n">assertThat</span><span class="o">(</span><span class="n">joe</span><span class="o">.</span><span class="na">getPasswordHash</span><span class="o">())</span>
                <span class="o">.</span><span class="na">withFailMessage</span><span class="o">(</span><span class="s">"Password should not be changed"</span><span class="o">)</span>
                <span class="o">.</span><span class="na">isEqualTo</span><span class="o">(</span><span class="s">"old-password-hash"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>After refactoring both dependencies and tested components are
now stored in fields of test class. 
JUnit calls any method annotated by <code class="highlighter-rouge">@Before</code> before executing each
of test methods contained in test class. 
This makes <code class="highlighter-rouge">setUp</code> method suitable place to initialize fields
that will be used by many tests.</p>

<p>Now you may be tempted to move initialization code to the test class
constructor, but don’t do that. Unit tests should be independent of
each other. One of the worst sins when writing unit tests is to write
a test that depends on some data created by other test methods. 
Such incorrect test may pass when we ran all tests but will
fail when run it alone. This is one of the worst things that may happen
when writing unit tests, and clearly shows that we do something wrong.
Instead every test should create it’s own test data and should use 
fresh Mockito stubs. Later you will appreciate this independence of
tests when you will try to run tests in parallel.</p>

<p>Unit tests often require some dummy data, instead of creating the
same object again and again in various tests we should group them
into library of test objects. Such library of test data is often called
a fixture. Since I expected that we will need <code class="highlighter-rouge">User</code> instance in other
test, I extracted code that created dummy user into <code class="highlighter-rouge">Fixtures</code> class:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Fixtures</span> <span class="o">{</span>
   <span class="kd">public</span> <span class="kd">static</span> <span class="n">User</span> <span class="n">userJoe</span><span class="o">()</span> <span class="o">{</span>
	  <span class="n">User</span> <span class="n">joe</span> <span class="o">=</span> <span class="k">new</span> <span class="n">User</span><span class="o">();</span>

	  <span class="n">joe</span><span class="o">.</span><span class="na">setEmail</span><span class="o">(</span><span class="s">"joe@example.com"</span><span class="o">);</span>
	  <span class="n">joe</span><span class="o">.</span><span class="na">setPasswordHash</span><span class="o">(</span><span class="s">"old-password-hash"</span><span class="o">);</span>
	  <span class="n">joe</span><span class="o">.</span><span class="na">setResetPasswordToken</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
	  <span class="n">joe</span><span class="o">.</span><span class="na">setResetPasswordTokenValidityEndDate</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>

	  <span class="k">return</span> <span class="n">joe</span><span class="o">;</span>
   <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<h5 id="terminology">Terminology</h5>

<p>When reading about unit testing you may encounter terms <em>fake</em>, <em>mock</em> and <em>stub</em>.
Fake is any object that is used only by test code, fake may be implemented as
concrete class like <code class="highlighter-rouge">UserRepositoryStub</code> or as anonymous class generated at runtime.
In this last category we find all dummy implementations generated by Mockito.</p>

<p>Fakes can be divided into two groups stubs and mocks. Form practical point of
view we use mock to test interactions, and stubs to provide dummy data or
do-nothing implementation. We used <code class="highlighter-rouge">NotificationService</code> as a mock in our first
test because we used it to assert that no interaction took place (no message was
send to user). On the other hand all dummy implementations generated
by Mockito for <code class="highlighter-rouge">UserRepository</code>, <code class="highlighter-rouge">DateTimeProvider</code> etc. are examples of stubs.</p>

<p>More information about difference between mocks and stubs
can be found in Martin Fowler article
<a href="https://www.martinfowler.com/articles/mocksArentStubs.html">Mocks aren’t stubs</a>.</p>

<h5 id="code-coverage">Code coverage</h5>

<p>When unit testing it is important to test all execution paths in our code.
Sometimes we may be convinced that we covered all corner cases only to
find out (usually in production) that we overlooked testing some obscure conditions.
In such situation after fixing bug, we should add missing test.
But we could do better, almost any popular Java IDE can measure
and show us code coverage of tested component. IDE can usually highlight
in red lines that were not tested, for example here how it looks like in IntelliJ:
<img src="assets/images/2017-02-19/code_cov.png" alt="Code coverage in IntelliJ" />
Greenish bar next to line number tells us that line of code was <em>executed</em>
when running unit tests (being executed doesn’t automatically mean that
the line of code is well tested, it is only a heuristic). On the other hand 
red bar tells that lines of code was not reached by tests and certainly is not tested.</p>

<p>When we are at it, you may heard that the higher code coverage the better.
Having 100% code coverage is impossible in any reasonable sized enterprise application.
There is an ongoing debate about how much code coverage is enough.
For me code coverage is just a tool that I use to check that I tested
all execution paths in code and nothing more.</p>

<h5 id="its-your-turn-now">It’s your turn now</h5>

<p>Right now we have only two tests for our <code class="highlighter-rouge">UserServiceImpl</code> component,
of course it is not enough to assure us that all of the business requirements
were fulfilled. When I tested <code class="highlighter-rouge">UserServiceImpl</code> I wrote seven more tests:</p>

<ul>
  <li><code class="highlighter-rouge">startResetPasswordProcess_givenEmailOfExistingUser_sendsNotificationToUser</code></li>
  <li><code class="highlighter-rouge">finishResetPasswordProcess_noUserHasSpecifiedEmail_doesNothing</code></li>
  <li><code class="highlighter-rouge">finishResetPasswordProcess_userHasNoTokenSet_doesNothing</code></li>
  <li><code class="highlighter-rouge">finishResetPasswordProcess_tokenExpired_doesNothing</code></li>
  <li><code class="highlighter-rouge">finishResetPasswordProcess_tokenNotMatch_doesNothing</code></li>
  <li><code class="highlighter-rouge">finishResetPasswordProcess_validToken_changesPassword</code></li>
  <li><code class="highlighter-rouge">finishResetPasswordProcess_validToken_sendsConfirmationToUser</code></li>
</ul>

<p>and only now I am certain that <code class="highlighter-rouge">UserServiceImpl</code> works correctly.</p>

<p>You may find source code for all these tests (with other goodies)
<a href="https://github.com/marcin-chwedczuk/mockito-unit-test-demo">HERE</a>.
But before you look at what I wrote, please try to implement these tests
yourself and then compare your code with mine. I am certain that you will
learn more this way.</p>

<p>Thanks for reading. If you liked this post please start my Github repository.
And see you soon again!</p>


	  ]]></description>
	</item>

	<item>
	  <title>Hello, Hibernate Validator</title>
	  <link>//hello-hibernate-validator</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2017-02-05T01:00:00+01:00</pubDate>
	  <guid>//hello-hibernate-validator</guid>
	  <description><![CDATA[
	     <p>In every enterprise application there is a need for
validation. You may want to validate data send by user to
your REST service, messages coming to your application from some
other system, or your own entities before saving them to database.</p>

<p>Standard
<a href="http://beanvalidation.org/1.0/spec">JSR 303</a>
defines API for validating Java Beans without tying us to any
particular implementation.
Nevertheless some implementations are more polished than others,
and subject of this post -
Hibernate Validator is considered one of the best.</p>

<h4 id="project-setup">Project setup</h4>

<p>Before we can use Hibernate Validator we must do
some groundwork.</p>

<h5 id="maven-dependencies">Maven dependencies</h5>

<p>To use Hibernate Validator we need following Maven dependencies:</p>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.hibernate<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>hibernate-validator<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>5.3.4.Final<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>

<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>javax.el<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>el-api<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>2.2<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.glassfish.web<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>javax.el<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span></code></pre></figure>

<p>Hibernate Validator uses Java Unified Expression Language (JavaEL)
to format validation messages. When your application runs
inside JEE container, container already provides JavaEL 
implementation.
Since we want to create a command line application we must provide 
JavaEL implementation ourselves and that’s the reason
why we included <code class="highlighter-rouge">javax.el:el-api</code> and <code class="highlighter-rouge">org.glassfish.web:javax.el</code> as
dependencies.</p>

<p>Later on to demonstrate all features of Hibernate Validator we will need
Spring DI container and <code class="highlighter-rouge">commons-beanutils</code> library:</p>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>commons-beanutils<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>commons-beanutils<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>1.9.3<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;dependency&gt;</span>
    <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
    <span class="nt">&lt;artifactId&gt;</span>spring-context<span class="nt">&lt;/artifactId&gt;</span>
    <span class="nt">&lt;version&gt;</span>4.3.5.RELEASE<span class="nt">&lt;/version&gt;</span>
<span class="nt">&lt;/dependency&gt;</span></code></pre></figure>

<h5 id="obtaining-validator-instance">Obtaining <code class="highlighter-rouge">Validator</code> instance</h5>

<p>After all these preparations we are ready to create <code class="highlighter-rouge">Validator</code>
instance:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kn">import</span> <span class="nn">javax.validation.Validation</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.validation.Validator</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
    <span class="n">Validator</span> <span class="n">validator</span> <span class="o">=</span> <span class="n">Validation</span>
                              <span class="o">.</span><span class="na">buildDefaultValidatorFactory</span><span class="o">()</span>
                              <span class="o">.</span><span class="na">getValidator</span><span class="o">();</span>
<span class="o">}</span></code></pre></figure>

<p>Note that we don’t have any reference to Hibernate Validator in
our code, instead we are relying on classes and interfaces defined in
JSR 303 (Bean Validation).
This is very similar to how JDBC providers works.</p>

<p>Returned <code class="highlighter-rouge">Validator</code> instance is thread safe and may be assigned to
static field or registered as a singleton in DI container for later use.</p>

<h4 id="validating-beans">Validating beans</h4>

<h5 id="property-level-constraints">Property level constraints</h5>

<p>The easiest way to define validation rules for a bean
is to use JSR 303 annotations.
We may put annotations on both fields and getters, for example:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="nd">@NotNull</span>           
    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
<span class="o">}</span>
<span class="c1">// or:</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="nd">@NotNull</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="n">getName</span><span class="o">()</span> <span class="o">{</span>             
        <span class="k">return</span> <span class="n">name</span><span class="o">;</span>                      
    <span class="o">}</span>                                     
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">setName</span><span class="o">(</span><span class="n">String</span> <span class="n">name</span><span class="o">)</span> <span class="o">{</span>    
        <span class="k">this</span><span class="o">.</span><span class="na">name</span> <span class="o">=</span> <span class="n">name</span><span class="o">;</span>                 
    <span class="o">}</span>                                     
<span class="o">}</span></code></pre></figure>

<p>We should prefer putting annotations on getters since this will
allow for greater flexibility when later we will want to
change our beans.
Said that, to conserve space in this post I will
put annotations on fields from now on.</p>

<p>Here is a simple bean representing a person,
annotated with JSR 303 constraints:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="nd">@NotNull</span>
    <span class="nd">@Length</span><span class="o">(</span><span class="n">min</span><span class="o">=</span><span class="mi">1</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>

    <span class="nd">@NotNull</span>
    <span class="nd">@Length</span><span class="o">(</span><span class="n">min</span><span class="o">=</span><span class="mi">1</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">surname</span><span class="o">;</span>

    <span class="nd">@Range</span><span class="o">(</span><span class="n">min</span><span class="o">=</span><span class="mi">1</span><span class="o">,</span> <span class="n">max</span><span class="o">=</span><span class="mi">200</span><span class="o">)</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span>
  
    <span class="c1">// getters, setters </span>
<span class="o">}</span></code></pre></figure>

<p>Validation rules should be self evident. There is nothing fancy -
we check that a person must have a non empty name and a non empty
surname, and that an age of a person falls within a range of 1 and 200.</p>

<p>Then we may use Hibernate Validator to check if 
a <code class="highlighter-rouge">Person</code> instance is valid:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">Validator</span> <span class="n">validator</span> <span class="o">=</span> <span class="n">Validation</span>
       <span class="o">.</span><span class="na">buildDefaultValidatorFactory</span><span class="o">()</span>
       <span class="o">.</span><span class="na">getValidator</span><span class="o">();</span>

<span class="n">Person</span> <span class="n">joe</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">();</span>
<span class="n">joe</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"Joe"</span><span class="o">);</span>
<span class="n">joe</span><span class="o">.</span><span class="na">setSurname</span><span class="o">(</span><span class="s">"Doe"</span><span class="o">);</span>
<span class="n">joe</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="mi">43</span><span class="o">);</span>

<span class="n">Set</span><span class="o">&lt;</span><span class="n">ConstraintViolation</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;&gt;</span> <span class="n">constraintViolations</span> <span class="o">=</span>
       <span class="n">validator</span><span class="o">.</span><span class="na">validate</span><span class="o">(</span><span class="n">joe</span><span class="o">);</span>

<span class="k">assert</span> <span class="n">constraintViolations</span><span class="o">.</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">;</span> <span class="c1">// yeah, no errors</span></code></pre></figure>

<p>In rare cases when <code class="highlighter-rouge">Person</code> is invalid, Hibernate Validator
provides us with all necessary information about what
properties and values are wrong:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">Person</span> <span class="n">joe</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">();</span>
<span class="n">joe</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
<span class="n">joe</span><span class="o">.</span><span class="na">setSurname</span><span class="o">(</span><span class="s">"Doe"</span><span class="o">);</span>
<span class="n">joe</span><span class="o">.</span><span class="na">setAge</span><span class="o">(</span><span class="mi">1024</span><span class="o">);</span>

<span class="n">Set</span><span class="o">&lt;</span><span class="n">ConstraintViolation</span><span class="o">&lt;</span><span class="n">Person</span><span class="o">&gt;&gt;</span> <span class="n">constraintViolations</span> <span class="o">=</span>
       <span class="n">validator</span><span class="o">.</span><span class="na">validate</span><span class="o">(</span><span class="n">joe</span><span class="o">);</span>

<span class="k">for</span> <span class="o">(</span><span class="n">ConstraintViolation</span><span class="o">&lt;?&gt;</span> <span class="nl">violation:</span> <span class="n">constraintViolations</span><span class="o">)</span> <span class="o">{</span>
   <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"%10s | %30s | is %10s%n"</span><span class="o">,</span>
           <span class="n">violation</span><span class="o">.</span><span class="na">getPropertyPath</span><span class="o">(),</span>
           <span class="n">violation</span><span class="o">.</span><span class="na">getMessage</span><span class="o">(),</span>
           <span class="n">violation</span><span class="o">.</span><span class="na">getInvalidValue</span><span class="o">()</span>
           <span class="o">);</span>
<span class="o">}</span>
<span class="c1">// OUTPUT:</span>
<span class="c1">//       age |      must be between 1 and 200 | is       1024</span>
<span class="c1">//      name |                may not be null | is       null</span></code></pre></figure>

<h5 id="bean-level-constraints">Bean level constraints</h5>

<p>Some validation rules may be expressed only by using
values of two or more properties, for such rules 
Hibernate Validator provides class-level constrains.
Returning to our <code class="highlighter-rouge">Person</code> example, suppose that we want to add
two new properties to <code class="highlighter-rouge">Person</code>: <code class="highlighter-rouge">dateOfBirth</code> and <code class="highlighter-rouge">dateOfDeath</code>, with
condition that <code class="highlighter-rouge">dateOfBirth</code> cannot be later than <code class="highlighter-rouge">dateOfDeath</code>
(when both dates are present):</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="nd">@NotNull</span>
    <span class="kd">private</span> <span class="n">LocalDate</span> <span class="n">dateOfBirth</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">LocalDate</span> <span class="n">dateOfDeath</span><span class="o">;</span>
    
    <span class="c1">// ...</span>
<span class="o">}</span></code></pre></figure>

<p>We can express our rule using proprietary (not included in JSR 303)
class-level <code class="highlighter-rouge">@ScriptAssert</code> annotation:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kn">import</span> <span class="nn">org.hibernate.validator.constraints.ScriptAssert</span><span class="o">;</span>

<span class="nd">@ScriptAssert</span><span class="o">(</span><span class="n">lang</span> <span class="o">=</span> <span class="s">"javascript"</span><span class="o">,</span>
        <span class="n">script</span><span class="o">=</span><span class="s">"_.dateOfBirth == null || _.dateOfDeath == null || _.dateOfBirth &lt;= _.dateOfDeath"</span><span class="o">,</span>
        <span class="n">alias</span><span class="o">=</span><span class="s">"_"</span><span class="o">,</span>
        <span class="n">message</span> <span class="o">=</span> <span class="s">"date of death cannot be before date of birth"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
   <span class="c1">// ...</span>
<span class="o">}</span> </code></pre></figure>

<p>Here I decided to use JavaScript scripting engine (<code class="highlighter-rouge">lang = "javascript"</code>)
because it
is already shipped with Java SE, moreover JavaScript syntax should be
familiar to any Java developer. Hibernate Validator supports
any implementation adhering to JSR 223 standard
(scripting for the Java platform).</p>

<p>JavaScript expression used as value of <code class="highlighter-rouge">script</code> argument:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="nx">_</span><span class="p">.</span><span class="nx">dateOfBirth</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> 
   <span class="nx">_</span><span class="p">.</span><span class="nx">dateOfDeath</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> 
   <span class="nx">_</span><span class="p">.</span><span class="nx">dateOfBirth</span> <span class="o">&lt;=</span> <span class="nx">_</span><span class="p">.</span><span class="nx">dateOfDeath</span></code></pre></figure>

<p>must <em>always</em> return either <code class="highlighter-rouge">true</code> when validation rule is
fullfiled or <code class="highlighter-rouge">false</code>.
We must also take care of handling <code class="highlighter-rouge">null</code> values otherwise we may
get pesky <code class="highlighter-rouge">javax.script.ScriptException</code>.</p>

<p>Inside <code class="highlighter-rouge">script</code> we may refer to currently validated bean by name of <code class="highlighter-rouge">_this</code>,
or by name of our choosing if we set <code class="highlighter-rouge">alias</code> argument like we do in
our example.</p>

<p><code class="highlighter-rouge">@ScriptAssert</code> is a duct tape of validation. You should
use it only when performance is not a concern, and you must
provide a solution quickly. In most cases you should prefer
to write you own constraint and validator. Anyway <code class="highlighter-rouge">@ScriptAssert</code> is
a great example of class-level constraint.</p>

<h5 id="validating-child-beans">Validating child beans</h5>

<p>To demonstrate parent-child bean validation we will
add <code class="highlighter-rouge">Address</code> to <code class="highlighter-rouge">Person</code> class.
<code class="highlighter-rouge">Address</code> will be optional so not every <code class="highlighter-rouge">Person</code> instance will have one,
we only require that if a <code class="highlighter-rouge">Person</code> has an address it must be a
valid one.
<code class="highlighter-rouge">Address</code> will be represented by the following bean:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Address</span> <span class="o">{</span>
    <span class="nd">@NotBlank</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">street</span><span class="o">;</span>

    <span class="nd">@NotBlank</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">zipCode</span><span class="o">;</span>

    <span class="nd">@NotBlank</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">city</span><span class="o">;</span>

    <span class="c1">// getter,setters</span>
<span class="o">}</span></code></pre></figure>

<p>Also we must add <code class="highlighter-rouge">address</code> property to <code class="highlighter-rouge">Person</code> bean:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="nd">@Valid</span>
    <span class="kd">private</span> <span class="n">Address</span> <span class="n">address</span><span class="o">;</span>
<span class="o">}</span></code></pre></figure>

<p><code class="highlighter-rouge">@Valid</code> annotation that we put on <code class="highlighter-rouge">address</code> field
tells Hibernate Validator that
when validating a <code class="highlighter-rouge">Person</code> the <code class="highlighter-rouge">Address</code> should also be
validated, but only when address is provided (<code class="highlighter-rouge">address</code> is non null).
If we require that a <code class="highlighter-rouge">Person</code> must always have an address we may use
<code class="highlighter-rouge">@NotNull</code> to enforce that rule:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="nd">@NotNull</span>
    <span class="nd">@Valid</span>
    <span class="kd">private</span> <span class="n">Address</span> <span class="n">address</span><span class="o">;</span>
<span class="o">}</span></code></pre></figure>

<p>Now when validating person with an invalid address we get:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// ...</span>
<span class="n">Address</span> <span class="n">joeHomeAddress</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Address</span><span class="o">();</span>
<span class="n">joeHomeAddress</span><span class="o">.</span><span class="na">setCity</span><span class="o">(</span><span class="s">"Warsaw"</span><span class="o">);</span>
<span class="n">joeHomeAddress</span><span class="o">.</span><span class="na">setZipCode</span><span class="o">(</span><span class="s">"00-120"</span><span class="o">);</span>
<span class="n">joe</span><span class="o">.</span><span class="na">setAddress</span><span class="o">(</span><span class="n">joeHomeAddress</span><span class="o">);</span>

<span class="n">validator</span><span class="o">.</span><span class="na">validate</span><span class="o">(</span><span class="n">joe</span><span class="o">);</span>
<span class="c1">// CONSTRAINT VIOLATIONS:</span>
<span class="c1">// address.street |               may not be empty | is       null</span></code></pre></figure>

<h5 id="validating-collections">Validating collections</h5>

<p>To demonstrate how collection validation works
we will add a list of contacts
to <code class="highlighter-rouge">Person</code> bean:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="nd">@Valid</span>
    <span class="kd">private</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">Contact</span><span class="o">&gt;</span> <span class="n">contacts</span><span class="o">;</span>
    <span class="c1">// getters,setters,...</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">abstract</span> <span class="kd">class</span> <span class="nc">Contact</span> <span class="o">{</span> <span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">EmailContact</span> <span class="kd">extends</span> <span class="n">Contact</span> <span class="o">{</span>
    <span class="nd">@Email</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">email</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">EmailContact</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="n">EmailContact</span><span class="o">(</span><span class="n">String</span> <span class="n">email</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="n">getEmail</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">email</span><span class="o">;</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">setEmail</span><span class="o">(</span><span class="n">String</span> <span class="n">email</span><span class="o">)</span> <span class="o">{</span> <span class="k">this</span><span class="o">.</span><span class="na">email</span> <span class="o">=</span> <span class="n">email</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">PhoneContact</span> <span class="kd">extends</span> <span class="n">Contact</span> <span class="o">{</span>
    <span class="nd">@Pattern</span><span class="o">(</span><span class="n">regexp</span> <span class="o">=</span> <span class="s">"\\d{3}-\\d{3}-\\d{3}"</span><span class="o">,</span>
             <span class="n">message</span> <span class="o">=</span> <span class="s">"invalid phone number"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">phoneNumber</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">PhoneContact</span><span class="o">()</span> <span class="o">{</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="n">PhoneContact</span><span class="o">(</span><span class="n">String</span> <span class="n">phoneNumber</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">phoneNumber</span> <span class="o">=</span> <span class="n">phoneNumber</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="n">getPhoneNumber</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">phoneNumber</span><span class="o">;</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">setPhoneNumber</span><span class="o">(</span><span class="n">String</span> <span class="n">phoneNumber</span><span class="o">)</span> <span class="o">{</span> <span class="k">this</span><span class="o">.</span><span class="na">phoneNumber</span> <span class="o">=</span> <span class="n">phoneNumber</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>Again we used <code class="highlighter-rouge">@Valid</code> annotation to tell Hibernate Validator to
validate all non null beans contained in <code class="highlighter-rouge">contacts</code> collection.
Now we may check if all <code class="highlighter-rouge">Person</code> contacts are valid:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">joe</span><span class="o">.</span><span class="na">setContacts</span><span class="o">(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span>
    <span class="k">new</span> <span class="n">EmailContact</span><span class="o">(</span><span class="s">"joe@example.com"</span><span class="o">),</span>
    <span class="k">new</span> <span class="n">PhoneContact</span><span class="o">(</span><span class="s">"123-123-123"</span><span class="o">),</span>
    <span class="k">new</span> <span class="n">EmailContact</span><span class="o">(</span><span class="s">"invalid_email"</span><span class="o">),</span>
    <span class="k">new</span> <span class="n">PhoneContact</span><span class="o">(</span><span class="s">"invali_phone"</span><span class="o">)</span>
<span class="o">));</span>

<span class="n">validator</span><span class="o">.</span><span class="na">validate</span><span class="o">(</span><span class="n">joe</span><span class="o">);</span>
<span class="c1">// CONSTRAINT VIOLATIONS:</span>
<span class="c1">// contacts[3].phoneNumber |           invalid phone number  | is invali_phone</span>
<span class="c1">// contacts[2].email       | not a well-formed email address | is invalid_email</span></code></pre></figure>

<p>Unfortunately there is no build-in annotation that would protect
us from collections containing <code class="highlighter-rouge">null</code>s:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">joe</span><span class="o">.</span><span class="na">setContacts</span><span class="o">(</span><span class="n">Collections</span><span class="o">.</span><span class="na">singletonList</span><span class="o">(</span><span class="kc">null</span><span class="o">));</span>
<span class="k">assert</span> <span class="n">validator</span><span class="o">.</span><span class="na">validate</span><span class="o">(</span><span class="n">joe</span><span class="o">).</span><span class="na">size</span><span class="o">()</span> <span class="o">==</span> <span class="mi">0</span><span class="o">;</span></code></pre></figure>

<p>To fix that problem we must write a custom constraint ourselves.</p>

<h5 id="customizing-validation-messages">Customizing validation messages</h5>

<p>The easiest way to customize validation message is to
set it explicitly via 
<code class="highlighter-rouge">message</code> parameter:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Range</span><span class="o">(</span><span class="n">min</span><span class="o">=</span><span class="mi">1</span><span class="o">,</span> <span class="n">max</span><span class="o">=</span><span class="mi">200</span><span class="o">,</span> 
    <span class="n">message</span> <span class="o">=</span> <span class="s">"person age must be between 1 and 200 years"</span><span class="o">)</span>
<span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span></code></pre></figure>

<p>This approach is inflexible and you should avoid it, instead
try to load validation messages from application resources.
Hibernate Validator by default will load validation messages from
<code class="highlighter-rouge">resources/ValidationMessages.properties</code> file.
We may use this file to either add new validation message or
customize existing:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight"># Override existing message
org.hibernate.validator.constraints.Range.message=${validatedValue} is not in range (min: {min}, max: {max})

# Create new message
invalid_person_age=person age must be between 1 and 200 years </code></pre></figure>

<p>Then we may use are new message:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Range</span><span class="o">(</span><span class="n">min</span><span class="o">=</span><span class="mi">1</span><span class="o">,</span> <span class="n">max</span><span class="o">=</span><span class="mi">200</span><span class="o">,</span> <span class="n">message</span> <span class="o">=</span> <span class="s">"{invalid_person_age}"</span><span class="o">)</span>
<span class="kd">private</span> <span class="kt">int</span> <span class="n">age</span><span class="o">;</span></code></pre></figure>

<h4 id="extending-hibernate-validator">Extending Hibernate Validator</h4>

<h5 id="constraint-composition">Constraint composition</h5>

<p>Earlier we used the following code to validate phone number:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Pattern</span><span class="o">(</span><span class="n">regexp</span> <span class="o">=</span> <span class="s">"\\d{3}-\\d{3}-\\d{3}"</span><span class="o">,</span>
         <span class="n">message</span> <span class="o">=</span> <span class="s">"invalid phone number"</span><span class="o">)</span>
<span class="kd">private</span> <span class="n">String</span> <span class="n">phoneNumber</span><span class="o">;</span></code></pre></figure>

<p>We certainly don’t want to repeat this annotation with regex expression and
message accross all codebase, that would violate 
<a href="https://en.wikipedia.org/wiki/Don't_repeat_yourself">DRY principle</a>.
On the other hand the following code validated person name:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@NotNull</span>
<span class="nd">@Length</span><span class="o">(</span><span class="n">min</span><span class="o">=</span><span class="mi">1</span><span class="o">)</span>
<span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span></code></pre></figure>

<p>Here we see that to validate name we need two constraints, again
repeating two constraints in various DTO’s is not a receipt for
a good code.</p>

<p>To solve above problems JSR 303 introduces constraint composition.
In short you create a new constraint annotation and put
on it all required constraints, you may also adjust
message, payload and/or groups to which constraint belongs.
For example we may create <code class="highlighter-rouge">ValidPhoneNumber</code> constraint:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Pattern</span><span class="o">(</span><span class="n">regexp</span> <span class="o">=</span> <span class="s">"\\d{3}-\\d{3}-\\d{3}"</span><span class="o">)</span>
<span class="nd">@ReportAsSingleViolation</span>
<span class="nd">@Constraint</span><span class="o">(</span><span class="n">validatedBy</span> <span class="o">=</span> <span class="o">{</span> <span class="o">})</span>
<span class="nd">@Target</span><span class="o">({</span> <span class="n">METHOD</span><span class="o">,</span> <span class="n">FIELD</span><span class="o">,</span> <span class="n">ANNOTATION_TYPE</span> <span class="o">})</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="n">RUNTIME</span><span class="o">)</span>
<span class="nd">@Documented</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="n">ValidPhoneNumber</span> <span class="o">{</span>
    <span class="n">String</span> <span class="n">message</span><span class="o">()</span> <span class="k">default</span> <span class="s">"phone number should be in format 999-999-999"</span><span class="o">;</span>
    <span class="n">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">groups</span><span class="o">()</span> <span class="k">default</span> <span class="o">{</span> <span class="o">};</span>
    <span class="n">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Payload</span><span class="o">&gt;[]</span> <span class="n">payload</span><span class="o">()</span> <span class="k">default</span> <span class="o">{</span> <span class="o">};</span>
<span class="o">}</span></code></pre></figure>

<p>And then use it accross our codebase:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">PhoneContact</span> <span class="kd">extends</span> <span class="n">Contact</span> <span class="o">{</span>
    <span class="nd">@ValidPhoneNumber</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">phoneNumber</span><span class="o">;</span>
    <span class="c1">//...</span>
<span class="o">}</span></code></pre></figure>

<p>Not only this adheres to DRY princible but our code
is now more readable.</p>

<p>When we put multiple constraints on composed constraint:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@NotNull</span>
<span class="nd">@Length</span><span class="o">(</span><span class="n">min</span><span class="o">=</span><span class="mi">1</span><span class="o">)</span>
<span class="nd">@Target</span><span class="o">({</span> <span class="n">METHOD</span><span class="o">,</span> <span class="n">FIELD</span><span class="o">,</span> <span class="n">ANNOTATION_TYPE</span> <span class="o">})</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="n">RUNTIME</span><span class="o">)</span>
<span class="nd">@Constraint</span><span class="o">(</span><span class="n">validatedBy</span> <span class="o">=</span> <span class="o">{</span> <span class="o">})</span>
<span class="nd">@Documented</span>
<span class="c1">// @ReportAsSingleViolation</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="n">ValidPersonName</span> <span class="o">{</span>
    <span class="n">String</span> <span class="n">message</span><span class="o">()</span> <span class="k">default</span> <span class="s">"person must have a name"</span><span class="o">;</span>
    <span class="n">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">groups</span><span class="o">()</span> <span class="k">default</span> <span class="o">{</span> <span class="o">};</span>
    <span class="n">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Payload</span><span class="o">&gt;[]</span> <span class="n">payload</span><span class="o">()</span> <span class="k">default</span> <span class="o">{</span> <span class="o">};</span>
<span class="o">}</span></code></pre></figure>

<p>And then use it on a field:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@ValidPersonName</span>
<span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span></code></pre></figure>

<p>Each of composing constrains will be reported independently:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">Person</span> <span class="n">joe</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">();</span>
<span class="n">joe</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
<span class="c1">//       name | length must be between 1 and 2147483647 | is     </span>

<span class="n">joe</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
<span class="c1">//       name |                may not be null | is       null</span></code></pre></figure>

<p>We may add <code class="highlighter-rouge">@ReportAsSingleViolation</code> annotation to our
composed constrain to report all violations as a single error.
With <code class="highlighter-rouge">@ReportAsSingleViolation</code> we get:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">Person</span> <span class="n">joe</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">();</span>
<span class="n">joe</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">""</span><span class="o">);</span>
<span class="c1">//       name |        person must have a name | is       </span>
<span class="n">joe</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
<span class="c1">//       name |        person must have a name | is       null</span></code></pre></figure>

<p>Notice that this time message was taken from composed constraint.</p>

<h5 id="using-payloads">Using payloads</h5>

<p>We may use payloads to pass some additional informations
with validation errors. Canonical example of using payloads is
to differentiate between errors and warnings.</p>

<p>First we must define our payload values:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kn">import</span> <span class="nn">javax.validation.Payload</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">interface</span> <span class="nc">SEVERITY</span> <span class="o">{</span>
    <span class="kd">interface</span> <span class="nc">WARNING</span> <span class="kd">extends</span> <span class="n">Payload</span> <span class="o">{</span> <span class="o">}</span>
    <span class="kd">interface</span> <span class="nc">ERROR</span> <span class="kd">extends</span> <span class="n">Payload</span> <span class="o">{</span> <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>Then we may use them with constraints:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kn">import</span> <span class="nn">io.mc.validationdemo.constraints.SEVERITY.ERROR</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.mc.validationdemo.constraints.SEVERITY.WARNING</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.hibernate.validator.constraints.NotBlank</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SeverityDTO</span> <span class="o">{</span>
    <span class="nd">@NotBlank</span><span class="o">(</span><span class="n">payload</span> <span class="o">=</span> <span class="n">ERROR</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="n">important</span><span class="o">;</span>
    
    <span class="nd">@NotBlank</span><span class="o">(</span><span class="n">payload</span> <span class="o">=</span> <span class="n">WARNING</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="n">unimportant</span><span class="o">;</span>

    <span class="c1">// ...</span>
<span class="o">}</span></code></pre></figure>

<p>Finally we may use them to decide if given <code class="highlighter-rouge">ConstraintViolation</code>
is warning or error:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isWarning</span><span class="p">(</span><span class="n">ConstraintViolation</span><span class="o">&lt;?&gt;</span> <span class="n">violation</span><span class="o">)</span> <span class="o">{</span>
    <span class="kt">boolean</span> <span class="n">isWarning</span> <span class="o">=</span> <span class="n">violation</span><span class="o">.</span><span class="na">getConstraintDescriptor</span><span class="o">()</span>
            <span class="o">.</span><span class="na">getPayload</span><span class="o">()</span>
            <span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">SEVERITY</span><span class="o">.</span><span class="na">WARNING</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>

    <span class="k">return</span> <span class="n">isWarning</span><span class="o">;</span>
<span class="o">}</span></code></pre></figure>

<p>I am certain that you will find some creative usages of payloads
in you application.</p>

<h5 id="creating-new-constraints">Creating new constraints</h5>

<p>To demonstrate how to create a new constraint,
we will create <code class="highlighter-rouge">@NotContain</code> validation rule that
checks that <code class="highlighter-rouge">String</code> doesn’t contains specified value.</p>

<p>We will start by creating annotation (here it is best
to follow example from <a href="https://docs.jboss.org/hibernate/stable/validator/reference/en-US/html_single/#validator-customconstraints-constraintannotation">official documentation</a>):</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Target</span><span class="o">({</span><span class="n">FIELD</span><span class="o">,</span> <span class="n">METHOD</span><span class="o">,</span> <span class="n">ANNOTATION_TYPE</span><span class="o">})</span>
<span class="nd">@Retention</span><span class="o">(</span><span class="n">RUNTIME</span><span class="o">)</span>
<span class="nd">@Documented</span>
<span class="nd">@Constraint</span><span class="o">(</span><span class="n">validatedBy</span> <span class="o">=</span> <span class="n">NotContainValidator</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
<span class="kd">public</span> <span class="nd">@interface</span> <span class="n">NotContain</span> <span class="o">{</span>
    <span class="n">String</span> <span class="n">message</span><span class="o">()</span> <span class="k">default</span> <span class="s">"{validation.NotContain}"</span><span class="o">;</span>
    <span class="n">Class</span><span class="o">&lt;?&gt;[]</span> <span class="n">groups</span><span class="o">()</span> <span class="k">default</span> <span class="o">{</span> <span class="o">};</span>
    <span class="n">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Payload</span><span class="o">&gt;[]</span> <span class="n">payload</span><span class="o">()</span> <span class="k">default</span> <span class="o">{</span> <span class="o">};</span>
    <span class="n">String</span> <span class="n">value</span><span class="o">();</span>

    <span class="nd">@Target</span><span class="o">({</span> <span class="n">FIELD</span><span class="o">,</span> <span class="n">METHOD</span><span class="o">,</span> <span class="n">ANNOTATION_TYPE</span> <span class="o">})</span>
    <span class="nd">@Retention</span><span class="o">(</span><span class="n">RUNTIME</span><span class="o">)</span>
    <span class="nd">@Documented</span>
    <span class="nd">@interface</span> <span class="n">List</span> <span class="o">{</span>
        <span class="n">NotContain</span><span class="o">[]</span> <span class="n">value</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>Then we must implement <code class="highlighter-rouge">NotContainValidator</code>:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">NotContainValidator</span> 
    <span class="kd">implements</span> <span class="n">ConstraintValidator</span><span class="o">&lt;</span><span class="n">NotContain</span><span class="o">,</span> <span class="n">String</span><span class="o">&gt;</span>
<span class="o">{</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">bannedPhrase</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">initialize</span><span class="o">(</span><span class="n">NotContain</span> <span class="n">constraintAnnotation</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">bannedPhrase</span> <span class="o">=</span> <span class="n">constraintAnnotation</span><span class="o">.</span><span class="na">value</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">boolean</span> <span class="n">isValid</span><span class="o">(</span><span class="n">String</span> <span class="n">value</span><span class="o">,</span> <span class="n">ConstraintValidatorContext</span> <span class="n">context</span><span class="o">)</span> <span class="o">{</span>
        <span class="kt">boolean</span> <span class="n">isValid</span> <span class="o">=</span>
            <span class="n">value</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="o">!</span><span class="n">value</span><span class="o">.</span><span class="na">contains</span><span class="o">(</span><span class="n">bannedPhrase</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">isValid</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>Then we should define our validation message
in <code class="highlighter-rouge">resources/ValidationMessages.properties</code> file, and we are done:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Person</span> <span class="o">{</span>
    <span class="nd">@ValidPersonName</span>
    <span class="nd">@NotContain</span><span class="o">(</span><span class="s">"f**k"</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">name</span><span class="o">;</span>
    <span class="c1">// ...</span>
<span class="o">}</span>

<span class="n">Person</span> <span class="n">joe</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Person</span><span class="o">();</span>
<span class="n">joe</span><span class="o">.</span><span class="na">setName</span><span class="o">(</span><span class="s">"f**k"</span><span class="o">);</span>

<span class="n">validator</span><span class="o">.</span><span class="na">validate</span><span class="o">(</span><span class="n">joe</span><span class="o">);</span>
<span class="c1">// VIOLATED CONSTRAINTS:</span>
<span class="c1">// name | Property should not contain f**k | is       f**k</span></code></pre></figure>

<h5 id="value-unwrappers">Value unwrappers</h5>

<p>Sometimes we want to validate value that is contained in some other
type. For example we may want to validate a <code class="highlighter-rouge">String</code> contained
in <code class="highlighter-rouge">Optional&lt;String&gt;</code>.
This is possible in Hibernate Validator thanks to value unwrappers.</p>

<p>Hibernate Validator out of the box supports <code class="highlighter-rouge">Optional&lt;T&gt;</code> type, so
for a sake of example we will create our own “wrapper” type:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Box</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">T</span> <span class="n">value</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">T</span> <span class="n">getValue</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">value</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">setValue</span><span class="o">(</span><span class="n">T</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>Now we may use our wapper type in DTOs:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UnwrappingDTO</span> <span class="o">{</span>
    <span class="nd">@Length</span><span class="o">(</span><span class="n">min</span><span class="o">=</span><span class="mi">3</span><span class="o">,</span><span class="n">max</span><span class="o">=</span><span class="mi">10</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">Box</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">name</span><span class="o">;</span>

    <span class="nd">@Min</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">Box</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">&gt;</span> <span class="n">age</span><span class="o">;</span>

    <span class="c1">// getters, setters </span>
<span class="o">}</span></code></pre></figure>

<p>If we try to validate <code class="highlighter-rouge">UnwrappingDTO</code> instance we will get
an exception:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">javax.validation.UnexpectedTypeException: HV000030: 
    No validator could be found for constraint 'Length' 
    validating type 'Box&lt;String&gt;'.</code></pre></figure>

<p>To make validation work again we must create are
own type unwrapper:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">BoxUnwrapper</span> <span class="kd">extends</span> <span class="n">ValidatedValueUnwrapper</span><span class="o">&lt;</span><span class="n">Box</span><span class="o">&lt;?&gt;&gt;</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">Object</span> <span class="n">handleValidatedValue</span><span class="o">(</span><span class="n">Box</span><span class="o">&lt;?&gt;</span> <span class="n">property</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">property</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">Type</span> <span class="n">getValidatedValueType</span><span class="o">(</span><span class="n">Type</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// return generic parameter T of Box&lt;T&gt;</span>
        <span class="n">Class</span><span class="o">&lt;?&gt;</span> <span class="n">clazz</span> <span class="o">=</span> <span class="o">(</span><span class="n">Class</span><span class="o">&lt;?&gt;)</span>
                <span class="o">((</span><span class="n">ParameterizedType</span><span class="o">)</span><span class="n">type</span><span class="o">).</span><span class="na">getActualTypeArguments</span><span class="o">()[</span><span class="mi">0</span><span class="o">];</span>

        <span class="k">return</span> <span class="n">clazz</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>And register it in Hibernate Validatior framework:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">Validator</span> <span class="n">validator</span> <span class="o">=</span> <span class="n">Validation</span><span class="o">.</span><span class="na">byProvider</span><span class="o">(</span><span class="n">HibernateValidator</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
        <span class="o">.</span><span class="na">configure</span><span class="o">()</span>
        <span class="o">.</span><span class="na">addValidatedValueHandler</span><span class="o">(</span><span class="k">new</span> <span class="n">BoxUnwrapper</span><span class="o">())</span>
        <span class="o">.</span><span class="na">buildValidatorFactory</span><span class="o">()</span>
        <span class="o">.</span><span class="na">getValidator</span><span class="o">();</span></code></pre></figure>

<p>The last thing that we should do, is to annotate <code class="highlighter-rouge">Box&lt;T&gt;</code> properties with
<code class="highlighter-rouge">@UnwrapValidatedValue</code>:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Length</span><span class="o">(</span><span class="n">min</span><span class="o">=</span><span class="mi">3</span><span class="o">,</span><span class="n">max</span><span class="o">=</span><span class="mi">10</span><span class="o">)</span>
<span class="nd">@UnwrapValidatedValue</span>
<span class="kd">private</span> <span class="n">Box</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">name</span><span class="o">;</span>

<span class="nd">@Min</span><span class="o">(</span><span class="mi">1</span><span class="o">)</span>
<span class="nd">@UnwrapValidatedValue</span>
<span class="kd">private</span> <span class="n">Box</span><span class="o">&lt;</span><span class="n">Long</span><span class="o">&gt;</span> <span class="n">age</span><span class="o">;</span></code></pre></figure>

<p>And now we can validate <code class="highlighter-rouge">Box</code>ed values, yay!</p>

<h5 id="integrating-hibernate-validator-with-spring-di">Integrating Hibernate Validator with Spring DI</h5>

<p>This section shows how to quickly integrate Hibernate Validator
with Spring. This is not the offical way of how you should integrate
with DI, just a quick and dirty solution that you may find helpful.
You have been warned. Also remember that Spring provides it’s
own validation framework, fully complaint with JSR 303 and called
<a href="http://docs.spring.io/spring/docs/current/spring-framework-reference/html/validation.html#validation-beanvalidation">Spring Validation</a>.</p>

<p>First we must create validator factory and register it in Spring
and in Hibernate Validator framework:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SpringConstrainValidationFactory</span> 
<span class="kd">implements</span> <span class="n">ConstraintValidatorFactory</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="n">ApplicationContext</span> <span class="n">context</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">ConstraintValidator</span><span class="o">&lt;?,</span> <span class="o">?&gt;&gt;</span> <span class="n">T</span> <span class="n">getInstance</span><span class="o">(</span><span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">key</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">key</span><span class="o">.</span><span class="na">getPackage</span><span class="o">().</span><span class="na">getName</span><span class="o">().</span><span class="na">startsWith</span><span class="o">(</span><span class="s">"javax.validation"</span><span class="o">)</span> <span class="o">||</span>
            <span class="n">key</span><span class="o">.</span><span class="na">getPackage</span><span class="o">().</span><span class="na">getName</span><span class="o">().</span><span class="na">startsWith</span><span class="o">(</span><span class="s">"org.hibernate.validator"</span><span class="o">))</span>
        <span class="o">{</span>
            <span class="k">try</span> <span class="o">{</span>
                <span class="c1">// create standard validators by calling</span>
                <span class="c1">// default constructor</span>
                <span class="k">return</span> <span class="n">key</span><span class="o">.</span><span class="na">newInstance</span><span class="o">();</span>
            <span class="o">}</span> <span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
                <span class="k">throw</span> <span class="k">new</span> <span class="n">RuntimeException</span><span class="o">(</span><span class="n">ex</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>

        <span class="c1">// Use Spring to create validator bean</span>
        <span class="k">return</span> <span class="n">context</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">key</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">releaseInstance</span><span class="o">(</span><span class="n">ConstraintValidator</span><span class="o">&lt;?,</span> <span class="o">?&gt;</span> <span class="n">instance</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// DO NOTHING</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>And in application configuration we should have:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="nd">@Configuration</span>
<span class="nd">@ComponentScan</span><span class="o">(</span><span class="s">"your.package.name"</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppConfig</span> <span class="o">{</span>
    <span class="nd">@Bean</span>
    <span class="kd">public</span> <span class="n">Validator</span> <span class="n">getHibernateValidator</span><span class="o">(</span>
        <span class="n">SpringConstrainValidationFactory</span> <span class="n">factory</span><span class="o">)</span>
    <span class="o">{</span>
       <span class="n">Validator</span> <span class="n">validatorEx</span> <span class="o">=</span> <span class="n">Validation</span><span class="o">.</span><span class="na">byProvider</span><span class="o">(</span><span class="n">HibernateValidator</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
                <span class="o">.</span><span class="na">configure</span><span class="o">()</span>
                <span class="o">.</span><span class="na">addValidatedValueHandler</span><span class="o">(</span><span class="k">new</span> <span class="n">BoxUnwrapper</span><span class="o">())</span>
                <span class="c1">// register Spring based validator factory</span>
                <span class="o">.</span><span class="na">constraintValidatorFactory</span><span class="o">(</span><span class="n">factory</span><span class="o">)</span>
                <span class="o">.</span><span class="na">buildValidatorFactory</span><span class="o">()</span>
                <span class="o">.</span><span class="na">getValidator</span><span class="o">();</span>

       <span class="k">return</span> <span class="n">validatorEx</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>Also do not forget to mark validators as <code class="highlighter-rouge">@Component</code>, now we may
use dependency injection inside validators.</p>


	  ]]></description>
	</item>

	<item>
	  <title>Comparing with nullsFirst and nullsLast</title>
	  <link>//comparing-with-nullsFirst-and-nullsLast</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2017-01-14T01:00:00+01:00</pubDate>
	  <guid>//comparing-with-nullsFirst-and-nullsLast</guid>
	  <description><![CDATA[
	     <p>Sorting in Java is easy:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Data</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">value</span><span class="o">;</span>
    <span class="kd">public</span> <span class="n">Data</span><span class="o">(</span><span class="n">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
    <span class="o">}</span>
 
    <span class="kd">public</span> <span class="n">String</span> <span class="n">getValue</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">value</span><span class="o">;</span> <span class="o">}</span>
 
    <span class="nd">@Override</span> <span class="kd">public</span> <span class="n">String</span> <span class="n">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">String</span><span class="o">.</span><span class="na">format</span><span class="o">(</span><span class="s">"Data(%s)"</span><span class="o">,</span> <span class="k">this</span><span class="o">.</span><span class="na">value</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
 
<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
   <span class="n">List</span><span class="o">&lt;</span><span class="n">Data</span><span class="o">&gt;</span> <span class="n">listOfData</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span>
          <span class="k">new</span> <span class="n">Data</span><span class="o">(</span><span class="s">"foo"</span><span class="o">),</span>
          <span class="k">new</span> <span class="n">Data</span><span class="o">(</span><span class="s">"bar"</span><span class="o">),</span>
          <span class="k">new</span> <span class="n">Data</span><span class="o">(</span><span class="s">"nyu"</span><span class="o">));</span>
 
   <span class="n">listOfData</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">comparing</span><span class="o">(</span><span class="nl">Data:</span><span class="o">:</span><span class="n">getValue</span><span class="o">));</span>
   <span class="n">listOfData</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
<span class="o">}</span>
<span class="c1">//OUTPUT:</span>
<span class="c1">// Data(bar)</span>
<span class="c1">// Data(foo)</span>
<span class="c1">// Data(nyu)</span></code></pre></figure>

<p>…unless we try to sort a collection containing null values:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">List</span><span class="o">&lt;</span><span class="n">Data</span><span class="o">&gt;</span> <span class="n">listOfData</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span>
       <span class="k">new</span> <span class="n">Data</span><span class="o">(</span><span class="s">"foo"</span><span class="o">),</span>
       <span class="kc">null</span><span class="o">,</span>
       <span class="k">new</span> <span class="n">Data</span><span class="o">(</span><span class="s">"bar"</span><span class="o">),</span>
       <span class="k">new</span> <span class="n">Data</span><span class="o">(</span><span class="s">"nyu"</span><span class="o">));</span>
 
<span class="n">listOfData</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">comparing</span><span class="o">(</span><span class="nl">Data:</span><span class="o">:</span><span class="n">getValue</span><span class="o">));</span>
<span class="n">listOfData</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
<span class="c1">//OUTPUT:</span>
<span class="c1">// Exception in thread "main" java.lang.NullPointerException</span>
<span class="c1">//    at java.util.Comparator.lambda$comparing$77a9974f$1(Comparator.java:469)</span></code></pre></figure>

<p>Fortunately there is easy solution to this problem. But first we must
decide whenever we want <code class="highlighter-rouge">null</code>s to be first or last in sorted collection.
After we made our mind we may use nifty <code class="highlighter-rouge">nullsFirst</code> or <code class="highlighter-rouge">nullsLast</code>
decorators provided by <code class="highlighter-rouge">Comparator</code> interface:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kn">import</span> <span class="nn">static</span> <span class="n">java</span><span class="o">.</span><span class="na">util</span><span class="o">.</span><span class="na">Comparator</span><span class="o">.*;</span>
 
<span class="n">List</span><span class="o">&lt;</span><span class="n">Data</span><span class="o">&gt;</span> <span class="n">listOfData</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span>
       <span class="k">new</span> <span class="n">Data</span><span class="o">(</span><span class="s">"foo"</span><span class="o">),</span>
       <span class="kc">null</span><span class="o">,</span>
       <span class="k">new</span> <span class="n">Data</span><span class="o">(</span><span class="s">"bar"</span><span class="o">),</span>
       <span class="k">new</span> <span class="n">Data</span><span class="o">(</span><span class="s">"nyu"</span><span class="o">));</span>
 
<span class="n">listOfData</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">nullsFirst</span><span class="o">(</span><span class="n">comparing</span><span class="o">(</span><span class="nl">Data:</span><span class="o">:</span><span class="n">getValue</span><span class="o">)));</span>
<span class="n">listOfData</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
<span class="c1">//OUTPUT:</span>
<span class="c1">// null</span>
<span class="c1">// Data(bar)</span>
<span class="c1">// Data(foo)</span>
<span class="c1">// Data(nyu)</span></code></pre></figure>

<p><code class="highlighter-rouge">nullsFirst</code> is great example of decorator design pattern
(it adds functionality but doesn’t change interface).
<code class="highlighter-rouge">nullsFirst</code> works by wrapping provided comparator in code similar to:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">nullsFirst</span><span class="o">(</span><span class="n">Comparator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">comparator</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">return</span> <span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
    <span class="k">if</span> <span class="o">(</span><span class="n">a</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
        <span class="k">return</span> <span class="o">(</span><span class="n">b</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="mi">0</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="o">;</span>
 
    <span class="k">if</span> <span class="o">(</span><span class="n">b</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span>
      <span class="k">return</span> <span class="mi">1</span><span class="o">;</span>
 
    <span class="c1">// a and b are not null here</span>
    <span class="k">return</span> <span class="n">comparator</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="n">a</span><span class="o">,</span> <span class="n">b</span><span class="o">);</span>
  <span class="o">};</span>
<span class="o">}</span></code></pre></figure>

<p>Previous example works great unless we try to sort a collection
containing <code class="highlighter-rouge">Data(null)</code>:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">List</span><span class="o">&lt;</span><span class="n">Data</span><span class="o">&gt;</span> <span class="n">listOfData</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span>
       <span class="k">new</span> <span class="n">Data</span><span class="o">(</span><span class="s">"foo"</span><span class="o">),</span>
       <span class="k">new</span> <span class="n">Data</span><span class="o">(</span><span class="kc">null</span><span class="o">),</span>
       <span class="k">new</span> <span class="n">Data</span><span class="o">(</span><span class="s">"bar"</span><span class="o">),</span>
       <span class="k">new</span> <span class="n">Data</span><span class="o">(</span><span class="s">"nyu"</span><span class="o">));</span>

<span class="n">listOfData</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">nullsFirst</span><span class="o">(</span><span class="n">comparing</span><span class="o">(</span><span class="nl">Data:</span><span class="o">:</span><span class="n">getValue</span><span class="o">)));</span>
<span class="n">listOfData</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
<span class="c1">//OUTPUT:</span>
<span class="c1">// Exception in thread "main" java.lang.NullPointerException</span>
<span class="c1">//  at java.util.Comparator.lambda$comparing$77a9974f$1(Comparator.java:469)</span>
<span class="c1">//  at java.util.Comparators$NullComparator.compare(Comparators.java:83)</span></code></pre></figure>

<p>But do not despair <code class="highlighter-rouge">nullsFirst</code> can help us again:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">listOfData</span><span class="o">.</span><span class="na">sort</span><span class="o">(</span><span class="n">nullsFirst</span><span class="o">(</span>
    <span class="n">comparing</span><span class="o">(</span><span class="nl">Data:</span><span class="o">:</span><span class="n">getValue</span><span class="o">,</span> <span class="n">nullsFirst</span><span class="o">(</span><span class="n">naturalOrder</span><span class="o">()))));</span>

<span class="n">listOfData</span><span class="o">.</span><span class="na">forEach</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">::</span><span class="n">println</span><span class="o">);</span>
<span class="c1">//OUTPUT:</span>
<span class="c1">// Data(null)</span>
<span class="c1">// Data(bar)</span>
<span class="c1">// Data(foo)</span>
<span class="c1">// Data(nyu)</span></code></pre></figure>

<p>Ta da! It works but readability suffers greatly… You may ask what is
this thing:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">comparing</span><span class="o">(</span><span class="nl">Data:</span><span class="o">:</span><span class="n">getValue</span><span class="o">,</span> <span class="n">nullsFirst</span><span class="o">(</span><span class="n">naturalOrder</span><span class="o">()))</span></code></pre></figure>

<p>First: we use the following overload of <code class="highlighter-rouge">comparing</code> method:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">,</span> <span class="n">U</span><span class="o">&gt;</span> <span class="n">Comparator</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">comparing</span><span class="o">(</span>
   <span class="n">Function</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">T</span><span class="o">,</span> <span class="o">?</span> <span class="kd">extends</span> <span class="n">U</span><span class="o">&gt;</span> <span class="n">keyExtractor</span><span class="o">,</span>
   <span class="n">Comparator</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">U</span><span class="o">&gt;</span>            <span class="n">keyComparator</span><span class="o">)</span>
<span class="o">{</span>
    <span class="k">return</span> <span class="o">(</span><span class="n">c1</span><span class="o">,</span> <span class="n">c2</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="n">keyComparator</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span>
          <span class="n">keyExtractor</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">c1</span><span class="o">),</span>
          <span class="n">keyExtractor</span><span class="o">.</span><span class="na">apply</span><span class="o">(</span><span class="n">c2</span><span class="o">));</span>
<span class="o">}</span></code></pre></figure>

<p>Second: in our example <code class="highlighter-rouge">nullsFirst(naturalOrder())</code> is a comparator that can
compare nullable <code class="highlighter-rouge">String</code>s:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">Comparator</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">cmp</span> <span class="o">=</span> <span class="n">nullsFirst</span><span class="o">(</span><span class="n">naturalOrder</span><span class="o">());</span>
<span class="n">cmp</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="s">"foo"</span><span class="o">,</span> <span class="s">"zzz"</span><span class="o">);</span> <span class="c1">// -1</span>
<span class="n">cmp</span><span class="o">.</span><span class="na">compare</span><span class="o">(</span><span class="s">"foo"</span><span class="o">,</span> <span class="kc">null</span><span class="o">);</span>  <span class="c1">// 1</span></code></pre></figure>

<p>Now everything should be clear (I hope).</p>

<p>To sum up in this post we get to know two
little methods <code class="highlighter-rouge">nullsFirst</code> and <code class="highlighter-rouge">nullsLast</code>.
I admit that they are a bit unintuitive to use, but definitely worth
to bear in mind.</p>


	  ]]></description>
	</item>

	<item>
	  <title>Spring @Transactional cheat sheet</title>
	  <link>//spring-transactional-cheat-sheet</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2017-01-07T01:00:00+01:00</pubDate>
	  <guid>//spring-transactional-cheat-sheet</guid>
	  <description><![CDATA[
	     <h4 id="transactionalpropagation">@Transactional(propagation=…)</h4>

<dl>
  <dt><code class="highlighter-rouge">MANDATORY</code></dt>
  <dd>Method must run within transaction. If there is no
currently active transaction going on an exception is thrown.</dd>
  <dt><code class="highlighter-rouge">REQUIRED</code></dt>
  <dd>Method must run within transaction. If there is already started
transaction method will run within that transaction, otherwise
new transaction will be started.</dd>
  <dt><code class="highlighter-rouge">REQUIRES_NEW</code></dt>
  <dd>Method must run within it’s own transaction. Spring will
always create a new transaction for this method. If there is
already started transaction going on, it will be suspended for
duration of this method.</dd>
  <dt><code class="highlighter-rouge">NESTED</code></dt>
  <dd>Method will be run within nested transaction. If no transaction is
present new transaction will be started, otherwise a nested transaction
will be started.</dd>
  <dt><code class="highlighter-rouge">NOT_SUPPORTED</code></dt>
  <dd>Method should not run within transaction. If there is active transaction
going on it will be suspended for duration of this method call.</dd>
  <dt><code class="highlighter-rouge">NEVER</code></dt>
  <dd>Method should not run within transaction.
An exception will be thrown if method is called and
there is active transaction going on.</dd>
</dl>

<h4 id="transactionalisolation">@Transactional(isolation=…)</h4>

<table>
  <thead>
    <tr>
      <th>Isolation Level</th>
      <th style="text-align: center">Dirty Reads</th>
      <th style="text-align: center">Nonrepeatable reads</th>
      <th style="text-align: center">Phantom reads</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td><code class="highlighter-rouge">READ_UNCOMMITTED</code></td>
      <td style="text-align: center">:x:</td>
      <td style="text-align: center">:x:</td>
      <td style="text-align: center">:x:</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">READ_COMMITTED</code></td>
      <td style="text-align: center">:heavy_check_mark:</td>
      <td style="text-align: center">:x:</td>
      <td style="text-align: center">:x:</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">REPEATABLE_READ</code></td>
      <td style="text-align: center">:heavy_check_mark:</td>
      <td style="text-align: center">:heavy_check_mark:</td>
      <td style="text-align: center">:x:</td>
    </tr>
    <tr>
      <td><code class="highlighter-rouge">SERIALIZABLE</code></td>
      <td style="text-align: center">:heavy_check_mark:</td>
      <td style="text-align: center">:heavy_check_mark:</td>
      <td style="text-align: center">:heavy_check_mark:</td>
    </tr>
  </tbody>
</table>

<p><code class="highlighter-rouge">DEFAULT</code> isolation level uses transaction isolation level provided
by underlying implementation.</p>

<dl>
  <dt>Dirty Reads</dt>
  <dd>Transaction may read data written
but not yet committed by other transactions.</dd>
  <dt>Nonrepeatable</dt>
  <dt>reads</dt>
  <dd>Performing the same query twice may return different data.
Usually this happens because some other transaction
updated data and was successfully committed after first
but before second query.</dd>
  <dt>Phantom reads</dt>
  <dd>When we query for set of rows twice second query may return
rows not present in result returned by first query.
Usually this happens because some other transaction inserted rows
to queried table and was successfully committed between our queries.</dd>
</dl>

<h4 id="transactionalrollbackfor-norollbackfor">@Transactional(rollbackFor=…, noRollbackFor=)</h4>

<p>By default transaction are rolled back only 
on uncaught runtime exceptions.
<code class="highlighter-rouge">rollbackFor</code> and <code class="highlighter-rouge">noRollbackFor</code> properties allows us to
set additional exceptions types for which transaction should
or should not rolled back.</p>

<h4 id="transactionalreadonly">@Transactional(readOnly=…)</h4>

<p>Set <code class="highlighter-rouge">readOnly=true</code> when transaction doesn’t write back
to database. This will allow underlying implementation to
possibly optimize data access.</p>

<p>This settings make sense only on methods that start new
transaction (with propagation <code class="highlighter-rouge">REQUIRED</code>, <code class="highlighter-rouge">REQUIRES_NEW</code> and <code class="highlighter-rouge">NESTED</code>).</p>

<h4 id="transactionaltimeout">@Transactional(timeout=…)</h4>

<p>Transaction timeout in seconds.</p>


	  ]]></description>
	</item>

	<item>
	  <title>Crudest CRUD using Spring</title>
	  <link>//crudest-curd-using-spring</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2016-12-27T01:00:00+01:00</pubDate>
	  <guid>//crudest-curd-using-spring</guid>
	  <description><![CDATA[
	     <p>EDIT: In this post I’ll use Spring XML configuration, in new
applications you should definitely use Spring JavaConfig configuration (via
annotations and Java classes).
For more info see reddit comment discussion <a href="https://www.reddit.com/r/springsource/comments/5mjwa2/100_crudest_crud_using_spring_and_jdbc/">here</a>.</p>

<p>In this blog post we will create simple CRUD (Create Retrieve Update Delete)
application using Spring and JDBC.
Before we start we need to setup our database.
I will assume that you already have Postgres running on your box.</p>

<h4 id="setup-database">Setup database</h4>

<p>Because we want to follow good programming practices we will create a
separate user in Postgres database dedicated only for our application.
Open pgAdmin and execute following SQL to create user <code class="highlighter-rouge">crud</code>:</p>

<figure class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">create</span> <span class="k">user</span> <span class="n">crud</span>
  <span class="k">with</span> <span class="n">password</span> <span class="s1">'crud'</span><span class="p">;</span></code></pre></figure>

<p>Next create <code class="highlighter-rouge">cruddb</code> database with <code class="highlighter-rouge">crud</code> as db owner:</p>

<figure class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">create</span> <span class="k">database</span> <span class="n">cruddb</span>
  <span class="k">with</span> <span class="k">owner</span> <span class="n">crud</span>
       <span class="k">encoding</span> <span class="s1">'utf-8'</span><span class="p">;</span></code></pre></figure>

<p>Now it’s time to switch to <code class="highlighter-rouge">cruddb</code> database and create
<code class="highlighter-rouge">app_data</code> table:</p>

<figure class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">create</span> <span class="k">table</span> <span class="n">app_data</span> <span class="p">(</span>
  <span class="n">id</span> <span class="n">serial</span> <span class="k">primary</span> <span class="k">key</span><span class="p">,</span>
  <span class="k">index</span> <span class="n">int</span> <span class="k">not</span> <span class="k">null</span><span class="p">,</span>
  <span class="n">value</span> <span class="n">text</span> <span class="k">not</span> <span class="k">null</span>
<span class="p">);</span></code></pre></figure>

<p>We should create this table logged as <code class="highlighter-rouge">crud</code> user,
otherwise <code class="highlighter-rouge">curd</code> will be denied access to the table.
If you don’t want to login as <code class="highlighter-rouge">curd</code> you may create
table from superuser account and then grant permissions
to <code class="highlighter-rouge">curd</code> user:</p>

<figure class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">grant</span> <span class="k">all</span> <span class="k">on</span> <span class="k">table</span> <span class="n">app_data</span> <span class="k">to</span> <span class="n">crud</span>

<span class="c1">-- needed to autogenerate primary key
</span><span class="k">grant</span> <span class="k">all</span> <span class="k">on</span> <span class="n">sequence</span> <span class="n">app_data_id_seq</span> <span class="k">to</span> <span class="n">crud</span></code></pre></figure>

<h4 id="setup-application">Setup application</h4>

<p>I assume that you already have Maven installed because
we are going to use it to create our CRUD application:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">$ mvn archetype:generate \
  -DgroupId="io.mc.crudapp" \
  -DartifactId=crudapp \
  -Dversion=1.0 \
  -DarchetypeArtifactId=maven-archetype-quickstart \
  -DinteractiveMode=false

$ tree crudapp/
crudapp
|-- pom.xml
`-- src
    |-- main
    |   `-- java
    |       `-- io
    |           `-- mc
    |               `-- crudapp
    |                   `-- App.java
    `-- test
        `-- java
            `-- io
                `-- mc
                    `-- crudapp
                        `-- AppTest.java

11 directories, 3 files</code></pre></figure>

<p>NOTE: Try to use <code class="highlighter-rouge">archetype:create</code> instead of <code class="highlighter-rouge">archetype:generate</code> if you
get an error using above command</p>

<p>Now we may load our application into our favorite IDE or just stick
to command line.</p>

<p>Since we will be using Spring and Postgres JDBC driver we need to
add them as a dependencies to our POM. We also want to use connection
pooling (database connections are expensive to create so we want to
reuse them whenever possible) so we will add a dependency on 
HikariCP library:</p>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="c">&lt;!-- pom.xml --&gt;</span>
<span class="nt">&lt;dependencies&gt;</span>
   <span class="nt">&lt;dependency&gt;</span>
      <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
      <span class="nt">&lt;artifactId&gt;</span>spring-context<span class="nt">&lt;/artifactId&gt;</span>
      <span class="nt">&lt;version&gt;</span>4.3.5.RELEASE<span class="nt">&lt;/version&gt;</span>
   <span class="nt">&lt;/dependency&gt;</span>
   <span class="nt">&lt;dependency&gt;</span>
      <span class="nt">&lt;groupId&gt;</span>org.springframework<span class="nt">&lt;/groupId&gt;</span>
      <span class="nt">&lt;artifactId&gt;</span>spring-jdbc<span class="nt">&lt;/artifactId&gt;</span>
      <span class="nt">&lt;version&gt;</span>4.3.5.RELEASE<span class="nt">&lt;/version&gt;</span>
   <span class="nt">&lt;/dependency&gt;</span>

   <span class="nt">&lt;dependency&gt;</span>
      <span class="nt">&lt;groupId&gt;</span>org.postgresql<span class="nt">&lt;/groupId&gt;</span>
      <span class="nt">&lt;artifactId&gt;</span>postgresql<span class="nt">&lt;/artifactId&gt;</span>
      <span class="nt">&lt;version&gt;</span>9.4-1200-jdbc41<span class="nt">&lt;/version&gt;</span>
   <span class="nt">&lt;/dependency&gt;</span>

   <span class="nt">&lt;dependency&gt;</span>
      <span class="nt">&lt;groupId&gt;</span>com.zaxxer<span class="nt">&lt;/groupId&gt;</span>
      <span class="nt">&lt;artifactId&gt;</span>HikariCP<span class="nt">&lt;/artifactId&gt;</span>
      <span class="nt">&lt;version&gt;</span>2.5.1<span class="nt">&lt;/version&gt;</span>
   <span class="nt">&lt;/dependency&gt;</span>
<span class="nt">&lt;/dependencies&gt;</span></code></pre></figure>

<p>We should also change to using Java 8
so we may use lambdas and all cool stuff, we do this
by adding to our POM:</p>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;properties&gt;</span>
   <span class="nt">&lt;maven.compiler.source&gt;</span>1.8<span class="nt">&lt;/maven.compiler.source&gt;</span>
   <span class="nt">&lt;maven.compiler.target&gt;</span>1.8<span class="nt">&lt;/maven.compiler.target&gt;</span>
   <span class="nt">&lt;project.build.sourceEncoding&gt;</span>UTF-8<span class="nt">&lt;/project.build.sourceEncoding&gt;</span>
<span class="nt">&lt;/properties&gt;</span></code></pre></figure>

<p>And finally we will use <code class="highlighter-rouge">exec-maven-plugin</code> 
to strightforward running our application from
command line:</p>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;build&gt;</span>
  <span class="nt">&lt;plugins&gt;</span>
    <span class="nt">&lt;plugin&gt;</span>
      <span class="nt">&lt;groupId&gt;</span>org.codehaus.mojo<span class="nt">&lt;/groupId&gt;</span>
      <span class="nt">&lt;artifactId&gt;</span>exec-maven-plugin<span class="nt">&lt;/artifactId&gt;</span>
      <span class="nt">&lt;version&gt;</span>1.5.0<span class="nt">&lt;/version&gt;</span>
      <span class="nt">&lt;executions&gt;</span>
        <span class="nt">&lt;execution&gt;</span>
          <span class="nt">&lt;goals&gt;</span>
            <span class="nt">&lt;goal&gt;</span>java<span class="nt">&lt;/goal&gt;</span>
          <span class="nt">&lt;/goals&gt;</span>
        <span class="nt">&lt;/execution&gt;</span>
      <span class="nt">&lt;/executions&gt;</span>
      <span class="nt">&lt;configuration&gt;</span>
        <span class="nt">&lt;mainClass&gt;</span>io.mc.crudapp.Main<span class="nt">&lt;/mainClass&gt;</span>
      <span class="nt">&lt;/configuration&gt;</span>
    <span class="nt">&lt;/plugin&gt;</span>
  <span class="nt">&lt;/plugins&gt;</span>
<span class="nt">&lt;/build&gt;</span></code></pre></figure>

<p>NOTE: You may find complete <code class="highlighter-rouge">pom.xml</code> in attached source code</p>

<p>You may write</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">$ mvn clean install</code></pre></figure>

<p>to rebuild CURD application and</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">$ mvn exec:java</code></pre></figure>

<p>to start it.</p>

<h4 id="setup-spring">Setup Spring</h4>

<p>Add following code to the <code class="highlighter-rouge">main</code> method:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Main</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="n">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">ClassPathXmlApplicationContext</span> <span class="n">appContext</span> <span class="o">=</span>
                <span class="k">new</span> <span class="n">ClassPathXmlApplicationContext</span><span class="o">(</span><span class="k">new</span> <span class="n">String</span><span class="o">[]</span> <span class="o">{</span>
                        <span class="s">"spring/app-context.xml"</span>
                <span class="o">});</span>

        <span class="c1">// We can use Spring context here</span>

        <span class="n">appContext</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>We must also create <code class="highlighter-rouge">resource/spring/app-context.xml</code> file:</p>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;beans</span> 
  <span class="na">xmlns=</span><span class="s">"http://www.springframework.org/schema/beans"</span>
  <span class="na">xmlns:context=</span><span class="s">"http://www.springframework.org/schema/context"</span>
  <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
  <span class="na">xsi:schemaLocation=</span><span class="s">"http://www.springframework.org/schema/beans     http://www.springframework.org/schema/beans/spring-beans-3.0.xsd     http://www.springframework.org/schema/context     http://www.springframework.org/schema/context/spring-context-3.0.xsd"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;context:annotation-config</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/beans&gt;</span></code></pre></figure>

<p>After these two steps we should have working Spring application.
Right now no beans are registered in Spring container, this will
change in the next section.</p>

<h4 id="setup-spring-jdbc-data-source">Setup Spring JDBC Data source</h4>

<p>To enable Spring to access database
we must define data source in <code class="highlighter-rouge">app-context.xml</code>:</p>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="c">&lt;!-- Without pooling: --&gt;</span>
<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"dataSource"</span>
    <span class="na">class=</span><span class="s">"org.springframework.jdbc.datasource.DriverManagerDataSource"</span><span class="nt">&gt;</span>

  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"driverClassName"</span> <span class="na">value=</span><span class="s">"org.postgresql.Driver"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"url"</span> <span class="na">value=</span><span class="s">"jdbc:postgresql://localhost:5432/cruddb"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"username"</span> <span class="na">value=</span><span class="s">"crud"</span> <span class="nt">/&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"password"</span> <span class="na">value=</span><span class="s">"crud"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span></code></pre></figure>

<p><code class="highlighter-rouge">DriverManagerDataSource</code> class is provided by Spring as one
of several implementations of <code class="highlighter-rouge">DataSource</code> interface.
<code class="highlighter-rouge">DriverManagerDataSource</code> returns a new connection to database
every time application asks for a connection.
Connection is created using specified JDBC driver.
<code class="highlighter-rouge">SingleConnectionDataSource</code> is another DataSource implementation
provided by Spring
that returns always the
same connection (having single connection 
has serious implications in multithreaded
apps - when two threads want to
access database concurrently one of them must wait).</p>

<p>Now we may use <code class="highlighter-rouge">dataSource</code> bean to insert row into <code class="highlighter-rouge">app_data</code> table:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">final</span> <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">"insert into app_data(index,value) values(?,?)"</span><span class="o">;</span>

<span class="n">DataSource</span> <span class="n">ds</span> <span class="o">=</span> <span class="n">appContext</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">DataSource</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="k">try</span> <span class="o">(</span><span class="n">Connection</span> <span class="n">conn</span> <span class="o">=</span> <span class="n">ds</span><span class="o">.</span><span class="na">getConnection</span><span class="o">();</span>
    <span class="n">PreparedStatement</span> <span class="n">stmt</span> <span class="o">=</span>
         <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">,</span> <span class="n">Statement</span><span class="o">.</span><span class="na">RETURN_GENERATED_KEYS</span><span class="o">))</span> <span class="o">{</span>

       <span class="n">stmt</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="mi">101</span><span class="o">);</span>
       <span class="n">stmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="s">"foo"</span><span class="o">);</span>

       <span class="n">stmt</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">();</span>

       <span class="c1">// retrieve id of inserted row</span>
       <span class="k">try</span><span class="o">(</span><span class="n">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">stmt</span><span class="o">.</span><span class="na">getGeneratedKeys</span><span class="o">())</span> <span class="o">{</span>
           <span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">();</span>
           <span class="n">Long</span> <span class="n">id</span> <span class="o">=</span> <span class="n">rs</span><span class="o">.</span><span class="na">getLong</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
           <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"id: "</span> <span class="o">+</span> <span class="n">id</span><span class="o">);</span>
       <span class="o">}</span>
<span class="o">}</span>
<span class="k">catch</span> <span class="o">(</span><span class="n">SQLException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
   <span class="n">ex</span><span class="o">.</span><span class="na">printStackTrace</span><span class="o">();</span>
<span class="o">}</span></code></pre></figure>

<h4 id="writing-simple-dao">Writing simple DAO</h4>

<p>It is always a good idea to isolate data access code into
a separate component, in our case we will create <code class="highlighter-rouge">AppDataDAO</code> bean that
will be responsible for CURD operations on <code class="highlighter-rouge">app_data</code> table.</p>

<p>To make passing and retrieving data via <code class="highlighter-rouge">AppDataDAO</code> easier we will define
<code class="highlighter-rouge">AppData</code> class that will represent a single row from <code class="highlighter-rouge">app_data</code> table:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">AppData</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="kt">int</span> <span class="n">index</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">String</span> <span class="n">value</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">AppData</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">,</span> <span class="kt">int</span> <span class="n">index</span><span class="o">,</span> <span class="n">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">id</span> <span class="o">=</span> <span class="n">id</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">index</span> <span class="o">=</span> <span class="n">index</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">value</span> <span class="o">=</span> <span class="n">value</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kt">int</span> <span class="n">getId</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">id</span><span class="o">;</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="n">getIndex</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">index</span><span class="o">;</span> <span class="o">}</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="n">getValue</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">value</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>It is a good practice to program to interface, so
instead of creating a single bean <code class="highlighter-rouge">AppDataDAO</code> we will create
<code class="highlighter-rouge">AppDataDAO</code> interface and then provide an implementation:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">AppDataDAO</span> <span class="o">{</span>
    <span class="kt">int</span> <span class="n">insert</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">,</span> <span class="n">String</span> <span class="n">value</span><span class="o">);</span>
    <span class="kt">void</span> <span class="n">update</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">,</span> <span class="kt">int</span> <span class="n">newIndex</span><span class="o">,</span> <span class="n">String</span> <span class="n">newValue</span><span class="o">);</span>
    <span class="kt">boolean</span> <span class="n">delete</span><span class="o">(</span><span class="kt">int</span> <span class="n">id</span><span class="o">);</span>
    <span class="n">List</span><span class="o">&lt;</span><span class="n">AppData</span><span class="o">&gt;</span> <span class="n">selectAll</span><span class="o">();</span>
<span class="o">}</span></code></pre></figure>

<p>Finally we may create <code class="highlighter-rouge">JDBCAppDataDAO</code> class that will implement <code class="highlighter-rouge">AppDataDAO</code>
interface:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">JDBCAppDataDAO</span> <span class="kd">implements</span> <span class="n">AppDataDAO</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="n">DataSource</span> <span class="n">ds</span><span class="o">;</span>
    
    <span class="nd">@Autowired</span>
    <span class="kd">public</span> <span class="n">JDBCAppDataDAO</span><span class="o">(</span><span class="n">DataSource</span> <span class="n">ds</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">ds</span> <span class="o">=</span> <span class="n">Objects</span><span class="o">.</span><span class="na">requireNonNull</span><span class="o">(</span><span class="n">ds</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">interface</span> <span class="nc">ConnectionConsumer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
        <span class="n">T</span> <span class="n">consume</span><span class="o">(</span><span class="n">Connection</span> <span class="n">conn</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">SQLException</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span> <span class="n">usingConnection</span><span class="o">(</span><span class="n">ConnectionConsumer</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">consumer</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Connection</span> <span class="n">connection</span> <span class="o">=</span> <span class="n">DataSourceUtils</span><span class="o">.</span><span class="na">getConnection</span><span class="o">(</span><span class="n">ds</span><span class="o">);</span>

        <span class="k">try</span> <span class="o">{</span>
            <span class="k">return</span> <span class="n">consumer</span><span class="o">.</span><span class="na">consume</span><span class="o">(</span><span class="n">connection</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">catch</span> <span class="o">(</span><span class="n">SQLException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="n">RuntimeException</span><span class="o">(</span><span class="n">ex</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">finally</span> <span class="o">{</span>
            <span class="n">DataSourceUtils</span><span class="o">.</span><span class="na">releaseConnection</span><span class="o">(</span><span class="n">connection</span><span class="o">,</span> <span class="n">ds</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">int</span> <span class="n">insert</span><span class="o">(</span><span class="kt">int</span> <span class="n">index</span><span class="o">,</span> <span class="n">String</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">usingConnection</span><span class="o">(</span><span class="n">conn</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="n">String</span> <span class="n">sql</span> <span class="o">=</span> <span class="s">"insert into app_data(index,value) values(?,?)"</span><span class="o">;</span>
            <span class="k">try</span> <span class="o">(</span><span class="n">PreparedStatement</span> <span class="n">stmt</span> <span class="o">=</span>
                    <span class="n">conn</span><span class="o">.</span><span class="na">prepareStatement</span><span class="o">(</span><span class="n">sql</span><span class="o">,</span> <span class="n">PreparedStatement</span><span class="o">.</span><span class="na">RETURN_GENERATED_KEYS</span><span class="o">))</span> <span class="o">{</span>
                <span class="n">stmt</span><span class="o">.</span><span class="na">setInt</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">index</span><span class="o">);</span>
                <span class="n">stmt</span><span class="o">.</span><span class="na">setString</span><span class="o">(</span><span class="mi">2</span><span class="o">,</span> <span class="n">value</span><span class="o">);</span>

                <span class="n">stmt</span><span class="o">.</span><span class="na">executeUpdate</span><span class="o">();</span>

                <span class="k">try</span><span class="o">(</span><span class="n">ResultSet</span> <span class="n">rs</span> <span class="o">=</span> <span class="n">stmt</span><span class="o">.</span><span class="na">getGeneratedKeys</span><span class="o">())</span> <span class="o">{</span>
                    <span class="k">if</span> <span class="o">(</span><span class="n">rs</span><span class="o">.</span><span class="na">next</span><span class="o">())</span> <span class="o">{</span>
                        <span class="k">return</span> <span class="n">rs</span><span class="o">.</span><span class="na">getInt</span><span class="o">(</span><span class="mi">1</span><span class="o">);</span>
                    <span class="o">}</span>
                    <span class="k">else</span>
                        <span class="k">throw</span> <span class="k">new</span> <span class="n">RuntimeException</span><span class="o">(</span><span class="s">"no generated key!"</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">});</span>
    <span class="o">}</span></code></pre></figure>

<p>A few things to notice: logic responsible for acquiring and releasing
a db connection was encapsulated in <code class="highlighter-rouge">usingConnection</code> method.
Instead of getting connection straight from <code class="highlighter-rouge">DataSource</code> we use
<code class="highlighter-rouge">DataSourceUtils</code> class to get and release connection. This become important
when we later start using transactions, because transactions are
attached to connections we will no longer be responsible for creating
and closing connection - a transaction manager will do that for
us. When <code class="highlighter-rouge">DataSourceUtils</code> is asked for a new connection it first checks
if any transaction is running and if it is it returns connection used
by that transaction. If no transaction is active 
a new connection is created.</p>

<p>The last thing that we must do is to register our bean in Spring container:</p>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"> <span class="nt">&lt;bean</span> <span class="na">name=</span><span class="s">"AppDataDAO"</span>
     <span class="na">class=</span><span class="s">"io.mc.crudapp.JDBCAppDataDAO"</span> <span class="nt">/&gt;</span></code></pre></figure>

<p>and use it to insert a row:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">AppDataDAO</span> <span class="n">appDataDAO</span> <span class="o">=</span> <span class="n">appContext</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">AppDataDAO</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="n">appDataDAO</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="mi">102</span><span class="o">,</span> <span class="s">"bar"</span><span class="o">);</span></code></pre></figure>

<h4 id="using-hikaricp">Using HikariCP</h4>

<p>Opening a new connection to database is expensive operation.
Instead of constantly opening and closing connections we should
reuse them whenever possible. Because manually managing and resetting
connections
(before we can reuse connection we must reset it state - this will
for example clear any pending errors on connection) is error-prone
it is wise to use one of many connection pool libraries.
Here we will use HikariCP library (CP stands for Connection Pool).</p>

<p>Let’s start by creating HikariCP configuration file <code class="highlighter-rouge">resources/db/hikari.properties</code>:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">dataSourceClassName=org.postgresql.ds.PGSimpleDataSource
dataSource.user=crud
dataSource.password=crud
dataSource.databaseName=cruddb
dataSource.portNumber=5432
dataSource.serverName=localhost</code></pre></figure>

<p>Then we must change our <code class="highlighter-rouge">dataSource</code> bean definition to:</p>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"dataSource"</span>
    <span class="na">class=</span><span class="s">"com.zaxxer.hikari.HikariDataSource"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;constructor-arg&gt;</span>
      <span class="nt">&lt;bean</span> <span class="na">class=</span><span class="s">"com.zaxxer.hikari.HikariConfig"</span><span class="nt">&gt;</span>
          <span class="nt">&lt;constructor-arg</span> <span class="na">value=</span><span class="s">"/db/hikari.properties"</span> <span class="nt">/&gt;</span>
      <span class="nt">&lt;/bean&gt;</span>
  <span class="nt">&lt;/constructor-arg&gt;</span>
<span class="nt">&lt;/bean&gt;</span></code></pre></figure>

<p>That’s all - now our application draws connections from connection pool!</p>

<h4 id="adding-transactions-to-crud-app">Adding transactions to CRUD app</h4>

<p>Let’s clear <code class="highlighter-rouge">app_data</code> table:</p>

<figure class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">truncate</span> <span class="k">table</span> <span class="n">app_data</span><span class="p">;</span></code></pre></figure>

<p>and exeucte the following code in <code class="highlighter-rouge">main</code>:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">AppDataDAO</span> <span class="n">appDataDAO</span> <span class="o">=</span> <span class="n">appContext</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">AppDataDAO</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="n">appDataDAO</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="mi">101</span><span class="o">,</span> <span class="s">"foo"</span><span class="o">);</span>
<span class="n">someOperation</span><span class="o">();</span>
<span class="n">appDataDAO</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="mi">102</span><span class="o">,</span> <span class="s">"bar"</span><span class="o">);</span>

<span class="c1">// given:</span>
<span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">someOperation</span><span class="p">(</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">throw</span> <span class="k">new</span> <span class="n">RuntimeException</span><span class="o">(</span><span class="s">"uber error"</span><span class="o">);</span>
<span class="o">}</span></code></pre></figure>

<p>Of course running this program results in error and only one row
is inserted to database:</p>

<figure class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">app_data</span> </code></pre></figure>

<p><img src="assets/images/2017-01-07/select_result.png" alt="select query result" /></p>

<p>In real life application we often want to perform either all of
database operations or none of them. In our example this will mean that
we either want to insert both rows to db or none of them should be inserted.
Transactions can solve these problem for us. Transactions also offers
some level of isolation between database operations performed by
different users - but this topic is
beyond this simple tutorial.
For more information please <a href="https://en.wikipedia.org/wiki/Isolation_(database_systems)">check Wikipedia</a>.</p>

<p>Transactions are usually handled at application service level, we will
follow this pattern. As usually we will start by creating
<code class="highlighter-rouge">CRUDAppDemoService</code> interface:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">CRUDAppDemoService</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="n">doDemo</span><span class="o">();</span>
<span class="o">}</span></code></pre></figure>

<p>Then we may write implementation of <code class="highlighter-rouge">CRUDAppDemoService</code>:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CRUDAppDemoServiceImpl</span> <span class="kd">implements</span> <span class="n">CRUDAppDemoService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">TransactionTemplate</span> <span class="n">txTemplate</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">AppDataDAO</span> <span class="n">appDataDAO</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">public</span> <span class="n">CRUDAppDemoServiceImpl</span><span class="o">(</span>
      <span class="n">TransactionTemplate</span> <span class="n">txTemplate</span><span class="o">,</span> <span class="n">AppDataDAO</span> <span class="n">appDataDAO</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">txTemplate</span> <span class="o">=</span> <span class="n">Objects</span><span class="o">.</span><span class="na">requireNonNull</span><span class="o">(</span><span class="n">txTemplate</span><span class="o">);</span>
        <span class="k">this</span><span class="o">.</span><span class="na">appDataDAO</span> <span class="o">=</span> <span class="n">Objects</span><span class="o">.</span><span class="na">requireNonNull</span><span class="o">(</span><span class="n">appDataDAO</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">doDemo</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">txTemplate</span><span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="n">ts</span> <span class="o">-&gt;</span> <span class="o">{</span>
            <span class="n">appDataDAO</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="mi">101</span><span class="o">,</span> <span class="s">"foo"</span><span class="o">);</span>
            <span class="n">someOperation</span><span class="o">();</span>
            <span class="n">appDataDAO</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="mi">102</span><span class="o">,</span> <span class="s">"bar"</span><span class="o">);</span> 

            <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">});</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="n">someOperation</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="n">RuntimeException</span><span class="o">(</span><span class="s">"uber error"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>To define boundaries of transaction we use Spring provided
<code class="highlighter-rouge">TransactionTemplate</code> class. All database operations executed
in callback passed to <code class="highlighter-rouge">execute</code> method
will be performed within transaction. In callback we have access
to <code class="highlighter-rouge">ts</code> parameter that allows us to manually rollback current transaction.</p>

<p>When we throw runtime exception from callback, transaction will be
rolled back automatically. This behaviour doesn’t occur for
checked exceptions, if we want to rollback transaction in that case
we must catch exception manually and then invoke <code class="highlighter-rouge">ts.setRollbackOnly()</code>.</p>

<p>Before we can run this code we need to register <code class="highlighter-rouge">TransactionTemplate</code> and
<code class="highlighter-rouge">TransactionManager</code> in Spring container:</p>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;bean</span> <span class="na">name=</span><span class="s">"transactionManager"</span>
    <span class="na">class=</span><span class="s">"org.springframework.jdbc.datasource.DataSourceTransactionManager"</span><span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"dataSource"</span> <span class="na">ref=</span><span class="s">"dataSource"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>

<span class="nt">&lt;bean</span> <span class="na">id=</span><span class="s">"TransactionTemplate"</span>
    <span class="na">class=</span><span class="s">"org.springframework.transaction.support.TransactionTemplate"</span>
    <span class="nt">&gt;</span>
  <span class="nt">&lt;property</span> <span class="na">name=</span><span class="s">"transactionManager"</span> <span class="na">ref=</span><span class="s">"transactionManager"</span> <span class="nt">/&gt;</span>
<span class="nt">&lt;/bean&gt;</span>

<span class="nt">&lt;bean</span> <span class="na">name=</span><span class="s">"CRUDAppDemoService"</span>
    <span class="na">class=</span><span class="s">"io.mc.crudapp.CRUDAppDemoServiceImpl"</span> <span class="nt">/&gt;</span></code></pre></figure>

<p>Finally we may add to the <code class="highlighter-rouge">main</code> method:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">CRUDAppDemoService</span> <span class="n">service</span> <span class="o">=</span> <span class="n">appContext</span><span class="o">.</span><span class="na">getBean</span><span class="o">(</span><span class="n">CRUDAppDemoService</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
<span class="n">service</span><span class="o">.</span><span class="na">doDemo</span><span class="o">();</span></code></pre></figure>

<p>Again running our program results in error but this time neither of rows
is inserted in <code class="highlighter-rouge">app_data</code> table.
When we comment out call to <code class="highlighter-rouge">someOperation()</code> both rows
are inserted - just as we wanted.</p>

<h4 id="annotation-driven-transactions">Annotation driven transactions</h4>

<p>Using <code class="highlighter-rouge">TransactionManager</code> is cumbersome so Spring provides a better
alternative, we may declare transaction boundaries using annotations.
Let’s change our <code class="highlighter-rouge">CRUDAppDemoServiceImpl</code> class to:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">CRUDAppDemoServiceImpl</span> <span class="kd">implements</span> <span class="n">CRUDAppDemoService</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">AppDataDAO</span> <span class="n">appDataDAO</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">public</span> <span class="n">CRUDAppDemoServiceImpl</span><span class="o">(</span><span class="n">AppDataDAO</span> <span class="n">appDataDAO</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">appDataDAO</span> <span class="o">=</span> <span class="n">Objects</span><span class="o">.</span><span class="na">requireNonNull</span><span class="o">(</span><span class="n">appDataDAO</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="nd">@Transactional</span><span class="o">(</span><span class="n">propagation</span> <span class="o">=</span> <span class="n">Propagation</span><span class="o">.</span><span class="na">REQUIRED</span><span class="o">)</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">doDemo</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">appDataDAO</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="mi">101</span><span class="o">,</span> <span class="s">"foo"</span><span class="o">);</span>
        <span class="n">someOperation</span><span class="o">();</span>
        <span class="n">appDataDAO</span><span class="o">.</span><span class="na">insert</span><span class="o">(</span><span class="mi">102</span><span class="o">,</span> <span class="s">"bar"</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">void</span> <span class="n">someOperation</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="n">RuntimeException</span><span class="o">(</span><span class="s">"uber error"</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>We may see that <code class="highlighter-rouge">TransactionTemplate</code> is gone, and a new annotation
appeared on <code class="highlighter-rouge">doDemo()</code> method. <code class="highlighter-rouge">@Transactional</code> means that we
want to start transaction when we call this method and commit it
when we return from it. As with <code class="highlighter-rouge">TransactionTemplate</code> if method
trows <code class="highlighter-rouge">RuntimeException</code> transaction will be rolled back.
To <code class="highlighter-rouge">@Transactional</code> we pass a single parameter <code class="highlighter-rouge">Propagation.REQUIRED</code>
that means that we want Spring to use existing transaction if one
is currently active or start a new one otherwise.
If Spring will use already active transaction,
then transaction will be committed or rolled
back not at our method level but at method that started it.
<code class="highlighter-rouge">@Transactional</code> has
plenty of options you may want to consult official documentation to
see them all.</p>

<p>To make <code class="highlighter-rouge">@Transactional</code> work we also need to enable it in Spring
configuration file. First we must add <code class="highlighter-rouge">tx</code> namespace to Spring XML:</p>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="cp">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span>
<span class="nt">&lt;beans</span> <span class="na">xmlns=</span><span class="s">"http://www.springframework.org/schema/beans"</span>
       <span class="na">xmlns:xsi=</span><span class="s">"http://www.w3.org/2001/XMLSchema-instance"</span>
       <span class="na">xmlns:context=</span><span class="s">"http://www.springframework.org/schema/context"</span>
       <span class="na">xmlns:tx=</span><span class="s">"http://www.springframework.org/schema/tx"</span>
       <span class="na">xsi:schemaLocation=</span><span class="s">"http://www.springframework.org/schema/beans</span>
    <span class="err">http://www.springframework.org/schema/beans/spring-beans-3.0.xsd</span>
    <span class="err">http://www.springframework.org/schema/context</span>
    <span class="err">http://www.springframework.org/schema/context/spring-context-3.0.xsd</span>
    <span class="err">http://www.springframework.org/schema/tx</span>
    <span class="err">http://www.springframework.org/schema/tx/spring-tx-2.0.xsd"</span><span class="nt">&gt;</span></code></pre></figure>

<p>And then we must enable annotation driven transactions:</p>

<figure class="highlight"><pre><code class="language-xml" data-lang="xml"><span class="nt">&lt;tx:annotation-driven</span> <span class="na">transaction-manager=</span><span class="s">"transactionManager"</span><span class="nt">/&gt;</span></code></pre></figure>

<p>That’s it! Now we can use transactions without using <code class="highlighter-rouge">TransactionTemplate</code>.</p>

<h4 id="source-code">Source code</h4>

<p><a href="assets/data/2017-01-07/crudest_crud.zip">DOWNLOAD SOURCE CODE</a></p>


	  ]]></description>
	</item>

	<item>
	  <title>Generics in Java</title>
	  <link>//generics-in-java</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2016-12-27T01:00:00+01:00</pubDate>
	  <guid>//generics-in-java</guid>
	  <description><![CDATA[
	     <p>Generics were introduced with Java 6 and quickly
become indispensable tool of every Java programmer.
In this blog post I gathered the most important
facts about generics in Java. After reading this post you
you should be able to comfortable use generics in
your code.</p>

<h4 id="generic-classes">Generic classes</h4>

<p>We can declare generic <code class="highlighter-rouge">Pair</code> class using syntax:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Pair</span><span class="o">&lt;</span><span class="n">E1</span><span class="o">,</span><span class="n">E2</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">E1</span> <span class="n">first</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">E2</span> <span class="n">second</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">Pair</span><span class="o">(</span><span class="n">E1</span> <span class="n">first</span><span class="o">,</span> <span class="n">E2</span> <span class="n">second</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">first</span> <span class="o">=</span> <span class="n">first</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">second</span> <span class="o">=</span> <span class="n">second</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">E1</span> <span class="n">getFirst</span><span class="o">()</span>  <span class="o">{</span> <span class="k">return</span> <span class="n">first</span><span class="o">;</span>  <span class="o">}</span>
    <span class="kd">public</span> <span class="n">E2</span> <span class="n">getSecond</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">second</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>Then we can use <code class="highlighter-rouge">Pair</code> as follows:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// java 6:</span>
<span class="n">Pair</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">p1</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span><span class="n">Integer</span><span class="o">&gt;(</span><span class="s">"foo"</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span>
  
<span class="n">String</span> <span class="n">first</span> <span class="o">=</span> <span class="n">p1</span><span class="o">.</span><span class="na">getFirst</span><span class="o">();</span>
<span class="kt">int</span> <span class="n">second</span> <span class="o">=</span> <span class="n">p1</span><span class="o">.</span><span class="na">getSecond</span><span class="o">();</span>
  
<span class="c1">// java 7+ - using diamond operator &lt;&gt;</span>
<span class="n">Pair</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">p2</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;&gt;(</span><span class="s">"foo"</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span></code></pre></figure>

<p>In Java 7 and later we can let compiler infer values of generic parameters
in <code class="highlighter-rouge">new</code> expression by using diamond operator (<code class="highlighter-rouge">&lt;&gt;</code>).</p>

<h5 id="bounds">Bounds</h5>

<p>We can reduce possible values of generic parameters by using bounds.
For example to reduce values of parameter <code class="highlighter-rouge">T</code> to types that
implement <code class="highlighter-rouge">Serializable</code> interface we can write:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SerializableList</span><span class="o">&lt;</span><span class="n">T</span> <span class="kd">extends</span> <span class="n">Serializable</span><span class="o">&gt;</span> <span class="o">{</span> <span class="o">}</span></code></pre></figure>

<p>When using bounds we are not limited to single type.
For example we may
require that types allowed for <code class="highlighter-rouge">T</code> must extend <code class="highlighter-rouge">MyBaseClass</code> and
implement <code class="highlighter-rouge">Serializable</code> and <code class="highlighter-rouge">Cloneable</code> interfaces:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">SerializableList2</span><span class="o">&lt;</span>
   <span class="n">T</span> <span class="kd">extends</span> <span class="n">MyBaseClass</span> <span class="o">&amp;</span> <span class="n">Serializable</span> <span class="o">&amp;</span> <span class="n">Cloneable</span><span class="o">&gt;</span> <span class="o">{</span> <span class="o">}</span></code></pre></figure>

<p>When we try to use <code class="highlighter-rouge">SerializableList</code> with types that doesn’t
conform to our bounds we will get compile-time error:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// ok</span>
<span class="n">SerializableList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">ints</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SerializableList</span><span class="o">&lt;&gt;();</span>

<span class="c1">// error: type argument java.lang.Object is not within bounds of type-variable T</span>
<span class="n">SerializableList</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">objs</span> <span class="o">=</span> <span class="k">new</span> <span class="n">SerializableList</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;();</span></code></pre></figure>

<h5 id="type-erasure">Type erasure</h5>

<p>In Java generics are implemented via type erasure, this means that
generics exists only in Java source code and not in JVM bytecode.
When Java compiler translates generic classes to bytecode it
substitutes generic parameters in class body with <code class="highlighter-rouge">Object</code>
or if generic parameter has bounds with value of the first bound.
For example our <code class="highlighter-rouge">Pair</code> class would be translated by compiler into:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Pair</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Object</span> <span class="n">first</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">Object</span> <span class="n">second</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">Pair</span><span class="o">(</span><span class="n">Object</span> <span class="n">first</span><span class="o">,</span> <span class="n">Object</span> <span class="n">second</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">first</span> <span class="o">=</span> <span class="n">first</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">second</span> <span class="o">=</span> <span class="n">second</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Object</span> <span class="n">getFirst</span><span class="o">()</span>  <span class="o">{</span> <span class="k">return</span> <span class="n">first</span><span class="o">;</span>  <span class="o">}</span>
    <span class="kd">public</span> <span class="n">Object</span> <span class="n">getSecond</span><span class="o">()</span> <span class="o">{</span> <span class="k">return</span> <span class="n">second</span><span class="o">;</span> <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>Compiler also inserts necessary casts, and converts between primitives 
and wrappers (e.g. between <code class="highlighter-rouge">int</code> and <code class="highlighter-rouge">Integer</code>) - a process
called (un)boxing. Continuing our example:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">pair</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span><span class="n">Integer</span><span class="o">&gt;(</span><span class="s">"foo"</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span>

<span class="n">String</span> <span class="n">first</span> <span class="o">=</span> <span class="n">pair</span><span class="o">.</span><span class="na">getFirst</span><span class="o">();</span>
<span class="kt">int</span> <span class="n">second</span> <span class="o">=</span> <span class="n">pair</span><span class="o">.</span><span class="na">getSecond</span><span class="o">();</span></code></pre></figure>

<p>is translated by compiler into:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">pair</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Pair</span><span class="o">(</span><span class="s">"foo"</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span>

<span class="n">String</span> <span class="n">first</span> <span class="o">=</span> <span class="o">(</span><span class="n">String</span><span class="o">)</span><span class="n">pair</span><span class="o">.</span><span class="na">getFirst</span><span class="o">();</span>
<span class="kt">int</span> <span class="n">second</span> <span class="o">=</span> <span class="o">((</span><span class="n">Integer</span><span class="o">)</span><span class="n">pair</span><span class="o">.</span><span class="na">getSecond</span><span class="o">()).</span><span class="na">intValue</span><span class="o">();</span></code></pre></figure>

<p>Generics were implemented via type erasure to preserve binary
compatibility with pre Java 6 code (binary compatibility means that
your old code will work with generic types out of the box - you
don’t need to change or recompile your legacy libraries).</p>

<h5 id="shortcomings-of-type-erasure">Shortcomings of type erasure</h5>

<p>Type erasure is not the best way to implement generics, and IMHO Java
should take a different approach (e.g. reification).
But Java didn’t and we are stuck with “type erasure” generics.
Below is a list of Java generics shortcomings:</p>

<ul>
  <li>Primitive types like <code class="highlighter-rouge">int</code> cannot be used with generics.
 We may use generics with wrapper types e.g. <code class="highlighter-rouge">Integer</code> but this
 will incur performance penalty caused by casts and boxing/unboxing operations.</li>
  <li>We cannot use generic parameters in declarations of static class
 members. Static class members are shared between all instances of generic
 class regardless of generic parameters values. To stress this fact
 Java allows to access static members only via class name without
 generic parameters:</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">Example</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="c1">// error: non-static type variable T cannot be referenced from a static context</span>
    <span class="c1">// private static T last;</span>

    <span class="kd">private</span> <span class="kd">static</span> <span class="kt">int</span> <span class="n">counter</span> <span class="o">=</span> <span class="mi">0</span><span class="o">;</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="n">printCounter</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"counter: "</span> <span class="o">+</span> <span class="n">counter</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">Example</span><span class="o">()</span> <span class="o">{</span> <span class="n">counter</span><span class="o">++;</span> <span class="o">}</span>
<span class="o">}</span>

<span class="k">new</span> <span class="n">Example</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
<span class="k">new</span> <span class="n">Example</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;();</span>

<span class="c1">// error: not a statement</span>
<span class="c1">// Example&lt;Integer&gt;.printCounter();</span>

<span class="c1">// prints counter: 2</span>
<span class="n">Example</span><span class="o">.</span><span class="na">printCounter</span><span class="o">();</span></code></pre></figure>

<ul>
  <li>Sometimes Java compiler must create synthetic methods
 (in this case called bridge methods) to make overriding
 work with generic types. For example:</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">interface</span> <span class="nc">TestInterface</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="kt">void</span> <span class="n">consume</span><span class="o">(</span><span class="n">T</span> <span class="n">value</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">TestClass</span> <span class="kd">implements</span> <span class="n">TestInterface</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">consume</span><span class="o">(</span><span class="n">Integer</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>after type erasure becomes:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">interface</span> <span class="nc">TestInterface</span> <span class="o">{</span>
	<span class="kt">void</span> <span class="n">consume</span><span class="o">(</span><span class="n">Object</span> <span class="n">value</span><span class="o">);</span>
<span class="o">}</span>

<span class="kd">class</span> <span class="nc">TestClass</span> <span class="kd">implements</span> <span class="n">TestInterface</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">consume</span><span class="o">(</span><span class="n">Integer</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>and we can see that <code class="highlighter-rouge">TestClass</code> no longer overrides
<code class="highlighter-rouge">consume</code> method from <code class="highlighter-rouge">TestInterface</code>. To solve this
problem compiler adds following method to <code class="highlighter-rouge">TestClass</code>:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">class</span> <span class="nc">TestClass</span> <span class="kd">implements</span> <span class="n">TestInterface</span> <span class="o">{</span>
   <span class="c1">// bridge method added by compiler:</span>
   <span class="nd">@Override</span> <span class="kd">public</span> <span class="kt">void</span> <span class="n">consume</span><span class="o">(</span><span class="n">Object</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span>
	 <span class="k">this</span><span class="o">.</span><span class="na">consume</span><span class="o">((</span><span class="n">Integer</span><span class="o">)</span><span class="n">value</span><span class="o">);</span>
   <span class="o">}</span>

   <span class="kd">public</span> <span class="kt">void</span> <span class="n">consume</span><span class="o">(</span><span class="n">Integer</span> <span class="n">value</span><span class="o">)</span> <span class="o">{</span> <span class="o">...</span> <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<ul>
  <li>Generics don’t work well with overloading, for example following
 overloads are forbidden:</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">check</span><span class="p">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">ints</span><span class="o">)</span> <span class="o">{</span> <span class="o">}</span>
<span class="kd">public</span> <span class="kt">void</span> <span class="nf">check</span><span class="p">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">strings</span><span class="o">)</span> <span class="o">{</span> <span class="o">}</span></code></pre></figure>

<p>because after type erasure both methods have exactly the same signature</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kt">void</span> <span class="nf">check</span><span class="p">(</span><span class="n">List</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span> <span class="o">}</span></code></pre></figure>

<p>Similarly we cannot implement the same interface twice
with different generic parameters. Again type erasure is our culprit:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">interface</span> <span class="nc">Test</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="o">{</span> <span class="o">}</span>
<span class="c1">// error: Test cannot be inherited with </span>
<span class="c1">//	  different arguments: &lt;Integer&gt; and &lt;String&gt;</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">TestImpl</span> 
	<span class="kd">implements</span> <span class="n">Test</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;,</span> <span class="n">Test</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="o">{</span> <span class="o">}</span></code></pre></figure>

<h5 id="raw-types-and-unchecked-warnings">Raw types and unchecked warnings</h5>

<p>To maintain backward compatibility Java allows us to use generic types
without specifying generic parameters. Such types are called raw types,
for example:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// preferred usage of generics:</span>
<span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">typedList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>

<span class="c1">// raw type:</span>
<span class="n">List</span> <span class="n">rawList</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;();</span>
<span class="n">rawList</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"foo"</span><span class="o">);</span> <span class="c1">// unchecked warning</span></code></pre></figure>

<p>Raw types can be treated like generic types after type erasure.
Raw types should only be used to interact with legacy code.</p>

<p>When working with raw types compiler may generate an unchecked warning:</p>

<figure class="highlight"><pre><code class="language-nohighlight" data-lang="nohighlight">warning: unchecked call to add(E) as a member of the raw type java.util.List</code></pre></figure>

<p>This warning means that compiler is not sure if we used generic type
correctly and in case that we didn’t we should expect <code class="highlighter-rouge">ClassCastException</code>
at runtime. For example:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">ints</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>

  <span class="n">List</span> <span class="n">rawList</span> <span class="o">=</span> <span class="n">ints</span><span class="o">;</span>
  <span class="n">legacyCode</span><span class="o">(</span><span class="n">rawList</span><span class="o">);</span>

  <span class="kt">int</span> <span class="n">x</span> <span class="o">=</span> <span class="n">ints</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span> <span class="c1">// ClassCastException</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">legacyCode</span><span class="p">(</span><span class="n">List</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="s">"foo"</span><span class="o">);</span> <span class="c1">// unchecked warning</span>
<span class="o">}</span></code></pre></figure>

<p>The problem here is that the client of <code class="highlighter-rouge">legacyCode</code> expected that <code class="highlighter-rouge">legacyCode</code>
will add integer to provided list. A simple solution is to use
<code class="highlighter-rouge">List&lt;Object&gt;</code> instead of <code class="highlighter-rouge">List&lt;Integer&gt;</code>
if <code class="highlighter-rouge">legacyCode</code> may add different types to list.
Notice also that line which generated unchecked warning didn’t throw
any exception, exception was thrown later when the
client wanted to access list element.</p>

<p>We may suppress unchecked warning at the method or class level by using
<code class="highlighter-rouge">@SuppressWarnings("unchecked")</code> annotation.</p>

<h4 id="generic-methods">Generic methods</h4>

<p>We can declare generic method as follows:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">E1</span><span class="o">,</span><span class="n">E2</span><span class="o">&gt;</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">E1</span><span class="o">,</span><span class="n">E2</span><span class="o">&gt;</span> <span class="n">pair</span><span class="o">(</span><span class="n">E1</span> <span class="n">first</span><span class="o">,</span> <span class="n">E2</span> <span class="n">second</span><span class="o">)</span> <span class="o">{</span>
   <span class="k">return</span> <span class="k">new</span> <span class="n">Pair</span><span class="o">&lt;</span><span class="n">E1</span><span class="o">,</span><span class="n">E2</span><span class="o">&gt;(</span><span class="n">first</span><span class="o">,</span> <span class="n">second</span><span class="o">);</span>
<span class="o">}</span></code></pre></figure>

<p>Generic methods are invoked like ordinary methods:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">Pair</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">p1</span> <span class="o">=</span> <span class="n">pair</span><span class="o">(</span><span class="s">"foo"</span><span class="o">,</span> <span class="mi">10</span><span class="o">);</span></code></pre></figure>

<p>In most cases compiler will be able to infer proper values of
generic parameters. When it won’t we can override compiler by
explicitly specifying generic parameters values:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">ClassName</span><span class="o">.&lt;</span><span class="n">String</span><span class="o">,</span><span class="n">Number</span><span class="o">&gt;</span><span class="n">staticMethod</span><span class="o">(</span><span class="n">arg1</span><span class="o">,</span> <span class="n">arg2</span><span class="o">);</span>
<span class="c1">// or</span>
<span class="k">this</span><span class="o">.&lt;</span><span class="n">String</span><span class="o">,</span><span class="n">Integer</span><span class="o">&gt;</span><span class="n">instanceMethod</span><span class="o">(</span><span class="n">arg1</span><span class="o">,</span> <span class="n">arg2</span><span class="o">);</span>

<span class="c1">// syntax error:</span>
<span class="c1">// &lt;String,Integer&gt;method(arg1, arg2);</span></code></pre></figure>

<h4 id="wildcards">Wildcards</h4>

<p>Let’s consider method that copies elements from one list to
another:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">copy</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">dest</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">src</span><span class="o">)</span> <span class="o">{</span>
   <span class="k">for</span> <span class="o">(</span><span class="n">T</span> <span class="nl">element:</span> <span class="n">src</span><span class="o">)</span> <span class="o">{</span>
	  <span class="n">dest</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">element</span><span class="o">);</span>
   <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>It works perfectly with lists of integers:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">src</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">);</span>
<span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">dest</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
<span class="n">copy</span><span class="o">(</span><span class="n">dest</span><span class="o">,</span> <span class="n">src</span><span class="o">);</span></code></pre></figure>

<p>But fails when we want to copy integers to list of numbers:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">src</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">);</span>
<span class="n">List</span><span class="o">&lt;</span><span class="n">Number</span><span class="o">&gt;</span> <span class="n">nums</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
<span class="c1">// error: method cannot be applied to given types</span>
<span class="n">copy</span><span class="o">(</span><span class="n">nums</span><span class="o">,</span> <span class="n">src</span><span class="o">);</span></code></pre></figure>

<p>We may fix method by adding second generic parameter:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">D</span><span class="o">,</span><span class="n">S</span> <span class="kd">extends</span> <span class="n">D</span><span class="o">&gt;</span>
<span class="kt">void</span> <span class="nf">copy</span><span class="p">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">D</span><span class="o">&gt;</span> <span class="n">dest</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">S</span><span class="o">&gt;</span> <span class="n">src</span><span class="o">)</span> <span class="o">{</span>
   <span class="k">for</span> <span class="o">(</span><span class="n">S</span> <span class="nl">element:</span> <span class="n">src</span><span class="o">)</span> <span class="o">{</span>
	  <span class="n">dest</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">element</span><span class="o">);</span>
   <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>This is so common situation that Java introduces a shortcut:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">copy</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">dest</span><span class="o">,</span> <span class="n">List</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">src</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">for</span> <span class="o">(</span><span class="n">T</span> <span class="nl">element:</span> <span class="n">src</span><span class="o">)</span> <span class="o">{</span>
	  <span class="n">dest</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">element</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>Type <code class="highlighter-rouge">List&lt;? extends T&gt;</code> means that this is a list of elements that
extends or implements type <code class="highlighter-rouge">T</code>.</p>

<p>Wildcards allows us to reduce number of required generic parameters and
made method declarations more clear, for example:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kt">boolean</span> <span class="n">isNullOrEmpty</span><span class="o">(</span><span class="n">Collection</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">coll</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">return</span> <span class="n">coll</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">coll</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">();</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">isNullOrEmptyWildcards</span><span class="p">(</span><span class="n">Collection</span><span class="o">&lt;?&gt;</span> <span class="n">coll</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">return</span> <span class="n">coll</span> <span class="o">==</span> <span class="kc">null</span> <span class="o">||</span> <span class="n">coll</span><span class="o">.</span><span class="na">isEmpty</span><span class="o">();</span>
<span class="o">}</span></code></pre></figure>

<p>Here <code class="highlighter-rouge">Collections&lt;?&gt;</code> means collection of elements of some certain type 
e.g. this may be
<code class="highlighter-rouge">Collection&lt;Object&gt;</code> or <code class="highlighter-rouge">Collection&lt;MyClass&gt;</code>.</p>

<h5 id="super-bound">super bound</h5>

<p><code class="highlighter-rouge">super</code> bound may be used only with wildcards.
<code class="highlighter-rouge">super</code> bound restricts values of wildcard to given class
and all of its superclasses, for example method:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kt">void</span> <span class="nf">process</span><span class="p">(</span><span class="n">List</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">Integer</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">)</span> <span class="o">{</span> <span class="o">}</span></code></pre></figure>

<p>can only be used with <code class="highlighter-rouge">List&lt;Integer&gt;</code>, <code class="highlighter-rouge">List&lt;Number&gt;</code> and <code class="highlighter-rouge">List&lt;Object&gt;</code>.
Calling method with <code class="highlighter-rouge">List&lt;String&gt;</code> results in compile time error.</p>

<p>While <code class="highlighter-rouge">extends</code> bound is useful when we want to get values
from generic type instance,
<code class="highlighter-rouge">super</code> bound is needed when we want to pass values to generic type instance.
For example:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">produceConsume</span><span class="o">(</span>
	  <span class="n">Producer</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">producer</span><span class="o">,</span>
	  <span class="n">Consumer</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">T</span><span class="o">&gt;</span> <span class="n">consumer</span><span class="o">)</span>
<span class="o">{</span>
  <span class="k">for</span><span class="o">(;;)</span> <span class="o">{</span>
	  <span class="n">T</span> <span class="n">value</span> <span class="o">=</span> <span class="n">producer</span><span class="o">.</span><span class="na">produce</span><span class="o">();</span>
	  <span class="n">consumer</span><span class="o">.</span><span class="na">consume</span><span class="o">(</span><span class="n">value</span><span class="o">);</span>
  <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>Here <code class="highlighter-rouge">Producer</code> may produce type <code class="highlighter-rouge">T</code> or more derived type, and <code class="highlighter-rouge">Consumer</code>
may consume type <code class="highlighter-rouge">T</code> or more general type e.g. <code class="highlighter-rouge">Object</code>. Thanks to
wildcards we may use <code class="highlighter-rouge">produceConsume</code> with <code class="highlighter-rouge">Producer&lt;Integer&gt;</code> and
<code class="highlighter-rouge">Consumer&lt;Object&gt;</code>.</p>

<p>NOTE: Java compiler tries to infer the most specific type for
generic parameters. In call to <code class="highlighter-rouge">produceConsume</code> with <code class="highlighter-rouge">Producer&lt;Integer&gt;</code>
and <code class="highlighter-rouge">Consumer&lt;Object&gt;</code> <code class="highlighter-rouge">Integer</code> will be used as <code class="highlighter-rouge">T</code> parameter value.</p>

<h5 id="wildcard-capture">Wildcard capture</h5>

<p>Let’s say that we want to create a method that swaps elements of
the list, we may write:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="n">List</span><span class="o">&lt;?&gt;</span> <span class="n">list</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i2</span><span class="o">)</span> <span class="o">{</span>
   <span class="c1">// doesn't compile</span>
   <span class="o">?</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i1</span><span class="o">);</span>
   <span class="n">list</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">i1</span><span class="o">,</span> <span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i2</span><span class="o">));</span>
   <span class="n">list</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">i2</span><span class="o">,</span> <span class="n">tmp</span><span class="o">);</span>
<span class="o">}</span></code></pre></figure>

<p>Unfortunately above code doesn’t compile. We may either
introduce generic parameter to method signature or create
a helper method with generic parameter that 
will “capture” wildcard value:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">swap</span><span class="p">(</span><span class="n">List</span><span class="o">&lt;?&gt;</span> <span class="n">list</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i2</span><span class="o">)</span> <span class="o">{</span>
   <span class="n">swapImpl</span><span class="o">(</span><span class="n">list</span><span class="o">,</span> <span class="n">i1</span><span class="o">,</span> <span class="n">i2</span><span class="o">);</span>
<span class="o">}</span>
<span class="kd">private</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="kt">void</span> <span class="n">swapImpl</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">list</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i1</span><span class="o">,</span> <span class="kt">int</span> <span class="n">i2</span><span class="o">)</span> <span class="o">{</span>
   <span class="n">T</span> <span class="n">tmp</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i1</span><span class="o">);</span>
   <span class="n">list</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">i1</span><span class="o">,</span> <span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">i2</span><span class="o">));</span>
   <span class="n">list</span><span class="o">.</span><span class="na">set</span><span class="o">(</span><span class="n">i2</span><span class="o">,</span> <span class="n">tmp</span><span class="o">);</span>
<span class="o">}</span></code></pre></figure>

<p>Introducing generic parameter is always better solution than
using wildcard capture. I only mention above technique because
it is often used in Java Collection Framework.</p>

<h4 id="covariance-and-contravariance">Covariance and contravariance</h4>

<p>With Java arrays we may write:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">String</span><span class="o">[]</span> <span class="n">strings</span> <span class="o">=</span> <span class="o">{</span> <span class="s">"foo"</span><span class="o">,</span> <span class="s">"bar"</span> <span class="o">};</span>
<span class="n">Object</span><span class="o">[]</span> <span class="n">objects</span> <span class="o">=</span> <span class="n">strings</span><span class="o">;</span></code></pre></figure>

<p>We say that Java arrays are covariant.</p>

<p>Generics in Java are invariant this means that below
code doesn’t compile:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">strings</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"foo"</span><span class="o">,</span> <span class="s">"bar"</span><span class="o">);</span>
<span class="c1">// error: incompatible types</span>
<span class="n">List</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">objects</span> <span class="o">=</span> <span class="n">strings</span><span class="o">;</span></code></pre></figure>

<p>We must tread <code class="highlighter-rouge">List&lt;String&gt;</code> and <code class="highlighter-rouge">List&lt;Object&gt;</code> as two
distinct types.</p>

<p>Still we may use wildcards to refer to either
<code class="highlighter-rouge">List&lt;String&gt;</code> or <code class="highlighter-rouge">List&lt;Object&gt;</code>:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">List</span><span class="o">&lt;</span><span class="n">String</span><span class="o">&gt;</span> <span class="n">strings</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"foo"</span><span class="o">,</span> <span class="s">"bar"</span><span class="o">);</span>
<span class="n">List</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">objects</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="kc">true</span><span class="o">,</span> <span class="mi">1</span><span class="o">,</span> <span class="s">"foo"</span><span class="o">);</span>

<span class="n">List</span><span class="o">&lt;?&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">strings</span><span class="o">;</span>
<span class="n">list</span> <span class="o">=</span> <span class="n">objects</span><span class="o">;</span></code></pre></figure>

<p><code class="highlighter-rouge">List&lt;?&gt;</code> should be treated as superclass of any <code class="highlighter-rouge">List&lt;T&gt;</code>,
because it represents list of objects of some certain type.</p>

<p>We can’t do much with <code class="highlighter-rouge">List&lt;?&gt;</code>, we can only get <code class="highlighter-rouge">Objects</code> from it,
add <code class="highlighter-rouge">null</code>s and ask for size (operations allowed for any list):</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">List</span><span class="o">&lt;?&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="n">strings</span><span class="o">;</span>

<span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
<span class="n">Object</span> <span class="n">value</span> <span class="o">=</span> <span class="n">list</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span>
<span class="n">list</span><span class="o">.</span><span class="na">size</span><span class="o">();</span></code></pre></figure>

<p>Operations on <code class="highlighter-rouge">List&lt;?&gt;</code> are limited because we don’t know what types list contains.
We may limit range of possible types with bounds thus gaining
more functionality:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">List</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">Number</span><span class="o">&gt;</span> <span class="n">numbers</span> <span class="o">=</span> <span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="mf">1.2</span><span class="o">,</span> <span class="mf">3.5</span><span class="o">);</span>
<span class="n">Number</span> <span class="n">num</span> <span class="o">=</span> <span class="n">numbers</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="mi">0</span><span class="o">);</span></code></pre></figure>

<p>Now compiler knows that list elements are at least numbers so
we may assign result of <code class="highlighter-rouge">get()</code> to variable of type <code class="highlighter-rouge">Number</code>.
Still we are not able to put anything beyond <code class="highlighter-rouge">null</code> into list,
because we don’t know if this is a list of doubles or a list of integers.</p>

<p>When we want to add elements to list we should use <code class="highlighter-rouge">super</code> bound:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">List</span><span class="o">&lt;?</span> <span class="kd">super</span> <span class="n">Number</span><span class="o">&gt;</span> <span class="n">numbers</span> <span class="o">=</span>
   <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;(</span><span class="n">Arrays</span><span class="o">.</span><span class="na">asList</span><span class="o">(</span><span class="s">"foo"</span><span class="o">,</span> <span class="kc">true</span><span class="o">));</span>

<span class="n">numbers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mi">3</span><span class="o">);</span>
<span class="n">numbers</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="mf">3.2</span><span class="o">);</span></code></pre></figure>

<p>Now compiler knows that list holds numbers or elements more general
than numbers e.g. objects, so adding number to list is safe.</p>

<h4 id="how-to-use-generic-types-with-instanceof-and-class">How to use generic types with <code class="highlighter-rouge">instanceof</code> and <code class="highlighter-rouge">class</code></h4>

<p>Because of type erasure types <code class="highlighter-rouge">List&lt;Object&gt;</code> and <code class="highlighter-rouge">List&lt;Integer&gt;</code> are
indistinguishable to JVM. To check if value is instance of <code class="highlighter-rouge">List</code> we
may write:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">Object</span> <span class="n">value</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>

<span class="k">if</span> <span class="o">(</span><span class="n">value</span> <span class="k">instanceof</span> <span class="n">List</span><span class="o">&lt;?&gt;)</span> <span class="o">{</span>
   <span class="c1">// do something</span>
<span class="o">}</span></code></pre></figure>

<p>Similarly types <code class="highlighter-rouge">List&lt;Object&gt;</code> and <code class="highlighter-rouge">List&lt;Integer&gt;</code> are represented
by the same class token:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;</span> <span class="n">integers</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;();</span>
<span class="n">List</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">objects</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">Object</span><span class="o">&gt;();</span>

<span class="n">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">List</span><span class="o">&gt;</span> <span class="n">integersClazz</span> <span class="o">=</span> <span class="n">integers</span><span class="o">.</span><span class="na">getClass</span><span class="o">();</span>
<span class="n">Class</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">List</span><span class="o">&gt;</span> <span class="n">objectsClazz</span> <span class="o">=</span> <span class="n">objects</span><span class="o">.</span><span class="na">getClass</span><span class="o">();</span>
<span class="n">Class</span><span class="o">&lt;</span><span class="n">ArrayList</span><span class="o">&gt;</span> <span class="n">arrayListClazz</span> <span class="o">=</span> <span class="n">ArrayList</span><span class="o">.</span><span class="na">class</span><span class="o">;</span>

<span class="c1">// true</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">integersClazz</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">objectsClazz</span><span class="o">));</span>
<span class="c1">// true</span>
<span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">integersClazz</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">arrayListClazz</span><span class="o">));</span></code></pre></figure>

<p>Notice that in instance test we should use type with wildcard (<code class="highlighter-rouge">List&lt;?&gt;</code>) but to
get class token we should use raw type (<code class="highlighter-rouge">ArrayList.class</code>).</p>

<h4 id="generics-and-arrays">Generics and arrays</h4>

<p>Let’s consider this innocent looking code:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span><span class="o">[]</span> <span class="n">toArray</span><span class="o">(</span><span class="n">T</span> <span class="n">v1</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">T</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="o">(</span><span class="n">T</span><span class="o">[])</span> <span class="k">new</span> <span class="n">Object</span><span class="o">[</span><span class="mi">1</span><span class="o">];</span> <span class="c1">// unchecked warning</span>
  <span class="n">array</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">v1</span><span class="o">;</span>
  <span class="k">return</span> <span class="n">array</span><span class="o">;</span>
<span class="o">}</span></code></pre></figure>

<p>Calling this method results in <code class="highlighter-rouge">ClassCastException</code>:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">String</span><span class="o">[]</span> <span class="n">s</span> <span class="o">=</span> <span class="n">toArray</span><span class="o">(</span><span class="s">"foo"</span><span class="o">);</span> <span class="c1">// class cast exception</span></code></pre></figure>

<p>Because we cannot assign <code class="highlighter-rouge">Object[]</code> instance to <code class="highlighter-rouge">String[]</code> variable.
The source of the trouble is type erasure again.
Because value of parameter <code class="highlighter-rouge">T</code> is not accessible at runtime
we don’t know what array we should create - should it be array of
objects or maybe array of strings. We may fix this method by passing
additional parameter that will represent required type of array elements:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">T</span><span class="o">[]</span> <span class="n">toArray</span><span class="o">(</span><span class="n">T</span> <span class="n">v1</span><span class="o">,</span> <span class="n">Class</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">type</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">T</span><span class="o">[]</span> <span class="n">array</span> <span class="o">=</span> <span class="o">(</span><span class="n">T</span><span class="o">[])</span> <span class="n">Array</span><span class="o">.</span><span class="na">newInstance</span><span class="o">(</span><span class="n">type</span><span class="o">,</span> <span class="mi">1</span><span class="o">);</span>
  <span class="n">array</span><span class="o">[</span><span class="mi">0</span><span class="o">]</span> <span class="o">=</span> <span class="n">v1</span><span class="o">;</span>
  <span class="k">return</span> <span class="n">array</span><span class="o">;</span>
<span class="o">}</span>

<span class="n">String</span><span class="o">[]</span> <span class="n">s</span> <span class="o">=</span> <span class="n">toArray</span><span class="o">(</span><span class="s">"foo"</span><span class="o">,</span> <span class="n">String</span><span class="o">.</span><span class="na">class</span><span class="o">);</span></code></pre></figure>

<p>Now method works as expected but is cumbersome to use.</p>

<p>Another problem with arrays and generics is that we cannot
create array with generic elements - type erasure is culprit again:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="c1">// error: generic array creation</span>
<span class="c1">// List&lt;Integer&gt;[] lists = new List&lt;Integer&gt;[3];</span>

<span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;[]</span> <span class="n">lists</span> <span class="o">=</span> <span class="o">(</span><span class="n">List</span><span class="o">&lt;</span><span class="n">Integer</span><span class="o">&gt;[])</span> <span class="k">new</span> <span class="n">List</span><span class="o">[</span><span class="mi">3</span><span class="o">];</span></code></pre></figure>

<p>To create array of generic types we must use raw type and cast.</p>

<p>To sum up: you should avoid mixing arrays and generics.</p>

<h4 id="generics-and-varargs">Generics and varargs</h4>

<p>Java varargs methods are implemented using arrays, when we try
to use varargs with generics:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">static</span> <span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">concat</span><span class="o">(</span><span class="n">List</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">T</span><span class="o">&gt;...</span> <span class="n">lists</span><span class="o">)</span> <span class="o">{</span>
   <span class="n">List</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;</span> <span class="n">concatenated</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;</span><span class="n">T</span><span class="o">&gt;();</span>

   <span class="k">for</span> <span class="o">(</span><span class="n">List</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">T</span><span class="o">&gt;</span> <span class="nl">l:</span> <span class="n">lists</span><span class="o">)</span> <span class="o">{</span>
	  <span class="n">concatenated</span><span class="o">.</span><span class="na">addAll</span><span class="o">(</span><span class="n">l</span><span class="o">);</span>
   <span class="o">}</span>

   <span class="k">return</span> <span class="n">concatenated</span><span class="o">;</span>
<span class="o">}</span></code></pre></figure>

<p>compiler issues a warning:</p>

<figure class="highlight"><pre><code class="language-nohighlight" data-lang="nohighlight">warning: unchecked generic array creation for varargs parameter</code></pre></figure>

<p>Generic varargs suffer from the same problems as generic arrays.
If we are sure that our code is safe,
we may use <code class="highlighter-rouge">@SafeVarargs</code> annotation to suppress this warning.</p>

<h4 id="additional-resources">Additional resources</h4>

<p>If you want to know more about generics check resources below:</p>

<ul>
  <li><a href="http://a.co/5oMY1hY">Java Generics and Collections: Speed Up the Java Development Process</a></li>
  <li><a href="http://www.angelikalanger.com/GenericsFAQ/JavaGenericsFAQ.html">Java Generics FAQ</a></li>
</ul>


	  ]]></description>
	</item>


</channel>
</rss>
