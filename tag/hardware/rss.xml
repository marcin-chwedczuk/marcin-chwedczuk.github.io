<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>marcin-chwedczuk.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>A place where I share my thoughts about programming.</description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Connecting to Raspberry PI from Linux via UART</title>
	  <link>//connecting-to-raspberry-pi-via-uart</link>
	  <author></author>
	  <pubDate>2020-07-07T02:00:01+02:00</pubDate>
	  <guid>//connecting-to-raspberry-pi-via-uart</guid>
	  <description><![CDATA[
	     <p>In this blog post we will learn how to connect to a Raspberry PI via UART
(think serial terminal).
Before we begin we need to get a cheap <code class="highlighter-rouge">USB &lt;-&gt; UART</code> converter.
Make sure that the converter supports 3.3V voltage.
Most of the converters support other voltages e.g. 5V and you
can select which voltage you want by moving a jumper.
If your converter has such a jumper make sure that it is in 3.3V position.
<img src="assets/images/2020-07-07/converter1.jpeg" alt="Converter" /></p>

<p>Although converters can have from four up to six pins, we will only need three:
GND, RXD and TXD. We should connect RXD pin on the converter to TXD pin on
the Raspberry PI and similarly TXD pin to the Raspberry’s RXD pin (crossover).
We also need to connect the converter GND pin to Raspberry’s Ground pin.
Do NOT connect VCC (or VCCIO) pin, we only need three wires.
You can find the Raspberry PI pinout in the official docs: 
<a href="https://www.raspberrypi.org/documentation/usage/gpio/">https://www.raspberrypi.org/documentation/usage/gpio/</a> - look at the five top left pins, the first two
are +5V, then we have Ground, TXD and RXD pins.
<img src="assets/images/2020-07-07/connection.jpeg" alt="Connection" /></p>

<p>Next thing that we need to do is to enable UART support in Raspbian, which for
security reasons is disabled by default.
We need to change <code class="highlighter-rouge">config.txt</code> file on the <code class="highlighter-rouge">/boot</code> partition
on the Raspberry PI SD card. We need to add <code class="highlighter-rouge">enable_uart=1</code> line
before <code class="highlighter-rouge">[pi4]</code> section (or at the end of the file if the section is not present).</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">(some lines skipped)

# Enable audio (loads snd_bcm2835)
dtparam=audio=on

# ADD THIS LINE HERE
enable_uart=1

[pi4]
# Enable DRM VC4 V3D driver on top of the dispmanx display stack
dtoverlay=vc4-fkms-v3d
max_framebuffers=2</code></pre></figure>

<p>When we connect the converter to both Raspberry PI and the computer it should
be recognized by the system and a new device named <code class="highlighter-rouge">ttyUSBn</code> (where n is a number e.g. <code class="highlighter-rouge">ttyUSB0</code>)
should appear under <code class="highlighter-rouge">/dev</code> directory.
As always with all things hardware <code class="highlighter-rouge">dmesg</code> is your friend, so you can either <code class="highlighter-rouge">dmesg | tail -n 100</code> or
<code class="highlighter-rouge">dmesg | grep tty</code> to find out what exactly device was created and if there where any problems.
On my system I saw the following messages:</p>

<figure class="highlight"><pre><code class="language-nohighlight" data-lang="nohighlight">$ dmesg | grep tty
[22562.037811] usb 3-10: cp210x converter now attached to ttyUSB0</code></pre></figure>

<p>There are a lot of different programs on Linux that you can use to open a session.
We will concentrate on only two of them, <code class="highlighter-rouge">putty</code> which is a GUI tool and
<code class="highlighter-rouge">screen</code> which is a pure command line utility.</p>

<p>Let’s start with <code class="highlighter-rouge">putty</code>, first we need to configure it to read from <code class="highlighter-rouge">/dev/ttyUSB0</code> device.
<img src="assets/images/2020-07-07/puttyconf.png" alt="Putty Config" /></p>

<p>To avoid putting this info every time, when you want to connect we should save it as an profile
(put a name and click Save button).
<img src="assets/images/2020-07-07/profile.png" alt="Putty Profile" /></p>

<p>It is also worth checking other settings like the font, keyboard or the default terminal size:
<img src="assets/images/2020-07-07/puttyk.png" alt="Putty Other Settings 1" />
<img src="assets/images/2020-07-07/puttyf.png" alt="Putty Other Settings 2" /></p>

<p>OK its time to test our configuration. Open putty and load
previously saved profile, click Open and restart Raspberry PI.
You should be able to see boot messages. Try pressing Enter if the console appears to hang.
<img src="assets/images/2020-07-07/boot.png" alt="Boot messages" /></p>

<p>After we login it is easy to notice that there is no color support out of the box
(at least on Raspbian Lite).
This can be easily changed by selecting a different terminal type in the terminal session:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">export </span><span class="nv">TERM</span><span class="o">=</span>xterm-256color</code></pre></figure>

<p><img src="assets/images/2020-07-07/colors.png" alt="Color support" /></p>

<p>Another problem is that we are stuck with a fixed terminal size.
If your Raspberry PI has xterm package installed (not available on Lite version)
you can use <code class="highlighter-rouge">resize</code> command after you resize putty’s window.
Otherwise you may use this script created by @pkh 
<a href="https://unix.stackexchange.com/a/283206">https://unix.stackexchange.com/a/283206</a>:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">resize<span class="o">()</span> <span class="o">{</span>
  <span class="nv">old</span><span class="o">=</span><span class="k">$(</span>stty <span class="nt">-g</span><span class="k">)</span>
  stty raw <span class="nt">-echo</span> min 0 <span class="nb">time </span>5

  <span class="nb">printf</span> <span class="s1">'\0337\033[r\033[999;999H\033[6n\0338'</span> <span class="o">&gt;</span> /dev/tty
  <span class="nv">IFS</span><span class="o">=</span><span class="s1">'[;R'</span> <span class="nb">read</span> <span class="nt">-r</span> _ rows cols _ &lt; /dev/tty

  stty <span class="s2">"</span><span class="nv">$old</span><span class="s2">"</span>
  stty cols <span class="s2">"</span><span class="nv">$cols</span><span class="s2">"</span> rows <span class="s2">"</span><span class="nv">$rows</span><span class="s2">"</span>
<span class="o">}</span></code></pre></figure>

<p>Just copy and paste this code into the session and then enter <code class="highlighter-rouge">resize</code> (use Ctrl+Shift+Insert to paste in <code class="highlighter-rouge">putty</code>).
After the <code class="highlighter-rouge">resize</code>, commands like <code class="highlighter-rouge">top</code> or <code class="highlighter-rouge">htop</code> should occupy the entire terminal window.
<img src="assets/images/2020-07-07/beforeR.png" alt="Before resize" />
After resize becomes:
<img src="assets/images/2020-07-07/afterR.png" alt="After resize" /></p>

<p>You may want to add both the <code class="highlighter-rouge">resize</code> function and <code class="highlighter-rouge">TERM</code> environment variable to <code class="highlighter-rouge">~/.profile</code>
to avoid copy-pasting them every time.</p>

<p>If you don’t use GUI at all you may use <code class="highlighter-rouge">screen</code>. <code class="highlighter-rouge">screen</code> was designed to work with SSH sessions,
it helps you keep your programs running even after you end your SSH connection.
Most people these day use <code class="highlighter-rouge">tmux</code> as a modern alternative, unfortunately <code class="highlighter-rouge">tmux</code> does not
support serial communications so we are stuck with <code class="highlighter-rouge">screen</code> (which TBH I am not very familiar with).</p>

<p>We start <code class="highlighter-rouge">screen</code> using the following command:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">screen /dev/ttyUSB0 115200</code></pre></figure>

<p>To exit screen (which is on the same level of difficultly as exiting Vim) 
press Ctrl+A followed by \ (yup backslash).
A question will appear at the left bottom of the screen, answer y.</p>

<p>If <code class="highlighter-rouge">screen</code>s window appears blank, press enter to reprint the prompt.
For some reason programs like <code class="highlighter-rouge">htop</code> tend to look worse under <code class="highlighter-rouge">screen</code>
(assuming that you set <code class="highlighter-rouge">TERM</code> variable and did <code class="highlighter-rouge">resize</code>). Probably I am missing some extra setup,
nevertheless they are usable.
<img src="assets/images/2020-07-07/screen.png" alt="screen" /></p>

<p>Last but not least, for fans of ancient <code class="highlighter-rouge">minicom</code> 
if you want to connect via <code class="highlighter-rouge">minicom</code>
remember to disable “Hardware Control Flow” option 
(they use RTS and CTS lines present on some converters that we do not use).</p>


	  ]]></description>
	</item>


</channel>
</rss>
