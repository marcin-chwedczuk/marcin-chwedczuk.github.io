<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>marcin-chwedczuk.github.io/</title>
   
   <link></link>
   <description>A place where I share my thoughts about programming.</description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Don't ask me about Singletons</title>
	  <link>//dont-ask-me-about-singletons</link>
	  <author></author>
	  <pubDate>2017-09-30T02:00:00+02:00</pubDate>
	  <guid>//dont-ask-me-about-singletons</guid>
	  <description><![CDATA[
	     <p>Some time ago I attended a job interview for C# developer position in Warsaw.
One of the tasks that I had to perform was to implement a singleton pattern
in C#. With a bit of help from my interviewer
(I didn’t get a cup of coffee that morning) I arrived at a solution:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">Singleton</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">static</span> <span class="n">Singleton</span> <span class="n">_instance</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
    <span class="k">private</span> <span class="k">static</span> <span class="kt">object</span> <span class="n">_lock</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">object</span><span class="p">();</span>
    
    <span class="k">public</span> <span class="k">static</span> <span class="n">Singleton</span> <span class="n">Instance</span> <span class="p">{</span>
        <span class="k">get</span> <span class="p">{</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">_instance</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">lock</span><span class="p">(</span><span class="n">_lock</span><span class="p">)</span> <span class="p">{</span>
                    <span class="k">if</span> <span class="p">(</span><span class="n">_instance</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
                        <span class="n">_instance</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Singleton</span><span class="p">();</span>    
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
            <span class="k">return</span> <span class="n">_instance</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="k">private</span> <span class="nf">Singleton</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Singleton()"</span><span class="p">);</span>   
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">DoJob</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Singleton::DoJob()"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>We both admitted that this was a good enough solution 
and we moved to other questions.</p>

<p>Later the same day I had some spare time
at launch break so I started to think about my solution again.
Is it really the best way to create singletons in C#, I asked myself.
As it happens answer to my question was contained on
“C# in Depth” book 
<a href="http://csharpindepth.com/Articles/General/Singleton.aspx#dcl">accompanying website</a>.
There Jon Skeet commented on above solution:</p>

<blockquote>
  <p>Without any memory barriers, it’s broken in the ECMA CLI specification too. It’s possible that under the .NET 2.0 memory model (which is stronger than the ECMA spec) it’s safe, but I’d rather not rely on those stronger semantics, especially if there’s any doubt as to the safety. Making the instance variable volatile can make it work, as would explicit memory barrier calls, although in the latter case even experts can’t agree exactly which barriers are required. I tend to try to avoid situations where experts don’t agree what’s right and what’s wrong!</p>

  <p>– Jon Skeet</p>
</blockquote>

<p>In practice this means that it is not strictly required by .NET specification
that this implementation should work. Currently it works on .NET standard,
and I guess Microsoft folks will also make sure that it 
works on .NET Core - but we cannot be 100% sure.</p>

<p>In the same article Jon Skeet proposes a better pattern:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">sealed</span> <span class="k">class</span> <span class="nc">Singleton</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="n">Singleton</span> <span class="n">Instance</span> <span class="p">{</span> 
        <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">Nested</span><span class="p">.</span><span class="n">instance</span><span class="p">;</span> <span class="p">}</span> <span class="p">}</span>
        
    <span class="k">private</span> <span class="k">class</span> <span class="nc">Nested</span>
    <span class="p">{</span>
        <span class="c1">// Explicit static constructor to tell C# compiler</span>
        <span class="c1">// not to mark type as beforefieldinit</span>
        <span class="k">static</span> <span class="nf">Nested</span><span class="p">()</span> <span class="p">{</span> <span class="p">}</span>

        <span class="k">internal</span> <span class="k">static</span> <span class="k">readonly</span> <span class="n">SingletonC</span> <span class="n">instance</span> 
            <span class="p">=</span> <span class="k">new</span> <span class="nf">Singleton</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="nf">Singleton</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Singleton()"</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>This works because if a type provides a static constructor, C# will
run static initializers lazily (on a first call to any method, including
constructors or access to any field). Without static constructor
runtime may invoke static initializers at any point in time prior to
the first access to any type member. In practice it means that our
singleton without empty static constructor in <code class="highlighter-rouge">Nested</code> class is no longer lazy.</p>

<p>So it looks like the cure is worse than the disease. Now we require that
any person that implements singletons in our codebase knows about
<code class="highlighter-rouge">beforefieldinit</code> attribute, which 
unfortunately is clearly visible only in CIL bytecode and is responsible
for the above behaviour:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// without static constructor Nested class is declared in CIL</span>
<span class="c1">// as follows:</span>
<span class="p">.</span><span class="k">class</span> <span class="nc">nested</span> <span class="k">private</span> <span class="n">auto</span> <span class="n">ansi</span> <span class="n">beforefieldinit</span> <span class="n">Nested</span>
        <span class="n">extends</span> <span class="p">[</span><span class="n">mscorlib</span><span class="p">]</span><span class="n">System</span><span class="p">.</span><span class="n">Object</span>
    <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>

<span class="c1">// and with static constructor we get:</span>
<span class="p">.</span><span class="k">class</span> <span class="nc">nested</span> <span class="k">private</span> <span class="n">auto</span> <span class="n">ansi</span> <span class="n">Nested</span>
        <span class="n">extends</span> <span class="p">[</span><span class="n">mscorlib</span><span class="p">]</span><span class="n">System</span><span class="p">.</span><span class="n">Object</span>
    <span class="p">{</span> <span class="p">...</span> <span class="p">}</span></code></pre></figure>

<p>Also our version 2.0 doesn’t protect us 
from forming cyclic dependency between singletons:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">sealed</span> <span class="k">class</span> <span class="nc">SingletonC</span>
<span class="p">{</span>
    <span class="c1">// singleton stuff...</span>

    <span class="k">private</span> <span class="nf">SingletonC</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"SingletonC()"</span><span class="p">);</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"D: "</span> <span class="p">+</span> <span class="n">SingletonD</span><span class="p">.</span><span class="n">Instance</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">sealed</span> <span class="k">class</span> <span class="nc">SingletonD</span>
<span class="p">{</span>
    <span class="c1">// singleton stuff...</span>

    <span class="k">private</span> <span class="nf">SingletonD</span><span class="p">()</span>
    <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"SingletonD()"</span><span class="p">);</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"C: "</span> <span class="p">+</span> <span class="n">SingletonC</span><span class="p">.</span><span class="n">Instance</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span>
<span class="p">{</span>
    <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Main()"</span><span class="p">);</span>
    <span class="kt">var</span> <span class="n">tmp</span> <span class="p">=</span> <span class="n">SingletonC</span><span class="p">.</span><span class="n">Instance</span><span class="p">;</span>
<span class="p">}</span>
<span class="c1">// Program output:</span>
<span class="c1">// Main()</span>
<span class="c1">// SingletonC()</span>
<span class="c1">// SingletonD()</span>
<span class="c1">// C: (null)</span>
<span class="c1">// D: SingletonD</span></code></pre></figure>

<p>As we can see <code class="highlighter-rouge">SingletonC.Intance</code> inside <code class="highlighter-rouge">SingletonD</code> constructor
returned <code class="highlighter-rouge">null</code>. If we tried to create cyclic dependency with our
first solution we would get a <code class="highlighter-rouge">StackOverflowException</code>. So at least
we would know that something is wrong.
Anyway looks like creating a singleton requires some skills…</p>

<p>And since we are talking about singletons already, its also worth to
know that .NET allows us to create an instance of type without invoking
constructor (useful when implementing e.g. JSON serialization library).
Objects created this way will be of course incomplete but still:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">FormatterServices</span><span class="p">.</span><span class="nf">GetUninitializedObject</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">SingletonC</span><span class="p">));</span></code></pre></figure>

<p>And of course we don’t even talk about reflection API that we may use to
destroy even most foolproof singletons.</p>

<p>So I guess now its a summary time! If you want to use singletons in
your code that badly, please read carefully Jon Skeet articles
from reference section. For the rest of us: let’s forget about 
handcrafted singletons
and start using Dependency Injection!</p>

<p>PS. Also be careful when asking questions about Singletons 
at job interviews unless
you want to hear discussion about <code class="highlighter-rouge">beforefieldinit</code> ;)</p>

<p>References:</p>

<ul>
  <li><a href="http://csharpindepth.com/Articles/General/Singleton.aspx">http://csharpindepth.com/Articles/General/Singleton.aspx</a></li>
  <li><a href="http://csharpindepth.com/Articles/General/Beforefieldinit.aspx">http://csharpindepth.com/Articles/General/Beforefieldinit.aspx</a></li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>Castle Windsor most popular features</title>
	  <link>//castle-windsor-most-popular-features</link>
	  <author></author>
	  <pubDate>2016-09-11T02:00:00+02:00</pubDate>
	  <guid>//castle-windsor-most-popular-features</guid>
	  <description><![CDATA[
	     <p>In this post I will present the most popular 
<a href="http://www.castleproject.org/projects/windsor/">Castle Windsor</a> features
encountered in typical enterprise applications.</p>

<blockquote>
  <p>Source code: <a href="https://github.com/marcin-chwedczuk/castle-windsor-most-popular-features">https://github.com/marcin-chwedczuk/castle-windsor-most-popular-features</a></p>
</blockquote>

<h5 id="typed-factory">Typed factory</h5>

<p>When I follow good software development practices like
<a href="https://en.wikipedia.org/wiki/SOLID_(object-oriented_design)">SOLID</a>
I find myself writing plenty of <a href="https://en.wikipedia.org/wiki/Factory_(object-oriented_programming)">factory</a> classes.
These factory classes often fall in one of the two categories:</p>

<ul>
  <li>I need to create instance of generic service for specific type e.g. I want to get 
 service that implements <code class="highlighter-rouge">ICommandHandler&lt;TCommand&gt;</code> for <code class="highlighter-rouge">TCommand</code> type</li>
  <li>I must pass parameters and/or configuration to the service before I
 can use it e.g. <code class="highlighter-rouge">HeuristicSearch</code> service has <code class="highlighter-rouge">quality</code> constructor parameter
 to decide what solutions are good enough for the user</li>
</ul>

<p>In cases like these we can use typed factory feature to generate
factory implementations:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// to enable typed factory we must add TypedFactoryFacility</span>
<span class="c1">// to the container</span>
<span class="n">container</span><span class="p">.</span><span class="n">AddFacility</span><span class="p">&lt;</span><span class="n">TypedFactoryFacility</span><span class="p">&gt;();</span>

<span class="c1">// case  I: get generic service instance for specific type</span>
<span class="k">public</span> <span class="k">interface</span> <span class="nc">ICommandHandler</span><span class="p">&lt;</span><span class="n">TCommand</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="k">void</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">TCommand</span> <span class="n">command</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">public</span> <span class="k">interface</span> <span class="nc">ICommandHandlerFactory</span> <span class="p">{</span>
    <span class="n">ICommandHandler</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">Create</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;();</span>
    <span class="k">void</span> <span class="n">Release</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">ICommandHandler</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">instance</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">AddUserCommandHandler</span> <span class="p">:</span> <span class="n">ICommandHandler</span><span class="p">&lt;</span><span class="n">AddUserCommand</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="k">public</span> <span class="nf">AddUserCommandHandler</span><span class="p">(</span><span class="cm">/* dependencies */</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">Handle</span><span class="p">(</span><span class="n">AddUserCommand</span> <span class="n">command</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
<span class="p">}</span>

<span class="n">container</span><span class="p">.</span><span class="nf">Register</span><span class="p">(</span>
    <span class="n">Component</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">ICommandHandler</span><span class="p">&lt;</span><span class="n">AddUserCommand</span><span class="p">&gt;&gt;()</span>
        <span class="p">.</span><span class="n">ImplementedBy</span><span class="p">&lt;</span><span class="n">AddUserCommandHandler</span><span class="p">&gt;()</span>
        <span class="p">.</span><span class="n">LifeStyle</span><span class="p">.</span><span class="n">Transient</span><span class="p">,</span>

    <span class="c1">// tell Windsor that it should generate factory for me</span>
    <span class="n">Component</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">ICommandHandlerFactory</span><span class="p">&gt;()</span>
        <span class="p">.</span><span class="nf">AsFactory</span><span class="p">()</span>
    <span class="p">);</span>

<span class="c1">// usage</span>
<span class="n">ICommandHandlerFactory</span> <span class="n">factory</span> <span class="p">=</span>
        <span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">ICommandHandlerFactory</span><span class="p">&gt;();</span>

<span class="n">ICommandHandler</span><span class="p">&lt;</span><span class="n">AddUserCommand</span><span class="p">&gt;</span> <span class="n">handler</span> <span class="p">=</span>
    <span class="n">factory</span><span class="p">.</span><span class="n">Create</span><span class="p">&lt;</span><span class="n">AddUserCommand</span><span class="p">&gt;();</span>

<span class="n">handler</span><span class="p">.</span><span class="nf">Handle</span><span class="p">(</span><span class="k">new</span> <span class="nf">AddUserCommand</span><span class="p">());</span>

<span class="n">factory</span><span class="p">.</span><span class="nf">Release</span><span class="p">(</span><span class="n">handler</span><span class="p">);</span>

<span class="c1">// case II: pass configuration to the service</span>
<span class="k">public</span> <span class="k">interface</span> <span class="nc">IGreeter</span> <span class="p">{</span>
    <span class="k">void</span> <span class="nf">Greet</span><span class="p">();</span>
<span class="p">}</span>
<span class="k">public</span> <span class="k">interface</span> <span class="nc">IGreeterFactory</span> <span class="p">{</span>
    <span class="n">IGreeter</span> <span class="nf">Create</span><span class="p">(</span><span class="kt">string</span> <span class="n">greeting</span><span class="p">);</span>
    <span class="k">void</span> <span class="nf">Release</span><span class="p">(</span><span class="n">IGreeter</span> <span class="n">instance</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">ConsoleGreeter</span> <span class="p">:</span> <span class="n">IGreeter</span> <span class="p">{</span>
    <span class="p">...</span>
    <span class="k">public</span> <span class="nf">ConsoleGreeter</span><span class="p">(</span><span class="kt">string</span> <span class="n">greeting</span>
        <span class="cm">/* you may add other dependencies here,
         * e.g. ITextWrapper wrapper */</span><span class="p">)</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
<span class="p">}</span>

<span class="n">container</span><span class="p">.</span><span class="nf">Register</span><span class="p">(</span>
    <span class="n">Component</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">IGreeter</span><span class="p">&gt;()</span>
        <span class="p">.</span><span class="n">ImplementedBy</span><span class="p">&lt;</span><span class="n">ConsoleGreeter</span><span class="p">&gt;()</span>
        <span class="p">.</span><span class="nf">LifestyleTransient</span><span class="p">(),</span>

    <span class="c1">// tell Windsor that it should generate factory for me</span>
    <span class="n">Component</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">IGreeterFactory</span><span class="p">&gt;()</span>
        <span class="p">.</span><span class="nf">AsFactory</span><span class="p">()</span>
    <span class="p">);</span>

<span class="c1">// usage</span>
<span class="n">IGreeterFactory</span> <span class="n">greeterFactory</span> <span class="p">=</span> 
    <span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">IGreeterFactory</span><span class="p">&gt;();</span>

<span class="n">IGreeter</span> <span class="n">helloWorldGreeter</span> <span class="p">=</span> <span class="n">greeterFactory</span><span class="p">.</span><span class="nf">Create</span><span class="p">(</span><span class="s">"hello, world!"</span><span class="p">);</span>
<span class="n">IGreeter</span> <span class="n">goodbyeGreeter</span> <span class="p">=</span> <span class="n">greeterFactory</span><span class="p">.</span><span class="nf">Create</span><span class="p">(</span><span class="s">"goodbye cruel world!"</span><span class="p">);</span>

<span class="n">helloWorldGreeter</span><span class="p">.</span><span class="nf">Greet</span><span class="p">();</span>
<span class="n">goodbyeGreeter</span><span class="p">.</span><span class="nf">Greet</span><span class="p">();</span>

<span class="n">greeterFactory</span><span class="p">.</span><span class="nf">Release</span><span class="p">(</span><span class="n">helloWorldGreeter</span><span class="p">);</span>
<span class="n">greeterFactory</span><span class="p">.</span><span class="nf">Release</span><span class="p">(</span><span class="n">goodbyeGreeter</span><span class="p">);</span></code></pre></figure>

<p>Things to remember when using typed factory:</p>

<ul>
  <li><code class="highlighter-rouge">Release</code> method in factory interface is optional.<br />
 It is a good practice to
 always include <code class="highlighter-rouge">Release</code> method in factory interface and to release all instances
 created using factory when they are no longer needed</li>
  <li>In case of transient or per-web-request components that are disposable
 not releasing component will result in a memory leak</li>
  <li>Remember that some factories should be implemented manually especially these 
 that contain domain knowledge e.g. factory that selects discount
 <a href="https://en.wikipedia.org/wiki/Strategy_pattern">strategy</a> based on user profile</li>
</ul>

<h5 id="collection-resolver">Collection resolver</h5>

<p>Sometime we want to get all components that provide given service.
For example we may try to implement message filtering component and
we want to get all components that implement <code class="highlighter-rouge">IFilter</code> interface.
We may achieve this easily by using Castle Windsor <code class="highlighter-rouge">CollectionResolver</code>:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// register CollectionResolver in the container:</span>
<span class="n">container</span><span class="p">.</span><span class="n">Kernel</span><span class="p">.</span><span class="n">Resolver</span><span class="p">.</span><span class="nf">AddSubResolver</span><span class="p">(</span>
        <span class="k">new</span> <span class="nf">CollectionResolver</span><span class="p">(</span><span class="n">container</span><span class="p">.</span><span class="n">Kernel</span><span class="p">));</span>

<span class="c1">// demo:</span>
<span class="k">public</span> <span class="k">interface</span> <span class="nc">IFilter</span> <span class="p">{</span>
    <span class="kt">bool</span> <span class="nf">IsAllowed</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">MessageFilterService</span> <span class="p">{</span>
    <span class="k">private</span> <span class="n">ICollection</span><span class="p">&lt;</span><span class="n">IFilter</span><span class="p">&gt;</span> <span class="n">_filters</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">MessageFilterService</span><span class="p">(</span><span class="n">ICollection</span><span class="p">&lt;</span><span class="n">IFilter</span><span class="p">&gt;</span> <span class="n">filters</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">this</span><span class="p">.</span><span class="n">_filters</span> <span class="p">=</span> <span class="n">filters</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="p">...</span>
<span class="p">}</span>

<span class="n">container</span><span class="p">.</span><span class="nf">Register</span><span class="p">(</span>
    <span class="n">Component</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">MessageFilterService</span><span class="p">&gt;().</span><span class="n">LifeStyle</span><span class="p">.</span><span class="n">Transient</span><span class="p">,</span>

    <span class="n">Component</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">IFilter</span><span class="p">&gt;().</span><span class="n">ImplementedBy</span><span class="p">&lt;</span><span class="n">RejectBazWordFilter</span><span class="p">&gt;(),</span>
    <span class="n">Component</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">IFilter</span><span class="p">&gt;().</span><span class="n">ImplementedBy</span><span class="p">&lt;</span><span class="n">FooOrBazFilter</span><span class="p">&gt;()</span>
<span class="p">);</span>

<span class="n">MessageFilterService</span> <span class="n">service</span> <span class="p">=</span> <span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">MessageFilterService</span><span class="p">&gt;();</span>
<span class="n">service</span><span class="p">.</span><span class="nf">IsAllowed</span><span class="p">(</span><span class="s">"foo"</span><span class="p">);</span></code></pre></figure>

<p>Since registering <code class="highlighter-rouge">CollectionResolver</code> requires a bit of interaction
with a container it is advisable to wrap that logic into custom facility:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">ResolveCollectionsFacility</span> <span class="p">:</span> <span class="n">AbstractFacility</span> <span class="p">{</span>
    <span class="k">protected</span> <span class="k">override</span> <span class="k">void</span> <span class="nf">Init</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">Kernel</span><span class="p">.</span><span class="n">Resolver</span><span class="p">.</span><span class="nf">AddSubResolver</span><span class="p">(</span><span class="k">new</span> <span class="nf">CollectionResolver</span><span class="p">(</span><span class="n">Kernel</span><span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// then use:</span>
<span class="c1">// container.AddFacility&lt;ResolveCollectionsFacility&gt;();</span></code></pre></figure>

<h5 id="component-registration-using-conventions">Component registration using conventions</h5>

<p><a href="https://en.wikipedia.org/wiki/Convention_over_configuration">Convention over configuration</a>
is popular subject these days so why not to apply it to the component registration.
Instead of writing boring:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Component</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">IFooRepository</span><span class="p">&gt;()</span>
        <span class="p">.</span><span class="n">ImplementedBy</span><span class="p">&lt;</span><span class="n">FooRepository</span><span class="p">&gt;()</span>
        <span class="p">.</span><span class="n">Lifestyle</span><span class="p">.</span><span class="n">PerWebRequest</span><span class="p">,</span>
<span class="p">...</span>
<span class="n">Component</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">IBarRepository</span><span class="p">&gt;()</span>
        <span class="p">.</span><span class="n">ImplementedBy</span><span class="p">&lt;</span><span class="n">BarRepository</span><span class="p">&gt;()</span>
        <span class="p">.</span><span class="n">Lifestyle</span><span class="p">.</span><span class="n">PerWebRequest</span></code></pre></figure>

<p>We may write just once:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Classes</span><span class="p">.</span><span class="nf">FromThisAssembly</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">BasedOn</span><span class="p">(</span><span class="k">typeof</span><span class="p">(</span><span class="n">IRepository</span><span class="p">&lt;&gt;))</span>
    <span class="p">.</span><span class="n">WithService</span><span class="p">.</span><span class="nf">AllInterfaces</span><span class="p">()</span>
    <span class="p">.</span><span class="n">Lifestyle</span><span class="p">.</span><span class="n">PerWebRequest</span></code></pre></figure>

<p>Castle Windsor is very flexible when it comes to registering components
by convention, we may scan selected assemblies and/or namespaces, we
may even select components to register by testing component <code class="highlighter-rouge">Type</code>.</p>

<blockquote>
  <p>PITFALL: Avoid creating conventions based on type name (e.g. register all classes that
have names ending with <code class="highlighter-rouge">Repository</code>) as
much as possible. It is always better to create empty marker interface
e.g. <code class="highlighter-rouge">IApplicationService</code> and use it to register all necessary components.</p>
</blockquote>

<h5 id="installers">Installers</h5>

<p>Castle Windsor installers allow us to group component registrations into
reusable pieces of code. The real power of installers comes from the fact that
we may pass them arguments or in other words we may configure them.
For example installer may take a single argument that tells what lifestyle should
be applied to all registrations contained in the installer. Such installer can
be used in both ASP.NET MVC app when most of the components will be
registered as <code class="highlighter-rouge">PerWebRequest</code> and in Windows service app where components will 
be registered as either <code class="highlighter-rouge">Transient</code> or <code class="highlighter-rouge">Singleton</code>.</p>

<p>Here is example of very simple installer:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">DummyModuleInstaller</span> <span class="p">:</span> <span class="n">IWindsorInstaller</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">Install</span><span class="p">(</span><span class="n">IWindsorContainer</span> <span class="n">container</span><span class="p">,</span> <span class="n">IConfigurationStore</span> <span class="n">store</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">container</span><span class="p">.</span><span class="n">AddFacility</span><span class="p">&lt;</span><span class="n">TypedFactoryFacility</span><span class="p">&gt;();</span>

        <span class="c1">// add other installers, facilities etc.</span>

        <span class="n">container</span><span class="p">.</span><span class="nf">Register</span><span class="p">(</span>
            <span class="n">Component</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">DummyService</span><span class="p">&gt;().</span><span class="n">LifeStyle</span><span class="p">.</span><span class="n">Transient</span>
            <span class="c1">// other components</span>
            <span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="n">container</span><span class="p">.</span><span class="nf">Install</span><span class="p">(</span><span class="k">new</span> <span class="p">[]</span> <span class="p">{</span>
    <span class="k">new</span> <span class="nf">DummyModuleInstaller</span><span class="p">()</span>
<span class="p">});</span></code></pre></figure>

<h5 id="fallback-and-default-components">Fallback and default components</h5>

<p>When we start grouping registrations into installers often we will find ourselves
in situation that we want to register given service only when user of the installer
didn’t provide she’s own implementation. We may achieve this by passing parameters
to the installer but a fallback components are a better choice here.
Components registered as fallbacks will be used by the container only when there is no
other component that provides given service:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// fallback is used when no other component</span>
<span class="c1">// for service is registered</span>
<span class="n">container</span><span class="p">.</span><span class="nf">Register</span><span class="p">(</span>
    <span class="n">Component</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">IFooService</span><span class="p">&gt;()</span>
        <span class="p">.</span><span class="n">ImplementedBy</span><span class="p">&lt;</span><span class="n">FallbackFooService</span><span class="p">&gt;()</span>
        <span class="p">.</span><span class="n">LifeStyle</span><span class="p">.</span><span class="n">Transient</span>
        <span class="p">.</span><span class="nf">IsFallback</span><span class="p">()</span>
        <span class="p">);</span>

<span class="n">Assert</span><span class="p">.</span><span class="nf">That</span><span class="p">(</span><span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">IFooService</span><span class="p">&gt;(),</span>
    <span class="n">Is</span><span class="p">.</span><span class="n">InstanceOf</span><span class="p">&lt;</span><span class="n">FallbackFooService</span><span class="p">&gt;());</span>

<span class="c1">// we may register our own component for FooService</span>
<span class="n">container</span><span class="p">.</span><span class="nf">Register</span><span class="p">(</span>
    <span class="n">Component</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">IFooService</span><span class="p">&gt;()</span>
        <span class="p">.</span><span class="n">ImplementedBy</span><span class="p">&lt;</span><span class="n">FooService</span><span class="p">&gt;()</span>
        <span class="p">);</span>

<span class="n">Assert</span><span class="p">.</span><span class="nf">That</span><span class="p">(</span><span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">IFooService</span><span class="p">&gt;(),</span>
    <span class="n">Is</span><span class="p">.</span><span class="n">InstanceOf</span><span class="p">&lt;</span><span class="n">FooService</span><span class="p">&gt;());</span></code></pre></figure>

<p>Since word isn’t perfect it happens from time to time that we want to
overwrite component registration for some particular service. This usually happens
because author of the installer doesn’t use fallback components. But don’t panic
Castle Windsor allow us to overwrite service registrations using default components:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">container</span><span class="p">.</span><span class="nf">Register</span><span class="p">(</span>
    <span class="n">Component</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">IFooService</span><span class="p">&gt;()</span>
        <span class="p">.</span><span class="n">ImplementedBy</span><span class="p">&lt;</span><span class="n">FooService</span><span class="p">&gt;());</span>

<span class="n">Assert</span><span class="p">.</span><span class="nf">That</span><span class="p">(</span><span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">IFooService</span><span class="p">&gt;(),</span>
    <span class="n">Is</span><span class="p">.</span><span class="n">InstanceOf</span><span class="p">&lt;</span><span class="n">FooService</span><span class="p">&gt;());</span>

<span class="c1">// Without IsDefault() we</span>
<span class="c1">// would get an exception telling us that</span>
<span class="c1">// there is already component registered for IFooService</span>
<span class="c1">// interface.</span>
<span class="n">container</span><span class="p">.</span><span class="nf">Register</span><span class="p">(</span>
   <span class="n">Component</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">IFooService</span><span class="p">&gt;()</span>
       <span class="p">.</span><span class="n">ImplementedBy</span><span class="p">&lt;</span><span class="n">DefaultFooService</span><span class="p">&gt;()</span>
       <span class="p">.</span><span class="nf">IsDefault</span><span class="p">()</span>
       <span class="p">);</span>

<span class="n">Assert</span><span class="p">.</span><span class="nf">That</span><span class="p">(</span><span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">IFooService</span><span class="p">&gt;(),</span>
    <span class="n">Is</span><span class="p">.</span><span class="n">InstanceOf</span><span class="p">&lt;</span><span class="n">DefaultFooService</span><span class="p">&gt;());</span></code></pre></figure>

<h5 id="interceptors">Interceptors</h5>

<p>Interceptors are most powerful Castle Windsor feature that
brings power of <a href="https://en.wikipedia.org/wiki/Aspect-oriented_programming">aspect oriented programming</a>
to .NET.
Interceptors can be used to implement transaction management, logging, security checks,
we may use them to gather performance related statistics and for many other purposes.</p>

<p>Here is a simple interceptor that log the invocations of all component methods:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">EventTracingInterceptor</span> <span class="p">:</span> <span class="n">IInterceptor</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">Intercept</span><span class="p">(</span><span class="n">IInvocation</span> <span class="n">invocation</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">EventTracer</span><span class="p">.</span><span class="nf">AddEvent</span><span class="p">(</span><span class="s">"BEFORE "</span> <span class="p">+</span> <span class="n">invocation</span><span class="p">.</span><span class="n">Method</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>

        <span class="k">try</span> <span class="p">{</span>
            <span class="c1">// call original method, we may inspect method arguments,</span>
            <span class="c1">// generic parameters, return value and many others</span>
            <span class="n">invocation</span><span class="p">.</span><span class="nf">Proceed</span><span class="p">();</span>
        <span class="p">}</span>
        <span class="k">finally</span> <span class="p">{</span>
            <span class="n">EventTracer</span><span class="p">.</span><span class="nf">AddEvent</span><span class="p">(</span><span class="s">"AFTER "</span> <span class="p">+</span> <span class="n">invocation</span><span class="p">.</span><span class="n">Method</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="na">[Interceptor(typeof(EventTracingInterceptor))]</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">Service</span> <span class="p">:</span> <span class="n">IService</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">Foo</span><span class="p">()</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">Bar</span><span class="p">()</span> <span class="p">{</span> <span class="p">...</span> <span class="p">}</span>
<span class="p">}</span>

<span class="n">container</span><span class="p">.</span><span class="nf">Register</span><span class="p">(</span>
    <span class="c1">// interceptors work only when you expose your</span>
    <span class="c1">// components via interfaces.</span>
    <span class="c1">// here I registered interceptors by using</span>
    <span class="c1">// attributes on Service class but you may also</span>
    <span class="c1">// use fluent api.</span>
    <span class="n">Component</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">IService</span><span class="p">&gt;().</span><span class="n">ImplementedBy</span><span class="p">&lt;</span><span class="n">Service</span><span class="p">&gt;(),</span>
    <span class="n">Component</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">EventTracingInterceptor</span><span class="p">&gt;()</span>
    <span class="p">);</span>

<span class="n">IService</span> <span class="n">service</span> <span class="p">=</span> <span class="n">container</span><span class="p">.</span><span class="n">Resolve</span><span class="p">&lt;</span><span class="n">IService</span><span class="p">&gt;();</span>
<span class="n">service</span><span class="p">.</span><span class="nf">Foo</span><span class="p">();</span></code></pre></figure>

<p>When you start writing your own interceptors it is generally advisable to
create custom attribute e.g. <code class="highlighter-rouge">TransactionalAttribute</code> to mark classes that
should have interceptors attached. 
Then you should write your own facility that will scan all components
registered in container
and will attach interceptor for these marked with your custom attribute.
<a href="http://blog.willbeattie.net/2010/09/implementing-custom-castle-windsor.html">Here is a good example of this approach</a>
used to implement caching.</p>

<p>That’s all for today! Thanks for reading.</p>

	  ]]></description>
	</item>

	<item>
	  <title>How null's are handled in switch statement in C#, Java and JavaScript</title>
	  <link>//how-nulls-are-handled-in-switch-statement</link>
	  <author></author>
	  <pubDate>2016-07-09T02:00:00+02:00</pubDate>
	  <guid>//how-nulls-are-handled-in-switch-statement</guid>
	  <description><![CDATA[
	     <p>Let’s start with C#. In C# <code class="highlighter-rouge">null</code>s may show up in <code class="highlighter-rouge">switch</code> statement in two cases:</p>

<ol>
  <li>We <code class="highlighter-rouge">switch</code> on <code class="highlighter-rouge">string</code> type</li>
  <li>We <code class="highlighter-rouge">switch</code> on nullable <code class="highlighter-rouge">char</code>, nullable integral type (<code class="highlighter-rouge">byte</code>, <code class="highlighter-rouge">short</code> etc.) 
 or nullable enum</li>
</ol>

<p>Both cases are handled by compiler in the same way,
we just declare <code class="highlighter-rouge">case null</code> label and it will work out of the box.</p>

<p>This is illustrated by simple program:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">using</span> <span class="nn">System</span><span class="p">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span>
<span class="p">{</span>
   <span class="k">public</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span> <span class="p">{</span>
        <span class="kt">int</span><span class="p">?</span> <span class="n">n</span> <span class="p">=</span> <span class="n">GetDefault</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">?&gt;();</span>
 
        <span class="c1">// This will write null       </span>
        <span class="k">switch</span><span class="p">(</span><span class="n">n</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">case</span> <span class="k">null</span><span class="p">:</span> <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"null"</span><span class="p">);</span>    <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="m">1</span><span class="p">:</span>    <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"value 1"</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
            <span class="k">default</span><span class="p">:</span>   <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"default"</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>


        <span class="kt">string</span> <span class="n">s</span> <span class="p">=</span> <span class="n">GetDefault</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;();</span>
 
        <span class="c1">// This will write null       </span>
        <span class="k">switch</span><span class="p">(</span><span class="n">s</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">case</span> <span class="k">null</span><span class="p">:</span>   <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"null"</span><span class="p">);</span>    <span class="k">break</span><span class="p">;</span>
            <span class="k">case</span> <span class="s">"foo"</span><span class="p">:</span>  <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"foo"</span><span class="p">);</span>     <span class="k">break</span><span class="p">;</span>
            <span class="k">default</span><span class="p">:</span>     <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"default"</span><span class="p">);</span> <span class="k">break</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
    
    <span class="c1">// GetDefault returns null for nullable and reference type T</span>
    <span class="k">private</span> <span class="n">T</span> <span class="n">GetDefault</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">default</span><span class="p">(</span><span class="n">T</span><span class="p">);</span>   
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h5 id="java-switch-and-nulls">Java switch and null’s</h5>

<p>In Java <code class="highlighter-rouge">null</code>’s may show up in <code class="highlighter-rouge">switch</code> statement when we <code class="highlighter-rouge">switch</code> 
on primitive type wrappers like <code class="highlighter-rouge">Integer</code> or on <code class="highlighter-rouge">String</code> or on enum type.
In that case Java will throw <code class="highlighter-rouge">NullPointerException</code> as is demonstrated by program:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Program</span> 
<span class="o">{</span>
  <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span>
  <span class="o">{</span>
    <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">getNullString</span><span class="o">();</span>
    <span class="k">try</span> <span class="o">{</span>
      <span class="k">switch</span><span class="o">(</span><span class="n">s</span><span class="o">)</span> <span class="o">{</span>
          <span class="c1">// case null - doesn't compile:</span>
          <span class="c1">// error: constant string expression required</span>
          <span class="c1">// case null:  System.out.println("null"); break;</span>

          <span class="k">case</span> <span class="s">"foo"</span><span class="o">:</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"foo"</span><span class="o">);</span> <span class="k">break</span><span class="o">;</span>
          <span class="k">default</span><span class="o">:</span>    <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"default"</span><span class="o">);</span> <span class="k">break</span><span class="o">;</span>
      <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">catch</span><span class="o">(</span><span class="n">NullPointerException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// exception stack trace points to `switch(s) {` line</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"null pointer exception"</span><span class="o">);</span>
    <span class="o">}</span>
    
    <span class="n">FooEnum</span> <span class="n">e</span> <span class="o">=</span> <span class="n">getNullFooEnum</span><span class="o">();</span>
    <span class="k">try</span> <span class="o">{</span>
      <span class="k">switch</span><span class="o">(</span><span class="n">e</span><span class="o">)</span> <span class="o">{</span>
       <span class="c1">// case null doesn't compile</span>
       <span class="c1">// error: an enum switch case label must be the unqualified name of an enumeration constant</span>
       <span class="c1">// case null: System.out.println("null"); break;</span>
        
       <span class="k">case</span> <span class="nl">OPTION_1:</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"option 1"</span><span class="o">);</span> <span class="k">break</span><span class="o">;</span>
       <span class="k">default</span><span class="o">:</span>       <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"default"</span><span class="o">);</span>  <span class="k">break</span><span class="o">;</span>
      <span class="o">}</span>
    <span class="o">}</span>
    <span class="k">catch</span><span class="o">(</span><span class="n">NullPointerException</span> <span class="n">ex</span><span class="o">)</span> <span class="o">{</span>
        <span class="c1">// exception stack trace points to `switch(e) {` line</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"null pointer exception"</span><span class="o">);</span>
    <span class="o">}</span>
  <span class="o">}</span>
  <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">getNullString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">null</span><span class="o">;</span> 
  <span class="o">}</span>
  <span class="kd">private</span> <span class="kd">static</span> <span class="n">FooEnum</span> <span class="nf">getNullFooEnum</span><span class="o">()</span> <span class="o">{</span>
    <span class="k">return</span> <span class="kc">null</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span>

<span class="kd">enum</span> <span class="n">FooEnum</span> <span class="o">{</span>
  <span class="n">OPTION_1</span><span class="o">,</span>
  <span class="n">OPTION_2</span>
<span class="o">}</span></code></pre></figure>

<p>Program output:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">null pointer exception
null pointer exception</code></pre></figure>

<p>As we have seen it’s not even possible to declare <code class="highlighter-rouge">case null</code> label.</p>

<p>In Java until you are 100% sure that value will not contain <code class="highlighter-rouge">null</code> you must
explicitly check for <code class="highlighter-rouge">null</code> before switch as in:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">FooEnum</span> <span class="n">e</span> <span class="o">=</span> <span class="n">getNullFooEnum</span><span class="o">();</span>

<span class="k">if</span> <span class="o">(</span><span class="n">e</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span> 
  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"null"</span><span class="o">);</span> 
<span class="o">}</span>
<span class="k">else</span> <span class="o">{</span>
  <span class="k">switch</span><span class="o">(</span><span class="n">e</span><span class="o">)</span> <span class="o">{</span>
    <span class="k">case</span> <span class="nl">OPTION_1:</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"option 1"</span><span class="o">);</span> <span class="k">break</span><span class="o">;</span>
    <span class="k">default</span><span class="o">:</span>       <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"default"</span><span class="o">);</span>  <span class="k">break</span><span class="o">;</span>
  <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>Or use trick with default value:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">Integer</span> <span class="n">n</span> <span class="o">=</span> <span class="n">getNullableInteger</span><span class="o">();</span>

<span class="c1">// -1 is default here, but you may use Integer.MIN/MAX_VALUE or any</span>
<span class="c1">// other value</span>
<span class="k">switch</span><span class="o">((</span><span class="n">e</span> <span class="o">!=</span> <span class="kc">null</span><span class="o">)</span> <span class="o">?</span> <span class="n">e</span> <span class="o">:</span> <span class="o">-</span><span class="mi">1</span><span class="o">)</span> <span class="o">{</span>
  <span class="k">case</span> <span class="mi">1</span><span class="o">:</span>  <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"1"</span><span class="o">);</span> <span class="k">break</span><span class="o">;</span>
  <span class="k">case</span> <span class="o">-</span><span class="mi">1</span><span class="o">:</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"null"</span><span class="o">);</span> <span class="k">break</span><span class="o">;</span>
  <span class="k">default</span><span class="o">:</span> <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="s">"default"</span><span class="o">);</span> <span class="k">break</span><span class="o">;</span>
<span class="o">}</span></code></pre></figure>

<p>WARNING: This Java behaviour may cause problems when we translate code from C# to Java.</p>

<h4 id="javascript-switch-and-null">JavaScript switch and null</h4>

<p>JavaScript <code class="highlighter-rouge">switch</code> statement is very flexible, each <code class="highlighter-rouge">case</code> label may contain
an expression that will be evaluated at runtime. To compare <code class="highlighter-rouge">case</code> label values to
<code class="highlighter-rouge">switch</code> value JavaScript uses <code class="highlighter-rouge">===</code> operator.</p>

<p>In JavaScript there is no problem with using <code class="highlighter-rouge">null</code> and even <code class="highlighter-rouge">undefined</code> as <code class="highlighter-rouge">case</code>
labels. Only tricky thing is with <code class="highlighter-rouge">NaN</code>s because <code class="highlighter-rouge">NaN === NaN</code> yields <code class="highlighter-rouge">false</code>
in JavaScript. This is enforced by IEEE 754 standard that describes floating point
numbers representation and behaviour. 
In other words we can use <code class="highlighter-rouge">NaN</code> as a <code class="highlighter-rouge">case</code> label but
program will never enter block of code associated with that label. As a side note
it’s worth to mention that in JavaScript <code class="highlighter-rouge">NaN</code> is 
the only value for which expression <code class="highlighter-rouge">x === x</code> yields
<code class="highlighter-rouge">false</code>.</p>

<p>Following program demonstrates flexibility of JavaScript <code class="highlighter-rouge">switch</code> statement:</p>

<figure class="highlight"><pre><code class="language-js" data-lang="js"><span class="kd">var</span> <span class="nx">values</span> <span class="o">=</span> <span class="p">[</span><span class="kc">undefined</span><span class="p">,</span> <span class="kc">null</span><span class="p">,</span> <span class="s1">''</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="kc">NaN</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="s1">'foo'</span><span class="p">,</span> <span class="p">{}];</span>

<span class="nx">values</span><span class="p">.</span><span class="nx">forEach</span><span class="p">(</span><span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">switch</span> <span class="p">(</span><span class="nx">value</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">case</span> <span class="kc">undefined</span><span class="p">:</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'undefined'</span><span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>

         <span class="k">case</span> <span class="kc">null</span><span class="p">:</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'null'</span><span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
        
        <span class="k">case</span> <span class="s1">''</span><span class="p">:</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'empty string'</span><span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
        
        <span class="k">case</span> <span class="mi">0</span><span class="p">:</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'zero'</span><span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
        
        <span class="k">case</span> <span class="kc">NaN</span><span class="p">:</span>
            <span class="c1">// dead code here</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'nan'</span><span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
        
        <span class="k">case</span> <span class="mi">1</span><span class="p">:</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
        
        <span class="c1">// label with runtime expression here:</span>
        <span class="k">case</span> <span class="s1">'f'</span><span class="o">+</span><span class="s1">'oo'</span><span class="p">:</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'foo'</span><span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
        
        <span class="nl">default</span><span class="p">:</span>
            <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s1">'default'</span><span class="p">);</span>
            <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">});</span></code></pre></figure>

<p>This program will write:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">"undefined"
"null"
"empty string"
"zero"
"default"
1
"foo"
"default"</code></pre></figure>

<p>Notice that <code class="highlighter-rouge">"default"</code> was printed for <code class="highlighter-rouge">NaN</code> value.</p>

<p>That’s all for today, I hope you learned something new from this article. <br />
May the Force be with you.</p>


	  ]]></description>
	</item>

	<item>
	  <title>Object and collection initializers in C#</title>
	  <link>//object-and-collection-initializers-in-csharp</link>
	  <author></author>
	  <pubDate>2016-06-12T02:00:00+02:00</pubDate>
	  <guid>//object-and-collection-initializers-in-csharp</guid>
	  <description><![CDATA[
	     <p>In this post I want to present a nice C# syntax sugar: object and collection
initializers.</p>

<h4 id="object-initializers">Object initializers</h4>
<p>We will start with object initializers. Let’s assume we have classes:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">Position</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Top</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Left</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Button</span> <span class="p">{</span>
    <span class="k">public</span> <span class="n">Position</span> <span class="n">Position</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span> 
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Text</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">FontSize</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="nf">Button</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">Position</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Position</span><span class="p">();</span>
        <span class="n">FontSize</span> <span class="p">=</span> <span class="m">10</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Without object initializer we could set <code class="highlighter-rouge">Button</code> object
properties using the following code:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">okButton</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Button</span><span class="p">();</span>

<span class="n">okButton</span><span class="p">.</span><span class="n">Position</span><span class="p">.</span><span class="n">Top</span> <span class="p">=</span> <span class="m">100</span><span class="p">;</span>
<span class="n">okButton</span><span class="p">.</span><span class="n">Position</span><span class="p">.</span><span class="n">Left</span> <span class="p">=</span> <span class="m">200</span><span class="p">;</span>
<span class="n">okButton</span><span class="p">.</span><span class="n">Text</span> <span class="p">=</span> <span class="s">"OK"</span><span class="p">;</span>
<span class="n">okButton</span><span class="p">.</span><span class="n">FontSize</span> <span class="p">=</span> <span class="m">13</span><span class="p">;</span></code></pre></figure>

<p>With object initializers we can shorten this code a bit:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">okButton</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Button</span> <span class="p">{</span>
    <span class="n">Position</span> <span class="p">=</span> <span class="p">{</span>
        <span class="n">Top</span> <span class="p">=</span> <span class="m">100</span><span class="p">,</span>
        <span class="n">Left</span> <span class="p">=</span> <span class="m">200</span>
    <span class="p">},</span>
    <span class="n">Text</span> <span class="p">=</span> <span class="s">"OK"</span><span class="p">,</span>
    <span class="n">FontSize</span> <span class="p">=</span> <span class="m">13</span>
<span class="p">};</span></code></pre></figure>

<p>Instructions generated by compiler in this two cases are exactly the same, but code 
using object initializer is more clear and more readable.</p>

<p>Now let’s dive into some syntax details:<br />
I. We can pass any parameters to object
constructor using syntax:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">foo</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Foo</span><span class="p">(</span><span class="n">param1</span><span class="p">,</span> <span class="n">param2</span><span class="p">)</span> <span class="p">{</span>
    <span class="n">Property1</span> <span class="p">=</span> <span class="s">"some value"</span><span class="p">,</span>
    <span class="n">Property2</span> <span class="p">=</span> <span class="s">"some other value"</span><span class="p">,</span>
    <span class="c1">// ...</span>
<span class="p">}</span></code></pre></figure>

<p>II. When we call parameterless constructor we can omit parentheses 
(like I did in the <code class="highlighter-rouge">Button</code> example):</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">foo</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Foo</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">};</span>

<span class="c1">// this is exactly the same as new Foo()</span>
<span class="kt">var</span> <span class="n">foo2</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Foo</span> <span class="p">{</span>
    <span class="c1">// ...</span>
<span class="p">}</span></code></pre></figure>

<p>III. Object initializers can be nested:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">invoice</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Invoice</span> <span class="p">{</span>
    <span class="n">ShippingAddress</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Address</span> <span class="p">{</span>
        <span class="n">Street</span> <span class="p">=</span> <span class="s">"Long Street"</span><span class="p">,</span>
        <span class="n">Number</span> <span class="p">=</span> <span class="s">"3A"</span>
    <span class="p">},</span>

    <span class="n">InvoiceAddress</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Address</span> <span class="p">{</span>
        <span class="n">Street</span> <span class="p">=</span> <span class="s">"Short Street"</span><span class="p">,</span>
        <span class="n">Number</span> <span class="p">=</span> <span class="s">"4B"</span>
    <span class="p">}</span>
<span class="p">};</span></code></pre></figure>

<p>IV. We can set nested properties without creating new objects<br />
Do you remember our first example with <code class="highlighter-rouge">Button</code>? We use</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">okButton</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Button</span> <span class="p">{</span>
    <span class="n">Position</span> <span class="p">=</span> <span class="p">{</span>
        <span class="n">Top</span> <span class="p">=</span> <span class="m">100</span><span class="p">,</span>
        <span class="n">Left</span> <span class="p">=</span> <span class="m">200</span>
    <span class="p">},</span>
    <span class="c1">// ...</span>
<span class="p">};</span></code></pre></figure>

<p>to set properties of <code class="highlighter-rouge">Button</code> <code class="highlighter-rouge">Position</code> object. Notice that <code class="highlighter-rouge">Position</code>
property has private setter</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="n">Position</span> <span class="n">Position</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">private</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span></code></pre></figure>

<p>so we cannot use <code class="highlighter-rouge">new</code> to create new <code class="highlighter-rouge">Position</code> object</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">okButton</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Button</span> <span class="p">{</span>
    <span class="c1">//         v doesn't compile</span>
    <span class="n">Position</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Position</span> <span class="p">{</span>
        <span class="n">Top</span> <span class="p">=</span> <span class="m">100</span><span class="p">,</span>
        <span class="n">Left</span> <span class="p">=</span> <span class="m">200</span>
    <span class="p">},</span>
    <span class="c1">// ...</span>
<span class="p">};</span></code></pre></figure>

<p>Fortunately object initializer syntax is flexible enough to allow us
set properties without creating new objects.</p>

<p>V. Object initializer syntax works only with <code class="highlighter-rouge">new</code><br />
In other words following code doesn’t compile:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// doesn't compile</span>
<span class="kt">var</span> <span class="n">foo</span> <span class="p">=</span> <span class="nf">SomeMethodReturningFoo</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">Property1</span> <span class="p">=</span> <span class="m">1</span>
<span class="p">};</span></code></pre></figure>

<h4 id="collection-initializers">Collection initializers</h4>

<p>Now it’s time to present collection initializers. We will start with
<code class="highlighter-rouge">List&lt;T&gt;</code> initializers, then we will describe <code class="highlighter-rouge">Dictionary&lt;TKey, TValue&gt;</code>
initializers.</p>

<p>As we all know C# allows to create and initialize arrays in single expression:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">funnyNames</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">string</span><span class="p">[]</span> <span class="p">{</span> <span class="s">"foo"</span><span class="p">,</span> <span class="s">"bar"</span><span class="p">,</span> <span class="s">"baz"</span><span class="p">,</span> <span class="s">"yay"</span> <span class="p">};</span></code></pre></figure>

<p>Wouldn’t it be nice if this syntax worked with <code class="highlighter-rouge">List&lt;T&gt;</code>’s? Actually thanks
to collection initializers it works and not only with <code class="highlighter-rouge">List</code>’s but also with
custom classes!</p>

<p>Let’s see an example:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">funnyNames</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="p">{</span> <span class="s">"foo"</span><span class="p">,</span> <span class="s">"bar"</span><span class="p">,</span> <span class="s">"baz"</span> <span class="p">};</span></code></pre></figure>

<p>this code is translated by compiler to</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">tmp</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;();</span>
<span class="n">tmp</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"foo"</span><span class="p">);</span>
<span class="n">tmp</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"bar"</span><span class="p">);</span>
<span class="n">tmp</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"baz"</span><span class="p">);</span>

<span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">funnyNames</span> <span class="p">=</span> <span class="n">tmp</span><span class="p">;</span></code></pre></figure>

<p>Inside initializers we are not limited to constants, we can use complex expressions
like</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;</span> <span class="n">things</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;()</span> <span class="p">{</span>
    <span class="p">(</span><span class="m">1</span><span class="p">+</span><span class="m">3</span><span class="p">*</span><span class="m">7</span><span class="p">),</span>
    <span class="k">true</span><span class="p">.</span><span class="nf">ToString</span><span class="p">(),</span>
    <span class="k">new</span> <span class="kt">object</span><span class="p">()</span>
<span class="p">};</span></code></pre></figure>

<p>As we already seen compiler translates collection initializers to a couple
of <code class="highlighter-rouge">Add</code> calls. We can make collection initializers work with custom classes by
providing <code class="highlighter-rouge">Add</code> method and implementing <code class="highlighter-rouge">IEnumerable</code> or <code class="highlighter-rouge">IEnumerable&lt;T&gt;</code>. This
second requirement is very important - since we are using <em>collection</em> initializers,
compiler expects that we will initialize some kind of collection and collections
ought to implement <code class="highlighter-rouge">IEnumerable</code> interface.</p>

<p>Below we present minimal generic and non-generic class that works with
collections initializers:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">CustomCollection</span> <span class="p">:</span> <span class="n">IEnumerable</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">Add</span><span class="p">(</span><span class="kt">object</span> <span class="n">item</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Add({0})"</span><span class="p">,</span> <span class="n">item</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="n">IEnumerator</span> <span class="n">IEnumerable</span><span class="p">.</span><span class="nf">GetEnumerator</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">yield</span> <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">CustomCollection</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">Add</span><span class="p">(</span><span class="n">T</span> <span class="n">item</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Add&lt;T&gt;({0})"</span><span class="p">,</span> <span class="n">item</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="n">IEnumerator</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;.</span><span class="nf">GetEnumerator</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">yield</span> <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="n">IEnumerator</span> <span class="n">IEnumerable</span><span class="p">.</span><span class="nf">GetEnumerator</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">yield</span> <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>NOTE: We used <code class="highlighter-rouge">yield break</code> to quickly provide dummy <code class="highlighter-rouge">IEnumerable</code> implementation.<br />
Now we can test our custom collections:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="kt">var</span> <span class="n">nonGeneric</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CustomCollection</span> <span class="p">{</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span> <span class="p">};</span>
        <span class="kt">var</span> <span class="n">generic</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CustomCollection</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="p">{</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span> <span class="p">};</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>When ran this program will write:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">Add(1)
Add(2)
Add(3)
Add&lt;T&gt;(1)
Add&lt;T&gt;(2)
Add&lt;T&gt;(3)</code></pre></figure>

<p>Now since collections initializers are translated to a <code class="highlighter-rouge">Add</code> method calls, what will happen
when we write <code class="highlighter-rouge">Add</code> method that take more than one parameter?</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">CustomCollection2</span> <span class="p">:</span> <span class="n">IEnumerable</span> <span class="p">{</span>
    <span class="c1">// notice *two* parameters</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">Add</span><span class="p">(</span><span class="kt">object</span> <span class="n">item</span><span class="p">,</span> <span class="kt">object</span> <span class="n">item2</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"Add({0}, {1})"</span><span class="p">,</span> <span class="n">item</span><span class="p">,</span> <span class="n">item2</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="n">IEnumerator</span> <span class="n">IEnumerable</span><span class="p">.</span><span class="nf">GetEnumerator</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">yield</span> <span class="k">break</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>It turns out that we still can use collection initializers, but the syntax is a bit different</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">coll2</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CustomCollection2</span> <span class="p">{</span> 
    <span class="p">{</span> <span class="m">1</span><span class="p">,</span> <span class="m">1</span> <span class="p">},</span> 
    <span class="p">{</span> <span class="m">2</span><span class="p">,</span> <span class="m">2</span> <span class="p">},</span>
    <span class="p">{</span> <span class="m">3</span><span class="p">,</span> <span class="m">3</span> <span class="p">}</span> 
<span class="p">};</span></code></pre></figure>

<p>This is translated by compiler to</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">CustomCollection2</span> <span class="n">tmp</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">CustomCollection2</span><span class="p">();</span>
<span class="n">tmp</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">1</span><span class="p">);</span>
<span class="n">tmp</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="m">2</span><span class="p">,</span> <span class="m">2</span><span class="p">);</span>
<span class="n">tmp</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="m">3</span><span class="p">);</span>
<span class="n">CustomCollection2</span> <span class="n">coll2</span> <span class="p">=</span> <span class="n">tmp</span><span class="p">;</span></code></pre></figure>

<p>With this knowledge it should be now easy to understand how <code class="highlighter-rouge">Dictionary&lt;TKey, TValue&gt;</code>
initializers work. First <code class="highlighter-rouge">Dictionary&lt;TKey, TValue&gt;</code> defines <code class="highlighter-rouge">Add(TKey, TValue)</code> method,
second it implements <code class="highlighter-rouge">IEnumerable&lt;KeyValuePair&lt;TKey, TValue&gt;&gt;</code> interface - so it fulfills all 
requirements needed by collection initializers to work.</p>

<p>We can initialize <code class="highlighter-rouge">Dictionary</code> with the following code</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">dict</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="p">{</span> <span class="s">"1"</span><span class="p">,</span> <span class="s">"one"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"2"</span><span class="p">,</span> <span class="s">"two"</span> <span class="p">},</span>
    <span class="p">{</span> <span class="s">"3"</span><span class="p">,</span> <span class="s">"three"</span> <span class="p">}</span>
<span class="p">};</span></code></pre></figure>

<p>Which as we already know is translated into</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;</span> <span class="n">tmp</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;();</span>
<span class="n">tmp</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"1"</span><span class="p">,</span> <span class="s">"one"</span><span class="p">);</span>
<span class="n">tmp</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"2"</span><span class="p">,</span> <span class="s">"two"</span><span class="p">);</span>
<span class="n">tmp</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="s">"3"</span><span class="p">,</span> <span class="s">"three"</span><span class="p">);</span>

<span class="kt">var</span> <span class="n">dict</span> <span class="p">=</span> <span class="n">tmp</span><span class="p">;</span></code></pre></figure>

<p>C# 6 introduced more flexible syntax for <code class="highlighter-rouge">Dictionary</code> initializers</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">dict</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="p">[</span><span class="s">"1"</span><span class="p">]</span> <span class="p">=</span> <span class="s">"one"</span><span class="p">,</span>
    <span class="p">[</span><span class="s">"2"</span><span class="p">]</span> <span class="p">=</span> <span class="s">"two"</span><span class="p">,</span>
    <span class="p">[</span><span class="s">"3"</span><span class="p">]</span> <span class="p">=</span> <span class="s">"three"</span>
<span class="p">};</span></code></pre></figure>

<p>This is not translated to <code class="highlighter-rouge">Add</code> calls, but uses indexer instead</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;</span> <span class="n">tmp</span> <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;();</span>
<span class="n">tmp</span><span class="p">[</span><span class="s">"1"</span><span class="p">]</span> <span class="p">=</span> <span class="s">"one"</span><span class="p">;</span>
<span class="n">tmp</span><span class="p">[</span><span class="s">"2"</span><span class="p">]</span> <span class="p">=</span> <span class="s">"two"</span><span class="p">;</span>
<span class="n">tmp</span><span class="p">[</span><span class="s">"3"</span><span class="p">]</span> <span class="p">=</span> <span class="s">"three"</span><span class="p">;</span>
<span class="kt">var</span> <span class="n">dict</span> <span class="p">=</span> <span class="n">tmp</span><span class="p">;</span></code></pre></figure>

<p>As other collection initializers it can work with custom types, only requirement is that
type must have indexer</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">CustomCollection</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">object</span> <span class="k">this</span><span class="p">[</span><span class="kt">string</span> <span class="n">key</span><span class="p">]</span> <span class="p">{</span>
        <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="k">null</span><span class="p">;</span> <span class="p">}</span>
        <span class="k">set</span> <span class="p">{</span> <span class="cm">/* do something with value */</span> <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// usage:</span>
<span class="kt">var</span> <span class="n">coll</span> <span class="p">=</span> <span class="k">new</span> <span class="n">CustomCollection</span> <span class="p">{</span>
    <span class="p">[</span><span class="s">"foo"</span><span class="p">]</span> <span class="p">=</span> <span class="m">1</span><span class="p">,</span>
    <span class="p">[</span><span class="s">"bar"</span><span class="p">]</span> <span class="p">=</span> <span class="m">2</span>
<span class="p">};</span></code></pre></figure>

<p>Another feature is that we can set properties of already existing objects in collection,
for example let’s assume that constructor of our collection already added some objects into
collection:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">Example</span> <span class="p">:</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="n">Position</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="k">public</span> <span class="nf">Example</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">Add</span><span class="p">(</span><span class="s">"topLeft"</span><span class="p">,</span> <span class="k">new</span> <span class="nf">Position</span><span class="p">());</span>
        <span class="nf">Add</span><span class="p">(</span><span class="s">"bottomRight"</span><span class="p">,</span> <span class="k">new</span> <span class="nf">Position</span><span class="p">());</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Then we can write</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">example</span>  <span class="p">=</span> <span class="k">new</span> <span class="n">Example</span> <span class="p">{</span>
    <span class="p">[</span><span class="s">"topLeft"</span><span class="p">]</span> <span class="p">=</span> <span class="p">{</span> <span class="n">Top</span> <span class="p">=</span> <span class="m">10</span><span class="p">,</span> <span class="n">Left</span> <span class="p">=</span> <span class="m">20</span> <span class="p">},</span>
    <span class="p">[</span><span class="s">"bottomRight"</span><span class="p">]</span> <span class="p">=</span> <span class="p">{</span> <span class="n">Top</span> <span class="p">=</span> <span class="m">100</span><span class="p">,</span> <span class="n">Left</span> <span class="p">=</span> <span class="m">220</span> <span class="p">}</span>
<span class="p">};</span></code></pre></figure>

<p>This will be translated by compiler into</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Example</span> <span class="n">tmp</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Example</span><span class="p">();</span>
<span class="n">tmp</span><span class="p">[</span><span class="s">"topLeft"</span><span class="p">].</span><span class="n">Top</span> <span class="p">=</span> <span class="m">10</span><span class="p">;</span>
<span class="n">tmp</span><span class="p">[</span><span class="s">"topLeft"</span><span class="p">].</span><span class="n">Left</span> <span class="p">=</span> <span class="m">20</span><span class="p">;</span>
<span class="n">tmp</span><span class="p">[</span><span class="s">"bottomRight"</span><span class="p">].</span><span class="n">Top</span> <span class="p">=</span> <span class="m">100</span><span class="p">;</span>
<span class="n">tmp</span><span class="p">[</span><span class="s">"bottomRight"</span><span class="p">].</span><span class="n">Left</span> <span class="p">=</span> <span class="m">220</span><span class="p">;</span>
<span class="n">Example</span> <span class="n">example</span> <span class="p">=</span> <span class="n">tmp</span><span class="p">;</span></code></pre></figure>

<p>The last thing worth know about this new initializer syntax is ability to mix it with
property initializers e.g.</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"> <span class="kt">var</span> <span class="n">example</span>  <span class="p">=</span> <span class="k">new</span> <span class="n">Example</span> <span class="p">{</span>
    <span class="p">[</span><span class="s">"topLeft"</span><span class="p">]</span> <span class="p">=</span> <span class="p">{</span> <span class="n">Top</span> <span class="p">=</span> <span class="m">10</span><span class="p">,</span> <span class="n">Left</span> <span class="p">=</span> <span class="m">20</span> <span class="p">},</span>
    <span class="p">[</span><span class="s">"bottomRight"</span><span class="p">]</span> <span class="p">=</span> <span class="p">{</span> <span class="n">Top</span> <span class="p">=</span> <span class="m">100</span><span class="p">,</span> <span class="n">Left</span> <span class="p">=</span> <span class="m">220</span> <span class="p">},</span>

    <span class="c1">// normal property</span>
    <span class="n">Tag</span> <span class="p">=</span> <span class="k">new</span> <span class="kt">object</span><span class="p">()</span>
<span class="p">};</span></code></pre></figure>

<p>That was plenty of knowledge, but the best way to learn about initializer is to use
them in code. After a while they become second nature for C# programmers and central part
of many language idioms.</p>


	  ]]></description>
	</item>


</channel>
</rss>
