<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>marcin-chwedczuk.github.io/</title>
   
   <link>http://localhost:4000</link>
   <description>A place where I share my thoughts about programming.</description>
   <language>en-uk</language>
   <managingEditor>mc</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Future[_] vs Future[Unit] or which return type should I choose?</title>
	  <link>http://localhost:4000/future-or-future</link>
	  <author>mc</author>
	  <pubDate>2020-09-12T02:00:01+02:00</pubDate>
	  <guid>http://localhost:4000/future-or-future</guid>
	
		<description>&lt;p&gt;Recently I have a heated debate with my colleague about
a proper return type for async procedures 
(procedure is just a function that returns &lt;code class=&quot;highlighter-rouge&quot;&gt;Unit&lt;/code&gt; in Scala.)
My point of view was that &lt;code class=&quot;highlighter-rouge&quot;&gt;Future[Unit]&lt;/code&gt; is the right type.
Let me present my way of reasoning here.&lt;/p&gt;

</description>
	
	</item>

	<item>
	  <title>Passing functions as arguments in Scala. What can go wrong?</title>
	  <link>http://localhost:4000/passing-functions-as-arguments-in-scala-what-can-go-wrong</link>
	  <author>mc</author>
	  <pubDate>2020-09-11T02:00:01+02:00</pubDate>
	  <guid>http://localhost:4000/passing-functions-as-arguments-in-scala-what-can-go-wrong</guid>
	
		<description>&lt;p&gt;In microservices architecture we often designate a single service for managing the configuration of the entire system.
Libraries like &lt;a href=&quot;https://github.com/Netflix/archaius&quot;&gt;Archaius&lt;/a&gt; make this easy. 
As a side effect, on the code level I often see class declarations like this:&lt;/p&gt;

</description>
	
	</item>

	<item>
	  <title>Preparing images for Ben Eater's VGA card using Gimp</title>
	  <link>http://localhost:4000/preparing-images-for-ben-eater-vga-using-gimp</link>
	  <author>mc</author>
	  <pubDate>2020-09-10T02:00:01+02:00</pubDate>
	  <guid>http://localhost:4000/preparing-images-for-ben-eater-vga-using-gimp</guid>
	
		<description>&lt;p&gt;Recently I have completed my own version of &lt;a href=&quot;https://eater.net/vga&quot;&gt;Ben Eater video card&lt;/a&gt;.
I still need to spend some time on it, since I could not achieve as good
and sharp looking images as Ben did. For example the finch picture generated by my card
does not look as crisp and clear as in Ben videos:
&lt;img src=&quot;assets/images/2020-09-10/finch.jpg&quot; alt=&quot;Finch&quot; /&gt;&lt;/p&gt;

</description>
	
	</item>

	<item>
	  <title>Nesting monads in Scala</title>
	  <link>http://localhost:4000/scala-nesting-monads</link>
	  <author>mc</author>
	  <pubDate>2020-08-01T02:00:01+02:00</pubDate>
	  <guid>http://localhost:4000/scala-nesting-monads</guid>
	
		<description>&lt;p&gt;Recently I write a lot of async code. Most of my repository
methods return types like &lt;code class=&quot;highlighter-rouge&quot;&gt;Future[Set[T]]&lt;/code&gt; or &lt;code class=&quot;highlighter-rouge&quot;&gt;Future[Option[T]]&lt;/code&gt;.
But as we will see, working with such types in pure Scala
can be very cumbersome.&lt;/p&gt;

</description>
	
	</item>

	<item>
	  <title>Scala WTF 1</title>
	  <link>http://localhost:4000/scala-wtf-1</link>
	  <author>mc</author>
	  <pubDate>2020-07-06T02:00:01+02:00</pubDate>
	  <guid>http://localhost:4000/scala-wtf-1</guid>
	
		<description>&lt;p&gt;So here is a puzzle. What will be written by
this program:&lt;/p&gt;

</description>
	
	</item>

	<item>
	  <title>Pitfalls of using Mockito with Scala</title>
	  <link>http://localhost:4000/pitfalls-of-using-Mockito-with-Scala</link>
	  <author>mc</author>
	  <pubDate>2019-12-22T01:00:01+01:00</pubDate>
	  <guid>http://localhost:4000/pitfalls-of-using-Mockito-with-Scala</guid>
	
		<description>&lt;p&gt;I need to test my new, shiny Scala code.
Usually I write tests in &lt;a href=&quot;http://www.scalatest.org/&quot;&gt;ScalaTest&lt;/a&gt;,
but for generating stubs I still use good, old
&lt;a href=&quot;https://site.mockito.org/&quot;&gt;Mockito&lt;/a&gt;.
What can possibly go wrong?
I open a new tab in my editor and start hacking test code.&lt;/p&gt;

</description>
	
	</item>

	<item>
	  <title>Ultimate guide to Scala's match expression</title>
	  <link>http://localhost:4000/ultimate-guide-to-scalas-match-expression</link>
	  <author>mc</author>
	  <pubDate>2019-09-19T02:00:01+02:00</pubDate>
	  <guid>http://localhost:4000/ultimate-guide-to-scalas-match-expression</guid>
	
		<description>&lt;p&gt;Scala &lt;code class=&quot;highlighter-rouge&quot;&gt;match&lt;/code&gt; expression is a very powerful tool.
In hands of an experienced developer it can be used to
create concise and easy to understand code,
yet novice programmers are often intimidated by it.
In this blog post I will describe how &lt;code class=&quot;highlighter-rouge&quot;&gt;match&lt;/code&gt; expression
work. We will start with the basics and finish with the extractors.
After reading this post you will know how &lt;code class=&quot;highlighter-rouge&quot;&gt;case List(a, b, c)&lt;/code&gt;
works and you will be able to write your own extractors.&lt;/p&gt;

</description>
	
	</item>


</channel>
</rss>
