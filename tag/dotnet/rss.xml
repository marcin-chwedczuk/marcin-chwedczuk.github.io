<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>marcin-chwedczuk.github.io/</title>
   
   <link>https://marcin-chwedczuk.github.io/</link>
   <description>A place where I can share my thoughts about programming</description>
   <language>en-uk</language>
   <managingEditor> marcin-chwedczuk</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Reduce cognitive load for readers of your code</title>
	  <link>//reduce-cognitive-load</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2019-03-05T01:00:00+01:00</pubDate>
	  <guid>//reduce-cognitive-load</guid>
	  <description><![CDATA[
	     <p>Recently I was reviewing a piece of code that was performing
some computation on file sizes. The author of that code
followed good programming practices and created a separate
type for representing file sizes:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">struct</span> <span class="nc">FileSize</span> <span class="p">{</span>
   <span class="k">public</span> <span class="k">static</span> <span class="n">FileSize</span> <span class="nf">FromBytes</span><span class="p">(</span><span class="kt">ulong</span> <span class="n">bytes</span><span class="p">)</span>
       <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">FileSize</span><span class="p">(</span><span class="n">bytes</span><span class="p">);</span>
   <span class="c1">// Other factory methods...
</span>   
   <span class="k">private</span> <span class="kt">ulong</span> <span class="n">_bytes</span><span class="p">;</span>
   <span class="k">public</span> <span class="kt">ulong</span> <span class="n">TotalBytes</span>
       <span class="p">=&gt;</span> <span class="n">_bytes</span><span class="p">;</span>
   
   <span class="k">public</span> <span class="nf">FileSize</span><span class="p">(</span><span class="kt">ulong</span> <span class="n">bytes</span><span class="p">)</span> <span class="p">{</span>
       <span class="n">_bytes</span> <span class="p">=</span> <span class="n">bytes</span><span class="p">;</span>
   <span class="p">}</span>
   <span class="c1">// Other stuff, equatable, comparable, blah...
</span>   
   <span class="k">public</span> <span class="k">override</span> <span class="kt">string</span> <span class="nf">ToString</span><span class="p">()</span>
       <span class="p">=&gt;</span> <span class="err">$</span><span class="s">"{_bytes:##,#B}"</span><span class="p">;</span>
   
   <span class="k">public</span> <span class="k">static</span> <span class="n">FileSize</span> <span class="k">operator</span><span class="p">+(</span><span class="n">FileSize</span> <span class="n">left</span><span class="p">,</span> <span class="n">FileSize</span> <span class="n">right</span><span class="p">)</span>
       <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">FileSize</span><span class="p">(</span><span class="k">checked</span><span class="p">(</span><span class="n">left</span><span class="p">.</span><span class="n">_bytes</span> <span class="p">+</span> <span class="n">right</span><span class="p">.</span><span class="n">_bytes</span><span class="p">));</span>
   <span class="c1">// Other operators...
</span><span class="p">}</span></code></pre></figure>

<p>Yet when it came to computing a total size of set of files I saw
code like this:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">var</span> <span class="n">totalSize</span> <span class="p">=</span> <span class="n">fileSizes</span><span class="p">.</span><span class="nf">Aggregate</span><span class="p">((</span><span class="n">acc</span><span class="p">,</span> <span class="n">curr</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">acc</span> <span class="p">+</span> <span class="n">curr</span><span class="p">);</span></code></pre></figure>

<p>What is wrong with this code?
It forces readers to concentrate on irrelevant details like how
to sum a list of <code class="highlighter-rouge">FileSize</code>s. As a programmer, reading a lot
of code I would prefer to see something like:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">var</span> <span class="n">totalSize</span> <span class="p">=</span> <span class="n">fileSizes</span><span class="p">.</span><span class="nf">Sum</span><span class="p">();</span></code></pre></figure>

<p>Which is shorter, easier to read and allows me to concentrate
on the actual business problem that I try to solve.</p>

<p>As an another example, imagine what would happen if people
started writing:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">var</span> <span class="n">listOfNumbers</span> <span class="p">=</span> <span class="n">Enumerable</span><span class="p">.</span><span class="nf">Range</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">10</span><span class="p">)</span>
	<span class="p">.</span><span class="nf">Aggregate</span><span class="p">(</span><span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;(),</span> <span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="n">el</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
		<span class="n">list</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">el</span><span class="p">);</span>
		<span class="k">return</span> <span class="n">list</span><span class="p">;</span>
	<span class="p">});</span></code></pre></figure>

<p>instead of:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">var</span> <span class="n">listOfNumbers</span> <span class="p">=</span> <span class="n">Enumerable</span><span class="p">.</span><span class="nf">Range</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">10</span><span class="p">)</span>
	<span class="p">.</span><span class="nf">ToList</span><span class="p">();</span></code></pre></figure>

<p>I hope that you agree with me that it would not be nice…</p>

<p>The general rule that is violated by both these examples
is called <em>Single level of abstraction principle</em>, you can read
more about it 
<a href="http://principles-wiki.net/principles:single_level_of_abstraction">here</a>.
In short it states that, all statements of a method should belong
to the same level of abstraction.
In other words we should not mix low and high level operations
in a single method. In our example <code class="highlighter-rouge">Aggregate</code> and details how
to use it are low level, computing a total size of set of files is
on the other hand a high level one.</p>

<p>Fortunately for us, we may quickly add appropriate <code class="highlighter-rouge">Sum</code> method
to our program:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">EnumerableOfFileSize</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="n">FileSize</span> <span class="nf">Sum</span><span class="p">(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">FileSize</span><span class="p">&gt;</span> <span class="n">sizes</span><span class="p">)</span>
      <span class="p">=&gt;</span> <span class="n">sizes</span><span class="p">.</span><span class="nf">Aggregate</span><span class="p">(</span><span class="n">FileSize</span><span class="p">.</span><span class="nf">FromBytes</span><span class="p">(</span><span class="m">0</span><span class="p">),</span> 
                         <span class="p">(</span><span class="n">total</span><span class="p">,</span> <span class="n">curr</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">total</span> <span class="p">+</span> <span class="n">curr</span><span class="p">);</span>

    <span class="cm">/* Or in more imperative style:
    public static FileSize Sum(this IEnumerable&lt;FileSize&gt; sizes) {
        ulong total = 0;

        foreach (var size in sizes) {
            total = checked(total + size.TotalBytes);
        }

        return new FileSize(total);
    }
    */</span>
<span class="p">}</span></code></pre></figure>

<p>After this change we achieved code that is easy to read and
also hides irrelevant details. Yay!</p>


	  ]]></description>
	</item>

	<item>
	  <title>FluentAssertions and code formatting</title>
	  <link>//fluent-assertions-and-code-formatting</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2019-02-10T01:00:00+01:00</pubDate>
	  <guid>//fluent-assertions-and-code-formatting</guid>
	  <description><![CDATA[
	     <p>Recently I was playing with
<a href="https://fluentassertions.com/">FluentAssertions</a>
library.
I was really amazed by the beautiful error messages generated by FluentAssertions.
For example, for this failing test:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="na">[Fact]</span>
<span class="k">public</span> <span class="k">void</span> <span class="nf">add_returns_sum_of_its_arguments</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Arrange
</span>    <span class="n">var</span> <span class="n">service</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ServiceA</span><span class="p">();</span>
    
    <span class="c1">// Assert
</span>    <span class="n">service</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">).</span><span class="nf">Should</span><span class="p">().</span><span class="nf">Be</span><span class="p">(</span><span class="m">3</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>FluentAssertions generates a message:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">Outcome: Failed
Error Message:
Expected service.Add(1, 2) to be 3, but found 42.</code></pre></figure>

<p>Unfortunatelly my joy did not last long.
When I added an explanation to an assertion and
broke the line because it got too long:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="na">[Fact]</span>
<span class="k">public</span> <span class="k">void</span> <span class="nf">add_returns_sum_of_its_arguments</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Arrange
</span>    <span class="n">var</span> <span class="n">service</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ServiceA</span><span class="p">();</span>

    <span class="c1">// Assert
</span>    <span class="n">service</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">Should</span><span class="p">().</span><span class="nf">Be</span><span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="n">because</span><span class="p">:</span> <span class="s">"three is sum of one and two"</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>FluentAssertions reproted just:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">Outcome: Failed
Error Message:
Expected value to be 3 because three is sum of one and two,
    but found 42.</code></pre></figure>

<p>It turns out, in order to have these fancy error messages,
we must place <code class="highlighter-rouge">.Should()</code> on the same line as the
tested expression:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="na">[Fact]</span>
<span class="k">public</span> <span class="k">void</span> <span class="nf">add_returns_sum_of_arguments</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Arrange
</span>    <span class="n">var</span> <span class="n">service</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ServiceA</span><span class="p">();</span>

    <span class="c1">// Assert
</span>    <span class="n">service</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">)</span><span class="cm">/*abra cadabra*/</span><span class="p">.</span><span class="nf">Should</span><span class="p">()</span>
        <span class="p">.</span><span class="nf">Be</span><span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="n">because</span><span class="p">:</span> <span class="s">"three is sum of one and two"</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>The above test generates a message:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">Outcome: Failed
Error Message:
Expected service.Add(1, 2)/*abra cadabra*/ to be 3 because three
   is sum of one and two, but found 42.</code></pre></figure>

<p>Notice that comment was also include in the message.</p>

<p>This behavior of FluentAssertions really suprised me.
Why the way we format our code have influence over
the readability of error messages?</p>

<p>Anyway this is how FluentAssertions works,
moreover this behaviour is described 
(with short explanation how it works) on the <em>first</em> page
of <a href="https://fluentassertions.com/documentation/#subject-identification">the official documentation</a>.
If only I have spend ten minutes reading the friendly docs instead of
skimming it…</p>

<p>From now on I will follow “Read The Friendly Manual” (RTFM) advice!!!</p>


	  ]]></description>
	</item>

	<item>
	  <title>Random thoughts on Maybe</title>
	  <link>//random-thoughts-on-maybe</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2019-01-01T01:00:00+01:00</pubDate>
	  <guid>//random-thoughts-on-maybe</guid>
	  <description><![CDATA[
	     <p>With functional programming on the rise nowadays, 
more and more people start using functional 
patterns in their code.
One of the simplest patterns is <code class="highlighter-rouge">Maybe&lt;T&gt;</code> monad
also called <code class="highlighter-rouge">Option&lt;T&gt;</code> or <code class="highlighter-rouge">Optional&lt;T&gt;</code>.
<code class="highlighter-rouge">Maybe&lt;T&gt;</code>’s primary use case is to represent a possibly
missing value.</p>

<p>I have already use <code class="highlighter-rouge">Maybe&lt;T&gt;</code> a few times in real
codebases and in this post I want to gather my thoughts
on <code class="highlighter-rouge">Maybe&lt;T&gt;</code> and how, I think, it should be used.</p>

<h4 id="why-we-use-maybet">Why we use <code class="highlighter-rouge">Maybe&lt;T&gt;</code>?</h4>

<p>Most people that use <code class="highlighter-rouge">Maybe&lt;T&gt;</code> generally fall into
one of the two categories.</p>

<h5 id="category-1-wants-to-eliminate-nullreferenceexception">Category 1: Wants to eliminate <code class="highlighter-rouge">NullReferenceException</code></h5>

<p>For a long time before <code class="highlighter-rouge">Maybe&lt;T&gt;</code> programmers tried to
clearly state to the clients of their API that a given
method may return <code class="highlighter-rouge">null</code> instead of an object.
Some of them used special naming conventions or 
comments, for example:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// Naming convention and XML documentation
// comments in action.
</span><span class="k">public</span> <span class="k">interface</span> <span class="n">IUserRepository</span> <span class="p">{</span>
    <span class="c1">/// &lt;returns&gt;
</span>    <span class="c1">/// Returns &lt;c&gt;null&lt;/c&gt; if user is not found.
</span>    <span class="c1">/// &lt;/returns&gt;
</span>    <span class="n">User</span> <span class="nf">FindById</span><span class="p">(</span><span class="n">UserId</span> <span class="n">id</span><span class="p">);</span>

    <span class="c1">/// &lt;exception cref="EntityNotFound"&gt;
</span>    <span class="c1">/// If user is not found.
</span>    <span class="c1">/// &lt;/exception&gt;
</span>    <span class="n">User</span> <span class="nf">FindRequiredById</span><span class="p">(</span><span class="n">UserId</span> <span class="n">id</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>Others resorted to using special marking attributes and
static code analysis tools. 
A good example of this category is 
<a href="https://www.nuget.org/packages/JetBrains.Annotations">JetBrains.Annotations</a> package, that can be used together with ReSharper
to detect missing null checks:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">interface</span> <span class="n">IUserRepository</span> <span class="p">{</span>
    <span class="p">[</span><span class="n">CanBeNull</span><span class="p">]</span>
    <span class="n">User</span> <span class="nf">FindById</span><span class="p">(</span><span class="n">UserId</span> <span class="n">id</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">interface</span> <span class="n">IUserService</span> <span class="p">{</span>
    <span class="k">void</span> <span class="nf">ActivateUser</span><span class="p">([</span><span class="n">NotNull</span><span class="p">]</span> <span class="n">User</span> <span class="n">user</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>Yet another solution to this problem were 
<a href="https://www.infoq.com/articles/code-contracts-csharp">Code Contracts</a>
developed by Microsoft.</p>

<p>None of those solutions is perfect and <code class="highlighter-rouge">Maybe&lt;T&gt;</code> seems
to offer a better alternative. 
Why? Because it is checked by the compiler,
does not require additional tools and does not slow
down compilation.
But remember there is 
<a href="https://en.wikipedia.org/wiki/No_Silver_Bullet">no silver bullet</a>,
and <code class="highlighter-rouge">Maybe&lt;T&gt;</code> is not perfect either.</p>

<p>We can use <code class="highlighter-rouge">Maybe&lt;T&gt;</code> like this:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">interface</span> <span class="n">IUserRepository</span> <span class="p">{</span>
    <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">User</span><span class="p">&gt;</span> <span class="nf">FindById</span><span class="p">(</span><span class="n">UserId</span> <span class="n">id</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">// and usage:
</span><span class="n">var</span> <span class="n">user</span> <span class="p">=</span> <span class="n">usersRepository</span><span class="p">.</span><span class="nf">FindById</span><span class="p">(</span><span class="n">userId</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="n">user</span><span class="p">.</span><span class="n">HasValue</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">user</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>

<p>If you find yourself in this category of programmers, 
you would definitely
want to use a lightweight library that
does not force you to embrace a more functional style.
One good library that I can recommend is: 
<a href="https://github.com/vkhorikov/CSharpFunctionalExtensions">CSharpFunctionalExtensions</a>.</p>

<p>If you choose a different library, please make sure to check
that <code class="highlighter-rouge">Maybe&lt;T&gt;</code> is implemented using <code class="highlighter-rouge">struct</code>, otherwise you
may be surprised:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Maybe</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">GetUserAgent</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>One small downside of using a <code class="highlighter-rouge">struct</code> is
possibility of declaration of a nullable <code class="highlighter-rouge">Maybe&lt;T&gt;</code> type:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// Don't do this:
</span><span class="n">Maybe</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;?</span> <span class="n">bad</span><span class="p">;</span></code></pre></figure>

<p>When I was writing this article I tried to gather some
best practices of using <code class="highlighter-rouge">Maybe&lt;T&gt;</code>. 
Unfortunately it was very difficult to provide a comprehensive
list. There is not much material on this on the web (I mean using 
<code class="highlighter-rouge">Maybe&lt;T&gt;</code> <em>not</em> in the FP fashion) and the available
material is often contradictory. 
And so instead of providing you with a list of best practices, 
I will only give you some hints where you can look for advice.</p>

<p>We should start our search by looking at
Java 8, which was published in 2014 and introduced 
<code class="highlighter-rouge">java.util.Optional&lt;T&gt;</code> class. 
The purpose of this class is to be a nullability marker
for method results just like our <code class="highlighter-rouge">Maybe&lt;T&gt;</code>. 
There are a lot of articles about how <code class="highlighter-rouge">Optional&lt;T&gt;</code> should
and should not be used. 
A good starting point will be 
<a href="https://stackoverflow.com/questions/26327957/should-java-8-getters-return-optional-type">this SO question</a>
with the first two answers. 
From this question alone we may learn e.g. to never wrap
a collection into <code class="highlighter-rouge">Maybe&lt;T&gt;</code>, 
instead of we should return a possibly empty collection.</p>

<p>The downside of reading Java’s best practices is that some
of them do not apply to C#. For example let’s look at the
advice given in <a href="https://stackoverflow.com/a/39005452/1779504">this SO answer</a>:</p>

<blockquote>
  <p>When a method can accept optional parameters, 
it’s preferable to adopt the well-proven approach 
and design such case using method overloading.</p>
</blockquote>

<p>In other words author suggest to change:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// this ctor:
</span><span class="k">public</span> <span class="nf">SystemMessage</span><span class="p">(</span>
    <span class="kt">string</span> <span class="n">title</span><span class="p">,</span>
    <span class="kt">string</span> <span class="n">body</span><span class="p">,</span>
    <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">Attachment</span><span class="p">&gt;</span> <span class="n">attachment</span><span class="p">);</span>

<span class="c1">// into two ctor's:
</span><span class="k">public</span> <span class="nf">SystemMessage</span><span class="p">(</span>
    <span class="kt">string</span> <span class="n">title</span><span class="p">,</span>
    <span class="kt">string</span> <span class="n">body</span><span class="p">,</span>
    <span class="n">Attachment</span> <span class="n">attachment</span><span class="p">);</span>

<span class="k">public</span> <span class="nf">SystemMessage</span><span class="p">(</span>
    <span class="kt">string</span> <span class="n">title</span><span class="p">,</span>
    <span class="kt">string</span> <span class="n">body</span><span class="p">);</span>

<span class="c1">// Because using these ctor's would be easier for
// the clients. Consider:
</span><span class="k">new</span> <span class="nf">SystemMessage</span><span class="p">(</span><span class="s">"foo"</span><span class="p">,</span> <span class="s">"bar"</span><span class="p">,</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">Attachment</span><span class="p">&gt;.</span><span class="n">None</span><span class="p">)</span>
<span class="k">new</span> <span class="nf">SystemMessage</span><span class="p">(</span><span class="s">"foo"</span><span class="p">,</span> <span class="s">"bar"</span><span class="p">,</span> 
    <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">Attachment</span><span class="p">&gt;.</span><span class="nf">From</span><span class="p">(</span><span class="n">attachment</span><span class="p">))</span>
<span class="c1">// vs
</span><span class="k">new</span> <span class="nf">SystemMessage</span><span class="p">(</span><span class="s">"foo"</span><span class="p">,</span> <span class="s">"bar"</span><span class="p">);</span>
<span class="k">new</span> <span class="nf">SystemMessage</span><span class="p">(</span><span class="s">"foo"</span><span class="p">,</span> <span class="s">"bar"</span><span class="p">,</span> <span class="n">attachment</span><span class="p">);</span></code></pre></figure>

<p>But this argument does not applies to C#, where we can
use implicit conversion operator with default parameters
to achieve exactly the same effect without using overloads:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">struct</span> <span class="nc">Maybe</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">{</span> 
    <span class="k">private</span> <span class="n">T</span> <span class="n">_value</span><span class="p">;</span>
    <span class="k">private</span> <span class="kt">bool</span> <span class="n">_present</span><span class="p">;</span>
    
    <span class="k">public</span> <span class="nf">Maybe</span><span class="p">(</span><span class="n">T</span> <span class="k">value</span><span class="p">)</span> <span class="p">{</span> 
        <span class="n">_value</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
        <span class="n">_present</span> <span class="p">=</span> <span class="p">(</span><span class="k">value</span> <span class="p">!=</span> <span class="k">null</span><span class="p">);</span>
    <span class="p">}</span>
    
    <span class="k">public</span> <span class="k">static</span> <span class="k">implicit</span> <span class="k">operator</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">T</span> <span class="k">value</span><span class="p">)</span>
        <span class="p">=&gt;</span> <span class="k">value</span> <span class="p">==</span> <span class="k">null</span> <span class="p">?</span> <span class="k">new</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;()</span> <span class="p">:</span> <span class="k">new</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">value</span><span class="p">);</span> 
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Attachment</span> <span class="p">{</span> <span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">SystemMessage</span> <span class="p">{</span>
    <span class="k">public</span> <span class="nf">SystemMessage</span><span class="p">(</span>
        <span class="kt">string</span> <span class="n">title</span><span class="p">,</span> <span class="kt">string</span> <span class="n">body</span><span class="p">,</span> 
        <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">Attachment</span><span class="p">&gt;</span> <span class="n">attachment</span> <span class="p">=</span> <span class="k">default</span><span class="p">(</span><span class="n">Maybe</span><span class="p">&lt;</span><span class="n">Attachment</span><span class="p">&gt;))</span> <span class="p">{</span> 
    <span class="p">}</span>
<span class="p">}</span>   

<span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span> <span class="p">{</span> 
        <span class="k">new</span> <span class="nf">SystemMessage</span><span class="p">(</span><span class="s">"foo"</span><span class="p">,</span> <span class="s">"bar"</span><span class="p">);</span>
        <span class="k">new</span> <span class="nf">SystemMessage</span><span class="p">(</span><span class="s">"foo"</span><span class="p">,</span> <span class="s">"bar"</span><span class="p">,</span> <span class="k">new</span> <span class="nf">Attachment</span><span class="p">());</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>As we can see every Java’ish advice must be taken with 
a grain of salt.</p>

<p>Fortunately for us there is more and more C# posts about
using <code class="highlighter-rouge">Maybe&lt;T&gt;</code>. For example <a href="https://enterprisecraftsmanship.com/2015/03/13/functional-c-non-nullable-reference-types/">this one</a>
from the author of CSharpFunctionalExtensions library.</p>

<p>Although I cannot provide you with a list of best practices,
I think I have gathered enough experience to provide
you with a list of <code class="highlighter-rouge">Maybe&lt;T&gt;</code> code smells:</p>

<ul>
  <li>Nested <code class="highlighter-rouge">Maybe</code>s are wrong, for example <code class="highlighter-rouge">Maybe&lt;Maybe&lt;string&gt;&gt;</code>.
 Usually this is a sign that you should replace one of
 <code class="highlighter-rouge">Map</code> calls by a <code class="highlighter-rouge">FlatMap</code> (alternatively a <code class="highlighter-rouge">Select</code> by a <code class="highlighter-rouge">SelectMany</code> call).</li>
  <li><code class="highlighter-rouge">Maybe</code>s that wrap collections are wrong, for example <code class="highlighter-rouge">Maybe&lt;List&lt;User&gt;&gt;</code>.
 Instead return a non-empty or empty collection.</li>
  <li><code class="highlighter-rouge">Maybe</code>s wrapping nullable types are wrong, for example <code class="highlighter-rouge">Maybe&lt;int?&gt;</code>.
 Instead convert nullable type <code class="highlighter-rouge">T?</code> to <code class="highlighter-rouge">Maybe&lt;T&gt;</code>. 
 Even if you chosen library does not support such conversion out of 
 the box, you may write an extension method that provides this functionality
 yourself:</li>
</ul>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">ToMaybe</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">T</span><span class="p">?</span> <span class="k">value</span><span class="p">)</span>
        <span class="n">where</span> <span class="n">T</span><span class="p">:</span> <span class="k">struct</span>
    <span class="err">=&gt;</span> <span class="nc">value</span><span class="p">.</span><span class="n">HasValue</span> <span class="p">?</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;.</span><span class="nf">From</span><span class="p">(</span><span class="k">value</span><span class="p">.</span><span class="n">Value</span><span class="p">)</span> <span class="p">:</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;.</span><span class="n">None</span><span class="p">;</span></code></pre></figure>

<ul>
  <li>Nested callbacks when using <code class="highlighter-rouge">Maybe&lt;T&gt;</code> fluent interface are wrong.
 For example:</li>
</ul>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// BAD Fluent interface spaghetti
</span><span class="n">var</span> <span class="n">cultureBad</span> <span class="p">=</span> <span class="n">user</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span>
    <span class="n">u</span> <span class="p">=&gt;</span> <span class="nf">LoadPreferences</span><span class="p">(</span><span class="n">u</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">prefs</span> <span class="p">=&gt;</span> <span class="n">prefs</span><span class="p">.</span><span class="n">Culture</span><span class="p">));</span>

<span class="c1">// GOOD, only one operation per Select method call
</span><span class="n">var</span> <span class="n">cultureGood</span> <span class="p">=</span> <span class="n">user</span>
    <span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">u</span> <span class="p">=&gt;</span> <span class="nf">LoadPreferences</span><span class="p">(</span><span class="n">u</span><span class="p">))</span>
    <span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">prefs</span> <span class="p">=&gt;</span> <span class="n">prefs</span><span class="p">.</span><span class="n">Culture</span><span class="p">);</span></code></pre></figure>

<p>Also be mindful when using <code class="highlighter-rouge">Maybe&lt;T&gt;</code> with properties.
A declaration like:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">Culture</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span></code></pre></figure>

<p>Means that you may both get and set an optional value.
In other words assignment of <code class="highlighter-rouge">None</code> value to this 
property should be valid:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">foo</span><span class="p">.</span><span class="n">Culture</span> <span class="p">=</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;.</span><span class="n">None</span><span class="p">;</span></code></pre></figure>

<p>A property that can return <code class="highlighter-rouge">None</code> but must be
set to some value should be split into a getter and a method:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// AVOID:
</span><span class="n">Maybe</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">Culture</span> <span class="p">{</span>
    <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;.</span><span class="nf">From</span><span class="p">(</span><span class="n">_culture</span><span class="p">);</span> <span class="p">}</span>
    <span class="k">set</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">value</span><span class="p">.</span><span class="n">HasNoValue</span><span class="p">)</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span><span class="s">"Culture cannot be empty."</span><span class="p">);</span>
        <span class="n">_culture</span> <span class="p">=</span> <span class="k">value</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// PREFER:
</span><span class="n">Maybe</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">Culture</span>
    <span class="p">=&gt;</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;.</span><span class="nf">From</span><span class="p">(</span><span class="n">_culture</span><span class="p">);</span>

<span class="k">void</span> <span class="nf">SetCulture</span><span class="p">(</span><span class="kt">string</span> <span class="n">culture</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">culture</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span><span class="s">"Culture cannot be empty."</span><span class="p">);</span>
    <span class="n">_culture</span> <span class="p">=</span> <span class="n">culture</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>As you probably heard C# 8.0 is going to introduce a nullable reference types (NRT).
Will NRT replace <code class="highlighter-rouge">Maybe&lt;T&gt;</code>?
For “Category 1” programmers, NRTs offer a better
alternative to <code class="highlighter-rouge">Maybe&lt;T&gt;</code>. On the other hand a lot of people
that start in “Category 1”, slowly begin to embrace more FP approach.
Usually people start by using <code class="highlighter-rouge">Maybe&lt;T&gt;</code> fluent interface to transform
one <code class="highlighter-rouge">Maybe&lt;T&gt;</code> value into another. After some time they take a leap and
switch to writing in a more functional fashion.</p>

<p>We may also take a look at <a href="https://kotlinlang.org/">Kotlin</a>,
a language created by JetBrains that from the very beginning 
<a href="https://kotlinlang.org/docs/reference/null-safety.html">offered nullable reference types</a>. 
And yet the most popular Kotlin functional library
<a href="https://github.com/MarioAriasC/funKTionale">funKTionale</a> 
still offers an <code class="highlighter-rouge">Option</code> type. 
So it looks like NRT or not, <code class="highlighter-rouge">Maybe&lt;T&gt;</code> is going to stay with us for sure.</p>

<h5 id="category-2-wants-to-embrace-fp-paradigm">Category 2: Wants to embrace FP paradigm</h5>

<p>Programmers belonging to this category embraced FP. They
often think about using F# at work and are a bit disappointed
by poor C# pattern matching facilities.</p>

<p>Code written in FP fashion will never use <code class="highlighter-rouge">if</code> to check
if <code class="highlighter-rouge">Maybe&lt;T&gt;</code> contains some value, instead a fluent interface
will be used to transform <code class="highlighter-rouge">Maybe&lt;T&gt;</code>s into some other values, for example:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">private</span> <span class="n">UserRepository</span> <span class="n">_userRepository</span><span class="p">;</span>

<span class="c1">// NOTICE: No if's in code
</span><span class="k">public</span> <span class="k">static</span> <span class="n">Option</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">GetUserCulture</span><span class="p">(</span><span class="kt">int</span> <span class="n">userId</span><span class="p">)</span>
    <span class="p">=&gt;</span> <span class="n">_userRepository</span><span class="p">.</span><span class="nf">FindById</span><span class="p">(</span><span class="n">userId</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">BiMap</span><span class="p">(</span>
            <span class="n">Some</span><span class="p">:</span> <span class="n">user</span> <span class="p">=&gt;</span> <span class="nf">GetUserCulture</span><span class="p">(</span><span class="n">user</span><span class="p">),</span>
            <span class="n">None</span><span class="p">:</span> <span class="n">_</span> <span class="p">=&gt;</span> <span class="k">null</span><span class="p">);</span>

<span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">GetUserCulture</span><span class="p">(</span><span class="n">User</span> <span class="n">user</span><span class="p">)</span>
    <span class="p">=&gt;</span> <span class="n">user</span><span class="p">.</span><span class="n">Preferences</span>    
            <span class="p">.</span><span class="nf">Map</span><span class="p">(</span><span class="n">prefs</span> <span class="p">=&gt;</span> <span class="n">prefs</span><span class="p">.</span><span class="n">Culture</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">IfNone</span><span class="p">(</span><span class="s">"en-US"</span><span class="p">);</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">UserRepository</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">User</span><span class="p">&gt;</span> <span class="n">_users</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">User</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="k">new</span> <span class="nf">User</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="k">null</span><span class="p">),</span>
        <span class="k">new</span> <span class="nf">User</span><span class="p">(</span><span class="m">2</span><span class="p">,</span> <span class="k">new</span> <span class="n">UserPreferences</span> <span class="p">{</span>
            <span class="n">Culture</span> <span class="p">=</span> <span class="s">"pl-PL"</span>
        <span class="p">})</span>
    <span class="p">};</span>

    <span class="c1">// NOTICE: Extra extension methods for IEnumerable&lt;T&gt;
</span>    <span class="c1">// that return Option&lt;T&gt; instead of null's.
</span>    <span class="k">public</span> <span class="n">Option</span><span class="p">&lt;</span><span class="n">User</span><span class="p">&gt;</span> <span class="nf">FindById</span><span class="p">(</span><span class="kt">int</span> <span class="n">userId</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">_users</span><span class="p">.</span><span class="nf">Find</span><span class="p">(</span><span class="n">u</span> <span class="p">=&gt;</span> <span class="n">u</span><span class="p">.</span><span class="n">UserId</span> <span class="p">==</span> <span class="n">userId</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">User</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">UserId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">private</span> <span class="n">UserPreferences</span> <span class="n">_preferences</span><span class="p">;</span>
    <span class="k">public</span> <span class="n">Option</span><span class="p">&lt;</span><span class="n">UserPreferences</span><span class="p">&gt;</span> <span class="n">Preferences</span>
        <span class="p">=&gt;</span> <span class="nf">Optional</span><span class="p">(</span><span class="n">_preferences</span><span class="p">);</span>

    <span class="k">public</span> <span class="nf">User</span><span class="p">(</span><span class="kt">int</span> <span class="n">userId</span><span class="p">,</span> <span class="n">UserPreferences</span> <span class="n">preferences</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">UserId</span> <span class="p">=</span> <span class="n">userId</span><span class="p">;</span>
        <span class="n">_preferences</span> <span class="p">=</span> <span class="n">preferences</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">UserPreferences</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Culture</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Alternatively we may change our previous method to:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">GetUserCulture2</span><span class="p">(</span><span class="kt">int</span> <span class="n">userId</span><span class="p">)</span>
    <span class="p">=&gt;</span> <span class="n">_userRepository</span><span class="p">.</span><span class="nf">FindById</span><span class="p">(</span><span class="n">userId</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">Bind</span><span class="p">(</span><span class="n">user</span> <span class="p">=&gt;</span> <span class="n">user</span><span class="p">.</span><span class="n">Preferences</span><span class="p">)</span> <span class="c1">// FlatMap
</span>        <span class="p">.</span><span class="nf">Map</span><span class="p">(</span><span class="n">prefs</span> <span class="p">=&gt;</span> <span class="n">prefs</span><span class="p">.</span><span class="n">Culture</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">IfNone</span><span class="p">(</span><span class="s">"en-US"</span><span class="p">);</span> <span class="p">//</span> <span class="k">default</span> <span class="n">culture</span></code></pre></figure>

<p>The only difference between these two methods
is the value returned for users not present in the repository.
<code class="highlighter-rouge">GetUserCulture</code> returns for them <code class="highlighter-rouge">None()</code> but <code class="highlighter-rouge">GetUserCulture2</code>
returns a default culture (<code class="highlighter-rouge">Some("en-US")</code>).</p>

<p>Another sign of a functional design, is that monads like <code class="highlighter-rouge">Maybe&lt;T&gt;</code>
will be unpacked only on the outskirts of the application.
For example in a typical RESTful service, <code class="highlighter-rouge">Maybe&lt;T&gt;</code> value will 
be unpacked only in the controller:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// GET /user/{userId}/culture
</span><span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Get</span><span class="p">(</span><span class="kt">int</span> <span class="n">userId</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// WARNING: In real apps do not return bare strings 
</span>    <span class="c1">// from the REST api. 
</span>    <span class="c1">// Always wrap them in DTOs / ViewModels / QueryResponses.
</span>    <span class="n">Maybe</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">culture</span> <span class="p">=</span> <span class="nf">GetUserCulture</span><span class="p">();</span>
    <span class="k">return</span> <span class="nf">Maybe</span><span class="p">(</span><span class="n">culture</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Presumably in the base controller
</span><span class="k">public</span> <span class="n">IActionResult</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">Maybe</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">m</span><span class="p">)</span>
    <span class="p">=&gt;</span> <span class="n">m</span><span class="p">.</span><span class="nf">Map</span><span class="p">(</span><span class="k">value</span> <span class="p">=&gt;</span> <span class="nf">Ok</span><span class="p">(</span><span class="k">value</span><span class="p">))</span>
        <span class="p">.</span><span class="nf">IfNone</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nf">NotFound</span><span class="p">());</span></code></pre></figure>

<p>In this category of programmers there is also a small group
of zealots, that in my opinion go a little bit to far in their cult of monads. 
They propose to use LINQ query syntax to transform monads.
Let my explain this using an example:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// We want to sum three Option&lt;int&gt; values.
</span><span class="k">private</span> <span class="k">static</span> <span class="n">Option</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">GetOptionalInt</span><span class="p">()</span>
    <span class="p">=&gt;</span> <span class="m">3</span><span class="p">;</span>

<span class="c1">// Using fluent interface:
</span><span class="n">var</span> <span class="n">sum</span> <span class="p">=</span> <span class="nf">GetOptionalInt</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">SelectMany</span><span class="p">(</span><span class="n">_</span> <span class="p">=&gt;</span> <span class="nf">GetOptionalInt</span><span class="p">(),</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">+</span><span class="n">b</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">SelectMany</span><span class="p">(</span><span class="n">_</span> <span class="p">=&gt;</span> <span class="nf">GetOptionalInt</span><span class="p">(),</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">+</span><span class="n">b</span><span class="p">);</span>

<span class="c1">// Using LINQ query:
</span><span class="n">var</span> <span class="n">sum2</span> <span class="p">=</span>  <span class="n">from</span> <span class="n">n1</span> <span class="k">in</span> <span class="nf">GetOptionalInt</span><span class="p">()</span>
            <span class="n">from</span> <span class="n">n2</span> <span class="k">in</span> <span class="nf">GetOptionalInt</span><span class="p">()</span>
            <span class="n">from</span> <span class="n">n3</span> <span class="k">in</span> <span class="nf">GetOptionalInt</span><span class="p">()</span>
            <span class="n">select</span> <span class="n">n1</span><span class="p">+</span><span class="n">n2</span><span class="p">+</span><span class="n">n3</span><span class="p">;</span></code></pre></figure>

<p>I must admin that LINQ query offers some advantages like
ability to use <code class="highlighter-rouge">let</code> and <code class="highlighter-rouge">where</code> keywords. Also some transformations
may be easier to express using LINQ query syntax, for example:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">var</span> <span class="n">sum2</span> <span class="p">=</span>  
    <span class="n">from</span> <span class="n">n1</span> <span class="k">in</span> <span class="nf">GetOptionalInt</span><span class="p">()</span>
    <span class="n">from</span> <span class="n">n2</span> <span class="k">in</span> <span class="nf">GetOptionalInt</span><span class="p">()</span>
    <span class="n">from</span> <span class="n">n3</span> <span class="k">in</span> <span class="nf">GetOptionalInt</span><span class="p">()</span>
    <span class="n">let</span> <span class="n">max</span> <span class="p">=</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Max</span><span class="p">(</span><span class="n">n1</span><span class="p">,</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Max</span><span class="p">(</span><span class="n">n2</span><span class="p">,</span> <span class="n">n3</span><span class="p">))</span>
    <span class="n">let</span> <span class="n">min</span> <span class="p">=</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Min</span><span class="p">(</span><span class="n">n1</span><span class="p">,</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Min</span><span class="p">(</span><span class="n">n2</span><span class="p">,</span> <span class="n">n3</span><span class="p">))</span>
    <span class="n">where</span> <span class="n">min</span> <span class="p">!=</span> <span class="m">0</span>
    <span class="n">select</span> <span class="n">max</span> <span class="p">/</span> <span class="n">min</span><span class="p">;</span></code></pre></figure>

<p>Yet in my opinion fluent interface is in 90% of cases 
a more readable and understandable way 
to transform <code class="highlighter-rouge">Maybe&lt;T&gt;</code>s and other monads.
For example we may rewrite the last code snippet to:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">var</span> <span class="n">res</span> <span class="p">=</span> <span class="nf">Combine</span><span class="p">(</span>
        <span class="nf">GetOptionalInt</span><span class="p">(),</span>
        <span class="nf">GetOptionalInt</span><span class="p">(),</span>
        <span class="nf">GetOptionalInt</span><span class="p">()</span>
    <span class="p">)</span>
    <span class="p">.</span><span class="nf">Map</span><span class="p">(</span><span class="n">nnn</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="p">(</span><span class="n">var</span> <span class="n">n1</span><span class="p">,</span> <span class="n">var</span> <span class="n">n2</span><span class="p">,</span> <span class="n">var</span> <span class="n">n3</span><span class="p">)</span> <span class="p">=</span> <span class="n">nnn</span><span class="p">;</span>
        <span class="k">return</span> <span class="k">new</span> <span class="p">{</span> 
            <span class="n">Max</span> <span class="p">=</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Max</span><span class="p">(</span><span class="n">n1</span><span class="p">,</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Max</span><span class="p">(</span><span class="n">n2</span><span class="p">,</span> <span class="n">n3</span><span class="p">)),</span>
            <span class="n">Min</span> <span class="p">=</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Min</span><span class="p">(</span><span class="n">n1</span><span class="p">,</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Min</span><span class="p">(</span><span class="n">n2</span><span class="p">,</span> <span class="n">n3</span><span class="p">))</span>
        <span class="p">};</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nf">Filter</span><span class="p">(</span><span class="n">m</span> <span class="p">=&gt;</span> <span class="n">m</span><span class="p">.</span><span class="n">Min</span> <span class="p">!=</span> <span class="m">0</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">Map</span><span class="p">(</span><span class="n">m</span> <span class="p">=&gt;</span> <span class="n">m</span><span class="p">.</span><span class="n">Max</span> <span class="p">/</span> <span class="n">m</span><span class="p">.</span><span class="n">Min</span><span class="p">);</span>

<span class="c1">// We need a few utils
</span><span class="k">private</span> <span class="k">static</span> <span class="n">Option</span><span class="p">&lt;(</span><span class="n">T</span><span class="p">,</span><span class="n">T</span><span class="p">)&gt;</span> <span class="n">Combine</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">Option</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">a</span><span class="p">,</span> <span class="n">Option</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">b</span><span class="p">)</span>
    <span class="p">=&gt;</span> <span class="n">a</span><span class="p">.</span><span class="nf">SelectMany</span><span class="p">(</span>
            <span class="n">_</span> <span class="p">=&gt;</span> <span class="n">b</span><span class="p">,</span>
            <span class="p">(</span><span class="n">aValue</span><span class="p">,</span> <span class="n">bValue</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="n">aValue</span><span class="p">,</span> <span class="n">bValue</span><span class="p">));</span>

<span class="k">private</span> <span class="k">static</span> <span class="n">Option</span><span class="p">&lt;(</span><span class="n">T</span><span class="p">,</span><span class="n">T</span><span class="p">,</span><span class="n">T</span><span class="p">)&gt;</span> <span class="n">Combine</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">Option</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">a</span><span class="p">,</span> <span class="n">Option</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">b</span><span class="p">,</span> <span class="n">Option</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">c</span><span class="p">)</span>
    <span class="p">=&gt;</span> <span class="nf">Combine</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">SelectMany</span><span class="p">(</span>
            <span class="n">_</span> <span class="p">=&gt;</span> <span class="n">c</span><span class="p">,</span>
            <span class="p">(</span><span class="n">tt</span><span class="p">,</span> <span class="n">cValue</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="n">tt</span><span class="p">.</span><span class="n">Item1</span><span class="p">,</span> <span class="n">tt</span><span class="p">.</span><span class="n">Item2</span><span class="p">,</span> <span class="n">cValue</span><span class="p">));</span></code></pre></figure>

<p>Not as pretty as LINQ query but still readable.</p>

<p>At the end of the day consistency is what matters on real
projects. Choose one style and follow it consistently.</p>

<p>In this category we find libraries like 
<a href="https://github.com/louthy/language-ext">LanguageExt</a>.
This library has many flaws but still it is the best 
functional library on the market. 
My biggest disappointment with LanguageExt is poor documentation,
which basically consists of just a list of functions without any guidelines how
this library should be used and how it affects overall architecture.
Compare this with <a href="https://www.vavr.io/vavr-docs/">Vavr</a>
(the most popular FP library for JVM) and you can clearly
see the difference.</p>

<p>If you decided that you want to use FP in you code, you
should definitively check awesome
<a href="https://fsharpforfunandprofit.com/rop/">Railway oriented programming</a>
talk.</p>

<p><code class="highlighter-rouge">Maybe&lt;T&gt;</code> is not the only monad that is popular, other
frequently used one is <code class="highlighter-rouge">Either&lt;L,R&gt;</code>. 
<code class="highlighter-rouge">Either&lt;L,R&gt;</code> is used to represent either a result of computation or an error.
You may think of <code class="highlighter-rouge">Either&lt;L,R&gt;</code> as a functional response to exceptions.
If you want to use <code class="highlighter-rouge">Maybe&lt;T&gt;</code> efficiently, you must learn 
how it can be transformed it into other monads, in particular into <code class="highlighter-rouge">Either&lt;L,R&gt;</code>.
E.g. we may make our last example more robust if we provide
information to the user why the computation failed:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">var</span> <span class="n">result</span> <span class="p">=</span> <span class="nf">Combine</span><span class="p">(</span>
    <span class="nf">GetOptionalInt</span><span class="p">(),</span>
    <span class="nf">GetOptionalInt</span><span class="p">(),</span>
    <span class="nf">GetOptionalInt</span><span class="p">()</span>
    <span class="p">)</span>
    <span class="p">.</span><span class="nf">Map</span><span class="p">(</span><span class="n">ttt</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="p">(</span><span class="n">var</span> <span class="n">n1</span><span class="p">,</span> <span class="n">var</span> <span class="n">n2</span><span class="p">,</span> <span class="n">var</span> <span class="n">n3</span><span class="p">)</span> <span class="p">=</span> <span class="n">ttt</span><span class="p">;</span>
        <span class="k">return</span> <span class="k">new</span> <span class="p">{</span> 
            <span class="n">Max</span> <span class="p">=</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Max</span><span class="p">(</span><span class="n">n1</span><span class="p">,</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Max</span><span class="p">(</span><span class="n">n2</span><span class="p">,</span> <span class="n">n3</span><span class="p">)),</span>
            <span class="n">Min</span> <span class="p">=</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Min</span><span class="p">(</span><span class="n">n1</span><span class="p">,</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Min</span><span class="p">(</span><span class="n">n2</span><span class="p">,</span> <span class="n">n3</span><span class="p">))</span>
        <span class="p">};</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nf">ToEither</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nf">Error</span><span class="p">(</span><span class="s">"Not all values are available."</span><span class="p">))</span>
    <span class="p">.</span><span class="nf">Bind</span><span class="p">(</span><span class="n">m</span> <span class="p">=&gt;</span> <span class="nf">Divide</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">Max</span><span class="p">,</span> <span class="n">m</span><span class="p">.</span><span class="n">Min</span><span class="p">));</span> <span class="c1">// FlatMap
</span>
<span class="n">Either</span><span class="p">&lt;</span><span class="n">Error</span><span class="p">,</span> <span class="kt">int</span><span class="p">&gt;</span> <span class="nf">Divide</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">b</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span> <span class="k">return</span> <span class="nf">Left</span><span class="p">(</span><span class="nf">Error</span><span class="p">(</span><span class="s">"Cannot divide by zero"</span><span class="p">));</span>
    <span class="k">return</span> <span class="nf">Right</span><span class="p">(</span><span class="n">a</span> <span class="p">/</span> <span class="n">b</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Helper classes:
</span><span class="k">public</span> <span class="k">class</span> <span class="nc">Error</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Message</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="nf">Error</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">Message</span> <span class="p">=</span> <span class="n">message</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">override</span> <span class="kt">string</span> <span class="nf">ToString</span><span class="p">()</span>
        <span class="p">=&gt;</span> <span class="err">$</span><span class="s">"Error({Message})"</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">ErrorHelpers</span> <span class="p">{</span>
    <span class="c1">// For `using static` import...
</span>    <span class="k">public</span> <span class="k">static</span> <span class="n">Error</span> <span class="nf">Error</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">)</span>
        <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">Error</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>Since FP is on the rise, you will find a lot of books, blogs, podcasts
and MOOC’s about using FP in C#. Also .NET has amazing F# community
that is very welcoming to the beginners.
One of the best blogs about FP in C# is in my opinion
<a href="http://blog.ploeh.dk/archive/">Mark Seemann blog</a>.</p>

<h4 id="what-to-do-with-none">What to do with None?</h4>

<p>How much value you will be able to extract from <code class="highlighter-rouge">Maybe&lt;T&gt;</code> depends on
your attitude towards <code class="highlighter-rouge">None</code>s. 
Every time when you have to handle <code class="highlighter-rouge">None</code>, you must decide if it is 
the result of 
<a href="https://www.quora.com/What-are-essential-and-accidental-complexity">the accidental complexity</a>
e.g. someone passed a wrong id to the REST API) 
or if you just discovered a new edge case in your domain.</p>

<p>To better understand the problem let’s follow an imaginary example.
Joe must write a simple function that will
send an email message to all users whose subscriptions will end in the next month.
During implementation Joe notices that <code class="highlighter-rouge">EmailAddress</code> field in <code class="highlighter-rouge">User</code> entity 
is declared as <code class="highlighter-rouge">Option&lt;Email&gt;</code>:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">User</span> <span class="p">{</span>
    <span class="k">public</span> <span class="n">Option</span><span class="p">&lt;</span><span class="n">Email</span><span class="p">&gt;</span> <span class="n">EmailAddress</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="c1">// ...
</span><span class="p">}</span></code></pre></figure>

<p>Now Joe knows that for some strange reason not all users have email addresses.
Joe logs into production DB to confirm that some email addresses are missing 
and indeed they are. Looks like Joe just discovered a new edge case.
Joe goes to Mark a business analyst to describe the problem. Mark is a long
timer in the company and knows that for a short period of time users
were able to log into the platform using their phone numbers instead of emails.
A new solution is created. Users that have no email address will receive 
a text message instead of an email. Also users without email will be asked to
enter their email address next time they log into the platform. Success!</p>

<p>On the other hand consider what will happen if Joe just
dig out the email address from <code class="highlighter-rouge">Maybe&lt;T&gt;</code> by accessing <code class="highlighter-rouge">Value</code> or if he just
log a warning about missing email address 
without telling anyone from the business side?</p>

<h5 id="end-of-the-part-i">End of the part I</h5>

<p>Soon I will write a follow up to this post in which 
we will try to implement a perfect <code class="highlighter-rouge">Maybe&lt;T&gt;</code> type on our own and we will see
that it is not an easy task in C#.</p>


	  ]]></description>
	</item>

	<item>
	  <title>NSubstitute and the search for perfect error messages</title>
	  <link>//nsubstitute-and-the-search-for-perfect-error-messages</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2018-12-15T01:00:00+01:00</pubDate>
	  <guid>//nsubstitute-and-the-search-for-perfect-error-messages</guid>
	  <description><![CDATA[
	     <p>Those of us that practice TDD daily already know how important good
error messages in tests are. After all writing a failing test that
<em>clearly</em> states what functionality the program 
is missing is the first step in TDD cycle.
The rest of us that either can’t or simply don’t want to practice TDD
must put extra effort to ensure that tests always fail
with meaningful error messages.
Unfortunately, according to what I have learned from my personal experience, 
the most devs either don’t have
enough time or simply don’t bother to check if their tests fail with
something meaningful. For average Joe developer writing tests and
making them green is already a lot of work. 
Things like good test names and proper error messages are often forgotten.</p>

<p>But the developers are not the only one here to blame. 
Too often tools and libraries that supposedly should make unit testing
simpler and easier, generate horrible and often cryptic error messages.</p>

<p>In this post we will take a close look at 
<a href="http://nsubstitute.github.io/">NSubstitute</a>,
a modern and popular mocking libary for .NET and see 
how we can improve messages generated by its argument matchers.</p>

<p>Let’s start by looking at a simple test. 
It demonstrates how NSubstitute is often used to assert that 
a method was called with an argument in a certain state:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">PlainArgument</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">FirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">LastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">EmailAddress</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="nf">PlainArgument</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">firstName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">lastName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">emailAddress</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">Id</span> <span class="p">=</span> <span class="n">id</span><span class="p">;</span>
        <span class="n">FirstName</span> <span class="p">=</span> <span class="n">firstName</span><span class="p">;</span>
        <span class="n">LastName</span> <span class="p">=</span> <span class="n">lastName</span><span class="p">;</span>
        <span class="n">EmailAddress</span> <span class="p">=</span> <span class="n">emailAddress</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">interface</span> <span class="n">IFooService</span> <span class="p">{</span>
    <span class="k">void</span> <span class="nf">DoStuff</span><span class="p">(</span><span class="kt">object</span> <span class="n">argument</span><span class="p">);</span>
<span class="p">}</span>

<span class="na">[Fact]</span>
<span class="k">public</span> <span class="k">void</span> <span class="nf">Checking_argument_using_Arg_Is</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Act
</span>    <span class="n">_component</span><span class="p">.</span><span class="nf">DoStuff</span><span class="p">();</span>

    <span class="c1">// Assert
</span>    <span class="n">_fooService</span><span class="p">.</span><span class="nf">Received</span><span class="p">()</span>
        <span class="p">.</span><span class="nf">DoStuff</span><span class="p">(</span><span class="n">Arg</span><span class="p">.</span><span class="n">Is</span><span class="p">&lt;</span><span class="n">PlainArgument</span><span class="p">&gt;(</span>
            <span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="m">9</span> <span class="p">&amp;&amp;</span>
                 <span class="n">e</span><span class="p">.</span><span class="n">FirstName</span> <span class="p">==</span> <span class="s">"jan"</span> <span class="p">&amp;&amp;</span>
                 <span class="n">e</span><span class="p">.</span><span class="n">LastName</span> <span class="p">==</span> <span class="s">"kowalski"</span> <span class="p">&amp;&amp;</span>
                 <span class="n">e</span><span class="p">.</span><span class="n">EmailAddress</span> <span class="p">==</span> <span class="s">"jan.kowalski@gmail.com"</span>
                 <span class="p">));</span>
<span class="p">}</span></code></pre></figure>

<p>When the argument passed to the checked method
was in an unexpected state (e.g. first name was not “jan” but “john”),
we get an error message similar to (formatting added):</p>

<figure class="highlight"><pre><code class="language-nohighlight" data-lang="nohighlight">Expected to receive a call matching:
    DoStuff(e =&gt; ((((e.Id == 9) AndAlso 
        (e.FirstName == "jan")) AndAlso 
        (e.LastName == "kowalski")) AndAlso 
        (e.EmailAddress == "jan.kowalski@gmail.com")))
Actually received no matching calls.
Received 1 non-matching call (non-matching arguments indicated 
with '*' characters):
    DoStuff(*PlainArgument*)</code></pre></figure>

<p>This error message is terrible.
It contains a lot of informations that are easily obtainable by looking at the
test method’s source code. Yet it does not contain
the most important piece of information that we need: which properties 
have unexpected values and what these values are.</p>

<p>We can slightly improve this error message by overloading <code class="highlighter-rouge">ToString</code> method
on <code class="highlighter-rouge">PlainArgument</code> class. 
Let’s call this new class <code class="highlighter-rouge">StringableArgument</code>:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">StringableArgument</span> <span class="p">{</span>
    <span class="c1">// the same code as in PlainArgument
</span>    <span class="k">public</span> <span class="k">override</span> <span class="kt">string</span> <span class="nf">ToString</span><span class="p">()</span>
        <span class="p">=&gt;</span> <span class="err">$</span><span class="s">"{nameof(StringableArgument)}(id: {Id}, firstName: \"{FirstName}\", "</span> <span class="p">+</span>
            <span class="err">$</span><span class="s">"lastName: \"{LastName}\", emailAddres: \"{EmailAddress}\")"</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// in a test method:
</span><span class="n">_fooService</span><span class="p">.</span><span class="nf">Received</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">DoStuff</span><span class="p">(</span><span class="n">Arg</span><span class="p">.</span><span class="n">Is</span><span class="p">&lt;</span><span class="n">StringableArgument</span><span class="p">&gt;(</span>
        <span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="m">9</span> <span class="p">&amp;&amp;</span>
             <span class="n">e</span><span class="p">.</span><span class="n">FirstName</span> <span class="p">==</span> <span class="s">"jan"</span> <span class="p">&amp;&amp;</span>
             <span class="n">e</span><span class="p">.</span><span class="n">LastName</span> <span class="p">==</span> <span class="s">"kowalski"</span> <span class="p">&amp;&amp;</span>
             <span class="n">e</span><span class="p">.</span><span class="n">EmailAddress</span> <span class="p">==</span> <span class="s">"jan.kowalski@gmail.com"</span>
             <span class="p">));</span></code></pre></figure>

<p>Now the error message looks similar to (formatting added):</p>

<figure class="highlight"><pre><code class="language-nohighlight" data-lang="nohighlight">Expected to receive a call matching:
    DoStuff(e =&gt; ((((e.Id == 9) AndAlso 
        (e.FirstName == "jan")) AndAlso 
        (e.LastName == "kowalski")) AndAlso 
        (e.EmailAddress == "jan.kowalski@gmail.com")))
Actually received no matching calls.
Received 1 non-matching call (non-matching arguments indicated 
with '*' characters):
    DoStuff(*StringableArgument(
        id: 7, firstName: "john", 
        lastName: "doe", 
        emailAddres: "john.doe@gmail.com")*)</code></pre></figure>

<p>This is better than before. 
Now we can see both expected and actual values of the 
matched argument’s properties.</p>

<p>One drawback of this approach is that 
the quality of the error message depends on the quality of
<code class="highlighter-rouge">ToString</code> implementation. 
If we are using AOP solution like
<a href="https://github.com/Fody/Fody">Fody</a> to generate <code class="highlighter-rouge">ToString</code> implementations
for most of our classes, then this solution may be good enough. 
On the other hand if we are generating and updating our <code class="highlighter-rouge">ToString</code> methods
manually (even if this means pressing a shortcut in our IDE)
then I would prefer to look for a better solution that is totally automatic.</p>

<p>There is also another problem that we were ignoring so far.
Consider what will happen if we add a new field to our <code class="highlighter-rouge">StringableArgument</code>
class. 
Because we are using property access syntax inside of a lambda expression,
our existing matchers will not only compile without any problems when
we add a new field, they will also pass!
In order to ensure that our matchers and tests remain valid,
we must go through all argument matchers 
for <code class="highlighter-rouge">StringableArgument</code> class and make sure that they use 
the newly added field.</p>

<p>The above problem may be solved by moving equality checking
to the <code class="highlighter-rouge">StringableArgument</code> class itself. 
Let’s call this new class <code class="highlighter-rouge">EquotableArgument</code>:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">EquotableArgument</span> <span class="p">:</span> <span class="n">IEquatable</span><span class="p">&lt;</span><span class="n">EquotableArgument</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">FirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">LastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">EmailAddress</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="nf">EquotableArgument</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">firstName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">lastName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">emailAddress</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">Id</span> <span class="p">=</span> <span class="n">id</span><span class="p">;</span>
        <span class="n">FirstName</span> <span class="p">=</span> <span class="n">firstName</span><span class="p">;</span>
        <span class="n">LastName</span> <span class="p">=</span> <span class="n">lastName</span><span class="p">;</span>
        <span class="n">EmailAddress</span> <span class="p">=</span> <span class="n">emailAddress</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">override</span> <span class="kt">string</span> <span class="nf">ToString</span><span class="p">()</span>
        <span class="p">=&gt;</span> <span class="err">$</span><span class="s">"{nameof(StringableArgument)}(id: {Id}, firstName: \"{FirstName}\", "</span> <span class="p">+</span>
            <span class="err">$</span><span class="s">"lastName: \"{LastName}\", emailAddres: \"{EmailAddress}\")"</span><span class="p">;</span>

    <span class="k">public</span> <span class="kt">bool</span> <span class="nf">Equals</span><span class="p">(</span><span class="n">EquotableArgument</span> <span class="n">other</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">other</span> <span class="k">is</span> <span class="k">null</span><span class="p">)</span> <span class="k">return</span> <span class="k">false</span><span class="p">;</span>

        <span class="k">return</span> <span class="nf">ToTuple</span><span class="p">(</span><span class="k">this</span><span class="p">)</span> <span class="p">==</span> <span class="nf">ToTuple</span><span class="p">(</span><span class="n">other</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">Equals</span><span class="p">(</span><span class="kt">object</span> <span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">obj</span> <span class="k">is</span> <span class="n">EquotableArgument</span> <span class="n">other</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nf">Equals</span><span class="p">(</span><span class="n">other</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">override</span> <span class="kt">int</span> <span class="nf">GetHashCode</span><span class="p">()</span>
        <span class="p">=&gt;</span> <span class="nf">ToTuple</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nf">GetHashCode</span><span class="p">();</span>

    <span class="k">private</span> <span class="k">static</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">)</span> <span class="nf">ToTuple</span><span class="p">(</span><span class="n">EquotableArgument</span> <span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span><span class="n">arg</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span> <span class="n">arg</span><span class="p">.</span><span class="n">FirstName</span><span class="p">,</span> <span class="n">arg</span><span class="p">.</span><span class="n">LastName</span><span class="p">,</span> <span class="n">arg</span><span class="p">.</span><span class="n">EmailAddress</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// in a test method:
</span><span class="n">_fooService</span><span class="p">.</span><span class="nf">Received</span><span class="p">()</span>
    <span class="c1">// NOTICE: We no longer use a lambda expression.
</span>    <span class="p">.</span><span class="nf">DoStuff</span><span class="p">(</span><span class="n">Arg</span><span class="p">.</span><span class="nf">Is</span><span class="p">(</span><span class="k">new</span> <span class="nf">EquotableArgument</span><span class="p">(</span>
        <span class="n">id</span><span class="p">:</span> <span class="m">9</span><span class="p">,</span> 
        <span class="n">firstName</span><span class="p">:</span> <span class="s">"jan"</span><span class="p">,</span> 
        <span class="n">lastName</span><span class="p">:</span> <span class="s">"kowalski"</span><span class="p">,</span>
        <span class="n">emailAddress</span><span class="p">:</span> <span class="s">"jan.kowalski@gmail.com"</span><span class="p">)));</span></code></pre></figure>

<p>With this solution it is impossible to forget to update our matchers
when we add a new field.
We also get a slightly better error message (formatting added):</p>

<figure class="highlight"><pre><code class="language-nohighlight" data-lang="nohighlight">Expected to receive a call matching:
    DoStuff(StringableArgument(
        id: 9, firstName: "jan", 
        lastName: "kowalski", 
        emailAddres: "jan.kowalski@gmail.com"))
Actually received no matching calls.
Received 1 non-matching call (non-matching arguments 
indicated with '*' characters):
    DoStuff(*StringableArgument(
        id: 7, firstName: "john", 
        lastName: "doe", 
        emailAddres: "john.doe@gmail.com")*)</code></pre></figure>

<p>So far so good. But what if our argument has ten or more properties.
With complex arguments looking for a one property with
unexpected value may quickly change into “Where’s Wally?” game.
The only way to further improve error messages is to stop relaying on
NSubstitute/hand-carfted <code class="highlighter-rouge">Equals</code> implementation 
and instead to use specialized assertion library like
<a href="https://fluentassertions.com/">FluentAssertions</a> or
<a href="http://www.n-fluent.net/">NFluent</a>.</p>

<p>Here is how our test would look like if we decide to use FluentAssertions:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="na">[Fact]</span>
<span class="k">public</span> <span class="k">void</span> <span class="nf">Catching_argument_and_checking_manually_with_fluent_assertions</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Arrange
</span>    <span class="n">PlainArgument</span> <span class="n">arg</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>

    <span class="n">_fooService</span>
        <span class="p">.</span><span class="nf">DoStuff</span><span class="p">(</span><span class="n">Arg</span><span class="p">.</span><span class="n">Do</span><span class="p">&lt;</span><span class="n">PlainArgument</span><span class="p">&gt;(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">arg</span> <span class="p">=</span> <span class="n">x</span><span class="p">));</span>

    <span class="c1">// Act
</span>    <span class="n">_component</span><span class="p">.</span><span class="nf">DoStuff</span><span class="p">();</span>

    <span class="c1">// Assert
</span>    <span class="n">_fooService</span><span class="p">.</span><span class="nf">Received</span><span class="p">()</span>
        <span class="p">.</span><span class="nf">DoStuff</span><span class="p">(</span><span class="n">Arg</span><span class="p">.</span><span class="n">Any</span><span class="p">&lt;</span><span class="n">PlainArgument</span><span class="p">&gt;());</span>

    <span class="n">arg</span><span class="p">.</span><span class="nf">Should</span><span class="p">()</span>
        <span class="p">.</span><span class="nf">BeEquivalentTo</span><span class="p">(</span><span class="k">new</span> <span class="nf">PlainArgument</span><span class="p">(</span>
            <span class="n">id</span><span class="p">:</span> <span class="m">11</span><span class="p">,</span> 
            <span class="n">firstName</span><span class="p">:</span> <span class="s">"jan"</span><span class="p">,</span> 
            <span class="n">lastName</span><span class="p">:</span> <span class="s">"kowlaski"</span><span class="p">,</span> 
            <span class="n">emailAddress</span><span class="p">:</span> <span class="s">"jan.kowalski@gmail.com"</span><span class="p">));</span>        
<span class="p">}</span></code></pre></figure>

<p>The error message is:</p>

<figure class="highlight"><pre><code class="language-nohighlight" data-lang="nohighlight">Expected member Id to be 11, but found 7.
Expected member FirstName to be "jan" with a length of 3, but "john" has a length of 4, differs near "ohn" (index 1).
Expected member LastName to be "kowlaski" with a length of 8, but "doe" has a length of 3, differs near "doe" (index 0).
Expected member EmailAddress to be 
"jan.kowalski@gmail.com" with a length of 22, but 
"john.doe@gmail.com" has a length of 18, differs near "ohn" (index 1).

With configuration:
// (skipped)
// Here FluentAssertions describes configuration
// that it used to compare the two objects.</code></pre></figure>

<p>Not bad, I must say. We get a list of only these properties that have
unexpected values. Certain messages seem a little bit too verbose for me
e.g. <code class="highlighter-rouge">Expected member FirstName to be "jan" with a length of 3</code>,
 <code class="highlighter-rouge">but "john" has a length of 4, differs near "ohn" (index 1).</code>
Maybe <code class="highlighter-rouge">Expected FirstName to be "jan" but was "john".</code> would be
just enough?
Still it is the best solution that we have so far.</p>

<p>The only downside that I see 
is that the test code is now a little more verbose and less readable.
Mainly because 
we are now responsible for manually capturing argument’s value:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">PlainArgument</span> <span class="n">arg</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
<span class="n">_fooService</span>
    <span class="p">.</span><span class="nf">DoStuff</span><span class="p">(</span><span class="n">Arg</span><span class="p">.</span><span class="n">Do</span><span class="p">&lt;</span><span class="n">PlainArgument</span><span class="p">&gt;(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">arg</span> <span class="p">=</span> <span class="n">x</span><span class="p">));</span></code></pre></figure>

<p>With a bit of C# magic we may make argument capturing less painful:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">_fooService</span>
    <span class="p">.</span><span class="nf">DoStuff</span><span class="p">(</span><span class="nf">Capture</span><span class="p">(</span><span class="k">out</span> <span class="n">Arg</span><span class="p">&lt;</span><span class="n">PlainArgument</span><span class="p">&gt;</span> <span class="n">arg</span><span class="p">));</span>

<span class="c1">// Act
</span><span class="n">_component</span><span class="p">.</span><span class="nf">DoStuff</span><span class="p">();</span>

<span class="c1">// Assert
</span><span class="n">_fooService</span><span class="p">.</span><span class="nf">Received</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">DoStuff</span><span class="p">(</span><span class="n">Arg</span><span class="p">.</span><span class="n">Any</span><span class="p">&lt;</span><span class="n">PlainArgument</span><span class="p">&gt;());</span>

<span class="c1">// This time we use NFluent
</span><span class="n">Check</span><span class="p">.</span><span class="nf">That</span><span class="p">(</span><span class="n">arg</span><span class="p">.</span><span class="n">Value</span><span class="p">).</span><span class="nf">HasFieldsWithSameValues</span><span class="p">(</span>
    <span class="k">new</span> <span class="nf">PlainArgument</span><span class="p">(</span>
        <span class="n">id</span><span class="p">:</span> <span class="m">7</span><span class="p">,</span> 
        <span class="n">firstName</span><span class="p">:</span> <span class="s">"john"</span><span class="p">,</span> 
        <span class="n">lastName</span><span class="p">:</span> <span class="s">"doe"</span><span class="p">,</span> 
        <span class="n">emailAddress</span><span class="p">:</span> <span class="s">"john.doe@gmail.com"</span><span class="p">));</span> </code></pre></figure>

<p>To see how it works please check <a href="https://github.com/marcin-chwedczuk/blog-nsubstitute-error-messages/blob/master/Library.Test/ArgCapture.cs">ArgCapture.cs</a> file.</p>

<p>Catching argument’s value manually is cumbersome and 
makes tests less readable. On the other hand using some “magical”
syntactic sugar also does not looks like a good idea. 
After all our code should be simple. If we can avoid using “magic”
we should do it!</p>

<p>Our final solution is to create a custom NSubstitute argument matcher.
The matcher uses undercover FluentAssertions library to perform the check.
Here is how the test code looks like with this approach:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="na">[Fact]</span>
<span class="k">public</span> <span class="k">void</span> <span class="nf">Checking_argument_using_custom_NSubstitute_matcher</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Arrange
</span>
    <span class="c1">// Act
</span>    <span class="n">_component</span><span class="p">.</span><span class="nf">DoStuff</span><span class="p">();</span>

    <span class="c1">// Assert
</span>    <span class="n">var</span> <span class="n">expected</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">PlainArgument</span><span class="p">(</span>
        <span class="n">id</span><span class="p">:</span> <span class="m">11</span><span class="p">,</span> 
        <span class="n">firstName</span><span class="p">:</span> <span class="s">"jan"</span><span class="p">,</span> 
        <span class="n">lastName</span><span class="p">:</span> <span class="s">"kowlaski"</span><span class="p">,</span> 
        <span class="n">emailAddress</span><span class="p">:</span> <span class="s">"jan.kowalski@gmail.com"</span><span class="p">);</span>

    <span class="n">_fooService</span><span class="p">.</span><span class="nf">Received</span><span class="p">()</span>
        <span class="p">.</span><span class="nf">DoStuff</span><span class="p">(</span><span class="n">WithArg</span><span class="p">.</span><span class="nf">EquivalentTo</span><span class="p">(</span><span class="n">expected</span><span class="p">));</span>
<span class="p">}</span></code></pre></figure>

<p>The error message generated for an argument that does
not overload <code class="highlighter-rouge">ToString</code> looks like this (formatting added):</p>

<figure class="highlight"><pre><code class="language-nohighlight" data-lang="nohighlight">Expected to receive a call matching:
    DoStuff(PlainArgument)
Actually received no matching calls.
Received 1 non-matching call (non-matching arguments indicated 
with '*' characters):
    DoStuff(*PlainArgument*)
        arg[0]: Expected member Id to be 11, but found 7.
                Expected member FirstName to be "jan" with a length of 3, 
                but "john" has a length of 4, differs near "ohn" (index 1).
                Expected member LastName to be "kowlaski" with a length of 8, 
                but "doe" has a length of 3, differs near "doe" (index 0).
                Expected member EmailAddress to be 
                "jan.kowalski@gmail.com" with a length of 22, but 
                "john.doe@gmail.com" has a length of 18, differs near "ohn" 
                (index 1).</code></pre></figure>

<p>It is clear that the problem occurred at the first argument (<code class="highlighter-rouge">arg[0]</code>). 
Also we can see the actual and expected values of the argument’s 
fields and properties.
And the test code is simple and clean.
If you are interested how it is implemented please see
<a href="https://github.com/marcin-chwedczuk/blog-nsubstitute-error-messages/blob/master/Library.Test/CustomMatcher.cs">CustomMatcher.cs</a>
file.</p>

<p>As we can see there exists no perfect solution. Still with a little effort
we can make our error messages much more readable and pleasurable to work with.
I personally suggest to use either the last solution or 
the solution presented in <code class="highlighter-rouge">Catching_argument_and_checking_manually_with_fluent_assertions</code> test.</p>

<p>Source code and examples: <a href="https://github.com/marcin-chwedczuk/blog-nsubstitute-error-messages">GitHub</a></p>


	  ]]></description>
	</item>

	<item>
	  <title>Inheritance? Just say no!</title>
	  <link>//inheritance-just-say-no</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2018-12-12T01:00:00+01:00</pubDate>
	  <guid>//inheritance-just-say-no</guid>
	  <description><![CDATA[
	     <p>Recently during a code review I have found the following piece
of code:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">TemplateCache</span> 
    <span class="p">:</span> <span class="n">ConcurrentDictionary</span><span class="p">&lt;</span><span class="n">TemplateName</span><span class="p">,</span> <span class="n">Template</span><span class="p">&gt;</span> <span class="p">{</span> <span class="p">}</span></code></pre></figure>

<p>Here the programmer broke one of the most fundamental principles
of modern object oriented programming:</p>

<blockquote>
  <p>Prefer composition over inheritance</p>
</blockquote>

<p>Why inheritance is bad in most of the cases? Here are the reasons:</p>

<h6 id="watered-down-component-api">Watered down component API</h6>

<p>What methods would you expect on a cache? Something that gets
values from the cache if they are already there. Let us call 
this operation <code class="highlighter-rouge">TryGetValue(cacheKey, out value)</code>. 
And of course a method to
add a new or overwrite an existing cache entry, let’s call it
<code class="highlighter-rouge">SetValue(cacheKey, value)</code>. Do we need more methods on a cache
from the client point of view? Maybe in the future we will want to
extend <code class="highlighter-rouge">SetValue</code> operation to allow client to specify for how
long items added to the cache should be stored? Who knows. 
But still we would end up with only two operations.</p>

<blockquote>
  <p>NOTE A truly generic and reusable cache 
is usually slightly more complicated - instead of two
we have three methods! For example please see
<a href="https://github.com/aspnet/Caching/blob/master/src/Microsoft.Extensions.Caching.Abstractions/IMemoryCache.cs">IMemoryCache</a> interface.</p>
</blockquote>

<p>On the other hand if we use inheritance we end up with something 
like this:
<img src="assets/images/2018-12-12/cache_api.png" alt="Cache API when we use inheritance" />
This is much more than we asked for. We actually get operations
that make no sense for a cache like <code class="highlighter-rouge">IsEmpty</code>. I mean either an item
that we are looking for is in the cache or it is not - who cares
if the cache is empty itself?</p>

<p>I hope that I managed to persuade you that a good component
API should be small, focused and easy to use. We get none of these 
if we use inheritance.</p>

<h6 id="broken-encapsulation">Broken encapsulation</h6>

<p>By using inheritance we are making it clear to the clients of
our component that it is implemented using <code class="highlighter-rouge">ConcurrentDictionary</code> class.
If we wait long enough we will notice that some of them 
will start relaying on that knowledge in their code. 
For example they may use <code class="highlighter-rouge">ContainsKey</code> method for checking if
the cache contains a given entry. 
What will happen later, when we decide that we want to change 
the cache implementation and use for example 
<a href="https://dotnetcoretutorials.com/2017/03/05/using-inmemory-cache-net-core/">IMemoryCache</a> instead?
Clients of our component will get angry, because
our new version of the cache<br />
introduced a breaking change into their code.</p>

<p>Just to sum up: Inheritance both exposes implementation
details of components and makes evolution of their APIs more difficult.</p>

<h6 id="liskov-substitution-principle-is-violated">Liskov substitution principle is violated</h6>

<p>In short some operations that make sense for a dictionary
may not make sense for a cache. For example it makes no
sense to cache a template that does not exists, yet with
inheritance we may write:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">var</span> <span class="n">foo</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">TemplateName</span><span class="p">(</span><span class="s">"foo"</span><span class="p">);</span>

<span class="n">ConcurrentDictionary</span><span class="p">&lt;</span><span class="n">TemplateName</span><span class="p">,</span> <span class="n">Template</span><span class="p">&gt;</span> <span class="n">dict</span> 
   <span class="p">=</span> <span class="k">new</span> <span class="nf">TemplateCache</span><span class="p">();</span>

<span class="n">dict</span><span class="p">.</span><span class="nf">GetOrAdd</span><span class="p">(</span><span class="n">foo</span><span class="p">,</span> <span class="p">(</span><span class="n">Template</span><span class="p">)</span><span class="k">null</span><span class="p">);</span>

<span class="c1">// Ops we have a null template here...
</span><span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"value is: "</span> <span class="p">+</span> 
   <span class="n">dict</span><span class="p">.</span><span class="nf">GetOrAdd</span><span class="p">(</span><span class="n">foo</span><span class="p">,</span> <span class="p">(</span><span class="n">Template</span><span class="p">)</span><span class="k">null</span><span class="p">));</span></code></pre></figure>

<p>When we use inheritance we are telling the type system that
<code class="highlighter-rouge">TemplateCache</code> <em>is a</em> <code class="highlighter-rouge">ConcurrentDictionary</code>. 
From logical point of view this makes no sense. They are two
different components that have two different purposes and also
different usage patterns. 
They should have nothing in common.</p>

<blockquote>
  <p>BTW You should avoid putting <code class="highlighter-rouge">null</code>s into collection classes of any sort.</p>
</blockquote>

<p>Let’s finish this post by seeing how composition can be used
to improve our <code class="highlighter-rouge">TemplateCache</code> component:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">TemplateCache</span> <span class="p">{</span>
  <span class="k">private</span> <span class="k">readonly</span> <span class="n">ConcurrentDictionary</span><span class="p">&lt;</span><span class="n">TemplateName</span><span class="p">,</span> <span class="n">Template</span><span class="p">&gt;</span> <span class="n">_cache</span> 
      <span class="p">=</span> <span class="k">new</span> <span class="n">ConcurrentDictionary</span><span class="p">&lt;</span><span class="n">TemplateName</span><span class="p">,</span> <span class="n">Template</span><span class="p">&gt;();</span>

  <span class="k">public</span> <span class="kt">bool</span> <span class="nf">TryGetTemplate</span><span class="p">(</span><span class="n">TemplateName</span> <span class="n">name</span><span class="p">,</span> <span class="k">out</span> <span class="n">Template</span> <span class="n">template</span><span class="p">)</span>
      <span class="p">=&gt;</span> <span class="n">_cache</span><span class="p">.</span><span class="nf">TryGetValue</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="k">out</span> <span class="n">template</span><span class="p">);</span>

  <span class="k">public</span> <span class="k">void</span> <span class="nf">AddTemplate</span><span class="p">(</span><span class="n">Template</span> <span class="n">template</span><span class="p">)</span>
      <span class="p">=&gt;</span> <span class="n">_cache</span><span class="p">.</span><span class="nf">AddOrUpdate</span><span class="p">(</span>
          <span class="n">template</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">template</span><span class="p">,</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">existing</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">template</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>Yep, simple, clean and easy to use!</p>


	  ]]></description>
	</item>

	<item>
	  <title>Abusing local functions to hide design problems</title>
	  <link>//abusing-local-functions-to-hide-design-problems</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2018-10-08T02:00:00+02:00</pubDate>
	  <guid>//abusing-local-functions-to-hide-design-problems</guid>
	  <description><![CDATA[
	     <p>Recently I was browsing through a certain code base
and I saw a code similar to this:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">EnterpriseNotificationSender</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IUserManagementService</span> <span class="n">_userManagementService</span><span class="p">;</span>
    <span class="c1">// ctor and stuff...
</span>  
    <span class="k">public</span> <span class="k">void</span> <span class="nf">SendNotificationsToUsers</span><span class="p">(</span><span class="kt">string</span> <span class="n">companyId</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">var</span> <span class="n">addresses</span> <span class="p">=</span> <span class="nf">GetRecipientsAddresses</span><span class="p">(</span><span class="n">companyId</span><span class="p">);</span>
        <span class="k">foreach</span><span class="p">(</span><span class="n">var</span> <span class="n">address</span> <span class="k">in</span> <span class="n">addresses</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">SendNotification</span><span class="p">(</span><span class="n">address</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
  
    <span class="k">private</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">EmailAddress</span><span class="p">&gt;</span> 
                     <span class="nf">GetRecipientsAddresses</span><span class="p">(</span><span class="kt">string</span> <span class="n">companyId</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">_userManagementService</span>
             <span class="p">.</span><span class="nf">FindUsersBelongingToCompany</span><span class="p">(</span><span class="n">companyId</span><span class="p">)</span>
             <span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="n">UserShouldReciveNotification</span><span class="p">)</span>
             <span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">user</span> <span class="p">=&gt;</span> <span class="n">user</span><span class="p">.</span><span class="n">EmailAddress</span><span class="p">)</span>
             <span class="p">.</span><span class="nf">ToList</span><span class="p">();</span>
  
        <span class="kt">bool</span> <span class="nf">UserShouldReciveNotification</span><span class="p">(</span><span class="n">User</span> <span class="n">user</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">user</span><span class="p">.</span><span class="n">EmailAddress</span> <span class="p">!=</span> <span class="k">null</span>
                <span class="p">&amp;&amp;</span> <span class="n">user</span><span class="p">.</span><span class="n">IsRegistered</span>
                <span class="p">&amp;&amp;</span> <span class="p">!</span><span class="n">user</span><span class="p">.</span><span class="n">IsDisabled</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
  
    <span class="k">private</span> <span class="k">void</span> <span class="nf">SendNotification</span><span class="p">(</span><span class="n">EmailAddress</span> <span class="n">address</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// do stuff...
</span>    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Especially <code class="highlighter-rouge">GetRecipientsAddresses</code> method draw my attention.
Someone extracted quite complicated lambda expression
to a local function.
At first I thought that this is indeed a very nice usage for local
functions.
LINQ query is much more readable
with expressions like <code class="highlighter-rouge">Where(UserShouldReciveNotification)</code>
instead of long lambdas.</p>

<p>It took me a while to realize that the local function
in the code above, was used to hide design problems.
Let’s take a closer look at the condition encapsulated by
<code class="highlighter-rouge">UserShouldReciveNotification</code> function:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">return</span> <span class="n">user</span><span class="p">.</span><span class="n">EmailAddress</span> <span class="p">!=</span> <span class="k">null</span>
    <span class="p">&amp;&amp;</span> <span class="n">user</span><span class="p">.</span><span class="n">IsRegistered</span>
    <span class="p">&amp;&amp;</span> <span class="p">!</span><span class="n">user</span><span class="p">.</span><span class="n">IsDisabled</span><span class="p">;</span></code></pre></figure>

<p>We should deal with the simplest to fix problems first:</p>

<p><strong>Bad naming:</strong> We should always format predicates in “a positive way”.
For examples we should prefer <code class="highlighter-rouge">IsOpen</code> and <code class="highlighter-rouge">IsAvailable</code> to <code class="highlighter-rouge">IsClose</code>
and <code class="highlighter-rouge">IsUnavailable</code>. Here <code class="highlighter-rouge">IsDisabled</code> should be named <code class="highlighter-rouge">IsEnabled</code>.
As a first step in refactoring we may add <code class="highlighter-rouge">IsEnabled</code> property
to the <code class="highlighter-rouge">User</code> class:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="kt">bool</span> <span class="n">IsEnabled</span> <span class="p">=&gt;</span> <span class="p">!</span><span class="n">IsDisabled</span><span class="p">;</span></code></pre></figure>

<p><strong>Unreadable condition:</strong> If a user has optional email then we may expect
that our codebase is littered with little <code class="highlighter-rouge">user.EmailAddres != null</code> checks.
To increase readability we should encapsulate this check into a separate property:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="kt">bool</span> <span class="n">HasEmailAddress</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="n">EmailAddress</span> <span class="p">!=</span> <span class="k">null</span><span class="p">);</span></code></pre></figure>

<p><strong>Missing entity attributes:</strong> When I looked closely at the condition
<code class="highlighter-rouge">user.IsRegistered &amp;&amp; !user.IsDisabled</code> I found out that it occurs
in many places in that codebase. For some reason the system was creating
users before they actually registered. A user that not registered yet was basically
a stub not a real user. Users could also be disabled by admins (registered or not),
this is what the second part of the condition was responsible for.
Clearly <code class="highlighter-rouge">User</code> entity is missing an attribute that could tell us whatever
a user is active, so let’s add one:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="kt">bool</span> <span class="n">IsActive</span>
    <span class="p">=&gt;</span> <span class="n">IsRegistered</span> <span class="p">&amp;&amp;</span> <span class="n">IsEnabled</span><span class="p">;</span></code></pre></figure>

<p>After all these refactorings we may finally rewrite our LINQ query:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">return</span> <span class="n">_userManagementService</span>
    <span class="p">.</span><span class="nf">FindUsersBelongingToCompany</span><span class="p">(</span><span class="n">companyId</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="n">user</span> <span class="p">=&gt;</span> <span class="n">user</span><span class="p">.</span><span class="n">IsActive</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="n">user</span> <span class="p">=&gt;</span> <span class="n">user</span><span class="p">.</span><span class="n">HasEmailAddress</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">user</span> <span class="p">=&gt;</span> <span class="n">user</span><span class="p">.</span><span class="n">EmailAddress</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">ToList</span><span class="p">();</span></code></pre></figure>

<p>This version is as readable as version with the local function,
but does not attempt to hide code smells.</p>

<p>Conclusion: Every time when you have a too long or too complicated
lambda expression, that you what to extract to a local function,
think if you can simplify that lambda by extracting conditions and checks
into new methods and properties on processed objects.</p>


	  ]]></description>
	</item>

	<item>
	  <title>Avoid hidden coupling to interface implementation</title>
	  <link>//avoid-hidden-coupling-to-interface-implementation</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2018-09-21T02:00:00+02:00</pubDate>
	  <guid>//avoid-hidden-coupling-to-interface-implementation</guid>
	  <description><![CDATA[
	     <p>A few days ago I was reviewing a pull request at work and
one line of code catch my eye:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">var</span> <span class="n">@event</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">CupOfCoffeeReadyEvent</span><span class="p">(</span><span class="cm">/* ... */</span><span class="p">);</span>
<span class="n">_logger</span><span class="p">.</span><span class="nf">LogInformation</span><span class="p">(</span>
    <span class="s">"Publishing cup of coffee event: {@Event}."</span><span class="p">,</span> <span class="n">@event</span><span class="p">);</span> <span class="c1">// &lt;== this one
</span><span class="n">_mediator</span><span class="p">.</span><span class="nf">Publish</span><span class="p">(</span><span class="n">@event</span><span class="p">);</span></code></pre></figure>

<p>At my workplace we are using standard <code class="highlighter-rouge">ILogger</code> interface from 
<code class="highlighter-rouge">Microsoft.Extensions.Logging.Abstractions</code>
package. Also logged variable name starts with <code class="highlighter-rouge">@</code> (<code class="highlighter-rouge">@event</code>). 
And so I started to suspect that 
the log statement contains an error and instead it should be written as:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// {@Event} -&gt; {Event}
</span><span class="n">_logger</span><span class="p">.</span><span class="nf">LogInformation</span><span class="p">(</span>
    <span class="s">"Publishing cup of coffee event: {Event}."</span><span class="p">,</span> <span class="n">@event</span><span class="p">);</span></code></pre></figure>

<p>Without thinking any further I put a friendly comment, that 
this logging statement should be fixed.
After half an hour, instead of a fix I get the following response:</p>

<blockquote>
  <p>In this microservice we are using Serilog as third-party logging provider.</p>

  <p>In Serilog <code class="highlighter-rouge">@</code> is used as destructuring operator,
please see: 
https://github.com/serilog/serilog/wiki/Structured-Data#preserving-object-structure</p>

  <p>Basically this means that the argument will be logged in JSON form.</p>
</blockquote>

<p>So <code class="highlighter-rouge">@</code> character was put there on purpose. OK, fine.
But there still was something fishy about this code. 
On the one hand we are using <code class="highlighter-rouge">ILogger</code> from 
<code class="highlighter-rouge">Microsoft.Extensions.Logging.Abstractions</code> to decouple ourselves 
from any specific logging provider,
on the other hand we are using Serilog specific extensions.
This results in a false sense of security. 
We may think that since we are
using standard <code class="highlighter-rouge">ILogger</code>, changing logging provider to e.g.
Azure Web App Diagnostics would be as simple as changing <code class="highlighter-rouge">Startup</code> 
class of our application.
Unfortunately since we coupled ourselves with Serilog 
(by Serilog specific extensions to the log message template),
some of our log statements may not work with the new logging provider.</p>

<p>So what is the solution to this problem? We must choose whatever we
want to use Serilog specific features. If we want to use them, then 
we should not hide the fact that we are using Serilog. Fortunately for
us Serilog provides it’s own, ready to use <code class="highlighter-rouge">ILogger</code> interface.
And we should use that interface instead of standard one accross
the entire application.</p>

<p>On the other hand, if we expect that we may need to change logging
provider in the future, we should stick with 
<code class="highlighter-rouge">Microsoft.Extensions.Logging.Abstractions</code> <code class="highlighter-rouge">ILogger</code> and we should
use only the features that are described in 
<a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-2.1">the official documentation</a>. 
If our needs are not fully covered
by the standard <code class="highlighter-rouge">ILogger</code> 
e.g. we must log objects as JSON, then we must implement them
ourselves by e.g. creating wrappers around parameters:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">_logger</span><span class="p">.</span><span class="nf">LogInformation</span><span class="p">(</span>
    <span class="s">"Publishing cup of coffee {Event}."</span><span class="p">,</span> <span class="k">new</span> <span class="nf">LogAsJson</span><span class="p">(</span><span class="n">@event</span><span class="p">));</span></code></pre></figure>

<p>It is really interesting that a similar coupling happens when using
<code class="highlighter-rouge">IEnumerable&lt;T&gt;</code> interface as the return type of a method.
How many times have you seen a code similar to:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">void</span> <span class="nf">SomeMethod</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// IEnumerable&lt;User&gt;
</span>    <span class="n">var</span> <span class="n">users</span> <span class="p">=</span> <span class="n">userService</span><span class="p">.</span><span class="nf">FindAllUsers</span><span class="p">();</span>
    
    <span class="n">users</span>
        <span class="p">.</span><span class="nf">ToList</span><span class="p">()</span>
        <span class="p">.</span><span class="nf">ForEach</span><span class="p">(</span><span class="n">user</span> <span class="p">=&gt;</span> <span class="n">user</span><span class="p">.</span><span class="n">IsActive</span> <span class="p">=</span> <span class="k">false</span><span class="p">);</span>
    
    <span class="n">userService</span><span class="p">.</span><span class="nf">SaveAll</span><span class="p">(</span><span class="n">users</span><span class="p">.</span><span class="nf">ToArray</span><span class="p">());</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">UserSerivce</span> <span class="p">{</span>
    <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">User</span><span class="p">&gt;</span> <span class="nf">FindAllUsers</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">User</span><span class="p">&gt;</span> <span class="p">{</span>
            <span class="k">new</span> <span class="n">User</span> <span class="p">{</span> <span class="n">IsActive</span> <span class="p">=</span> <span class="k">true</span> <span class="p">},</span>
            <span class="k">new</span> <span class="n">User</span> <span class="p">{</span> <span class="n">IsActive</span> <span class="p">=</span> <span class="k">false</span> <span class="p">}</span>
        <span class="p">};</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">SaveAll</span><span class="p">(</span><span class="k">params</span> <span class="n">User</span><span class="p">[]</span> <span class="n">users</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="n">var</span> <span class="n">user</span> <span class="k">in</span> <span class="n">users</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">user</span><span class="p">.</span><span class="n">IsActive</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">User</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">bool</span> <span class="n">IsActive</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Again we have here a bad case of hidden coupling to the interface implementation.
We are using <code class="highlighter-rouge">IEnumerable&lt;T&gt;</code>
interface but we are assuming that it is backed by
a collection for which multiple enumerations always
return the same elements. 
Our code will break 
when someone will change <code class="highlighter-rouge">FindAllUsers</code> implementation to
e.g.:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">User</span><span class="p">&gt;</span> <span class="nf">FindAllUsers</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">yield</span> <span class="k">return</span> <span class="k">new</span> <span class="n">User</span> <span class="p">{</span> <span class="n">IsActive</span> <span class="p">=</span> <span class="k">true</span> <span class="p">};</span>
    <span class="k">yield</span> <span class="k">return</span> <span class="k">new</span> <span class="n">User</span> <span class="p">{</span> <span class="n">IsActive</span> <span class="p">=</span> <span class="k">false</span> <span class="p">};</span>
<span class="p">}</span></code></pre></figure>

<p>The solution to this problem is honesty. If you have
a value of type <code class="highlighter-rouge">IEnumerable&lt;T&gt;</code>, tread it as 
a value of type <code class="highlighter-rouge">IEnumerable&lt;T&gt;</code>. Nothing more, nothing less.
Do not assume that multiple enumerations
will return the same elements. 
This is not guaranteed by that interface.</p>

<p>If you want to return a sequence of elements from a method with
this additional guarantee, then please use a more specific 
interface like <code class="highlighter-rouge">ICollection&lt;T&gt;</code> or <code class="highlighter-rouge">IReadOnlyList&lt;T&gt;</code> or 
maybe even something from <code class="highlighter-rouge">System.Collections.Immutable</code> package.</p>


	  ]]></description>
	</item>

	<item>
	  <title>Fluent Validation and complex dependencies between properties</title>
	  <link>//fluent-validation-and-complex-dependencies-between-properties</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2018-09-18T02:00:00+02:00</pubDate>
	  <guid>//fluent-validation-and-complex-dependencies-between-properties</guid>
	  <description><![CDATA[
	     <p><a href="https://fluentvalidation.net/">FluentValidation</a> is one of the
best validation libraries for .NET. I use it daily both at work
and in my personal pet projects. Still from time to time I
encounter situations where it is not obvious how 
I should use FluentValidation.
In this blog post I describe one such situation that I have to
deal with recently.</p>

<p>In short I had to validate a simple DTO:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">SampleRequestDto</span> <span class="p">{</span>
    <span class="k">public</span> <span class="n">AddressDto</span> <span class="n">Address</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="n">ContactInfoDto</span> <span class="n">ContactInfo</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">AddressDto</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">AddressLine1</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">AddressLine2</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">City</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">ZipCode</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">CountryIsoCode</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">ContactInfoDto</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">EmailAddress</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="c1">// Phone number validation depends on CountryIsoCode.
</span>    <span class="k">public</span> <span class="kt">string</span> <span class="n">PhoneNumber</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>With a small twist that <code class="highlighter-rouge">ContactInfo.PhoneNumber</code> was 
validated using country dependent format and information
about country itself was stored in <code class="highlighter-rouge">Address.CountryIsoCode</code> field.</p>

<p>This is generally a good use-case for FluentValidation <code class="highlighter-rouge">Custom</code> rule:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="nf">RuleFor</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">Custom</span><span class="p">((</span><span class="n">dto</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="n">var</span> <span class="n">countryIsoCode</span> <span class="p">=</span> <span class="n">dto</span><span class="p">?.</span><span class="n">Address</span><span class="p">?.</span><span class="n">CountryIsoCode</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="nf">IsNullOrEmpty</span><span class="p">(</span><span class="n">countryIsoCode</span><span class="p">))</span> 
            <span class="k">return</span><span class="p">;</span>

        <span class="n">var</span> <span class="n">country</span> <span class="p">=</span> <span class="n">Countries</span><span class="p">.</span><span class="nf">FindCountryByIsoCode</span><span class="p">(</span><span class="n">countryIsoCode</span><span class="p">);</span>
        <span class="c1">// invalid country code - cannot validate phone number
</span>        <span class="k">if</span> <span class="p">(</span><span class="n">country</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="k">return</span><span class="p">;</span>

        <span class="n">var</span> <span class="n">phoneNumber</span> <span class="p">=</span> <span class="n">dto</span><span class="p">?.</span><span class="n">ContactInfo</span><span class="p">?.</span><span class="n">PhoneNumber</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="nf">IsNullOrWhiteSpace</span><span class="p">(</span><span class="n">phoneNumber</span><span class="p">))</span>
            <span class="k">return</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(!</span><span class="n">country</span><span class="p">.</span><span class="n">PhoneNumberFormat</span><span class="p">.</span><span class="nf">Matches</span><span class="p">(</span><span class="n">phoneNumber</span><span class="p">))</span> <span class="p">{</span>
            <span class="n">context</span><span class="p">.</span><span class="nf">AddFailure</span><span class="p">(</span><span class="k">new</span> <span class="nf">ValidationFailure</span><span class="p">(</span>
                <span class="err">$</span><span class="s">"ContactInfo.PhoneNumber"</span><span class="p">,</span> <span class="c1">// property name
</span>                <span class="err">$</span><span class="s">"'{phoneNumber}' is not a valid phone number in {country.Name}."</span><span class="p">));</span>
        <span class="p">}</span>
    <span class="p">});</span></code></pre></figure>

<p>Unfortunately in my case I also had a bunch of other country dependent 
values like VAT numbers scattered across many DTOs. And I needed
a more reusable and programmer friendly solution than <code class="highlighter-rouge">Custom</code> rule.</p>

<p>Ideally my validator definition should look like this:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">SampleRequestDtoValidator</span> <span class="p">:</span> <span class="n">AbstractValidator</span><span class="p">&lt;</span><span class="n">SampleRequestDto</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="k">public</span>  <span class="nf">SampleRequestDtoValidator</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">RuleFor</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Address</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">SetValidator</span><span class="p">(</span><span class="k">new</span> <span class="nf">AddressDtoValidator</span><span class="p">());</span>

        <span class="nf">RuleFor</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">ContactInfo</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">SetValidator</span><span class="p">(</span><span class="k">new</span> <span class="nf">ContactInfoDtoValidator</span><span class="p">());</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">AddressDtoValidator</span> <span class="p">:</span> <span class="n">AbstractValidator</span><span class="p">&lt;</span><span class="n">AddressDto</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="k">public</span> <span class="nf">AddressDtoValidator</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">RuleFor</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">CountryIsoCode</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">NotEmpty</span><span class="p">()</span>
            <span class="p">.</span><span class="nf">CountryIsoCode</span><span class="p">();</span> <span class="c1">// custom extension
</span>        <span class="c1">// other rules...
</span>    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">ContactInfoDtoValidator</span> <span class="p">:</span> <span class="n">AbstractValidator</span><span class="p">&lt;</span><span class="n">ContactInfoDto</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="k">public</span> <span class="nf">ContactInfoDtoValidator</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">RuleFor</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">PhoneNumber</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">NotEmpty</span><span class="p">()</span>
            <span class="p">.</span><span class="nf">MaximumLength</span><span class="p">(</span><span class="m">50</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">PhoneNumber</span><span class="p">();</span> <span class="c1">// custom extension
</span>        <span class="c1">// other rules...
</span>    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Creating property validators like <code class="highlighter-rouge">CountryIsoCode</code> using FluentValidation
is very simple. You just extend <code class="highlighter-rouge">PropertyValidator</code> class,
provide an error message template to the base class ctor and override
<code class="highlighter-rouge">IsValid</code> method. 
Additionally you may define an extension method 
to the <code class="highlighter-rouge">IRuleBuilder&lt;T,TProperty&gt;</code>
interface to make your validator behave like build-in ones.</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">CountryIsoCodeValidator</span> <span class="p">:</span> <span class="n">PropertyValidator</span> <span class="p">{</span>
    <span class="k">public</span> <span class="nf">CountryIsoCodeValidator</span><span class="p">()</span> 
        <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="s">"'{PropertyValue}' is not a valid country iso code."</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>

    <span class="k">protected</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">IsValid</span><span class="p">(</span><span class="n">PropertyValidatorContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">var</span> <span class="n">isoCode</span> <span class="p">=</span> <span class="p">(</span><span class="kt">string</span><span class="p">)</span> <span class="n">context</span><span class="p">.</span><span class="n">PropertyValue</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="nf">IsNullOrEmpty</span><span class="p">(</span><span class="n">isoCode</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">Countries</span><span class="p">.</span><span class="nf">IsKnownIsoCode</span><span class="p">(</span><span class="n">isoCode</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">CountryIsoCodeValidatorExtension</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="n">IRuleBuilderOptions</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;</span> <span class="n">CountryIsoCode</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span>
        <span class="k">this</span> <span class="n">IRuleBuilder</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;</span> <span class="n">rule</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">rule</span><span class="p">.</span><span class="nf">SetValidator</span><span class="p">(</span><span class="k">new</span> <span class="nf">CountryIsoCodeValidator</span><span class="p">());</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><code class="highlighter-rouge">CountryCode</code> validator was easy, what about <code class="highlighter-rouge">PhoneNumber</code> validator?
Here the only challenge that we must solve 
is finding a way to pass country ISO code from <code class="highlighter-rouge">Address</code> to 
phone number validator.
To solve this problem I decided to use “advanced” FluentValidation
feature called “Root Context Data”. Basically this is a 
<code class="highlighter-rouge">IDictionary&lt;string, object&gt;</code> that can be prefilled with custom data
before validation starts and then is accessible to every validator
in validators tree.</p>

<p>Let’s take a look at an example from 
<a href="https://fluentvalidation.net/start#root-context-data">official documentation</a>:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">var</span> <span class="n">instanceToValidate</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Person</span><span class="p">();</span>

<span class="n">var</span> <span class="n">context</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ValidationContext</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;(</span><span class="n">person</span><span class="p">);</span>
<span class="n">context</span><span class="p">.</span><span class="n">RootContextData</span><span class="p">[</span><span class="s">"MyCustomData"</span><span class="p">]</span> <span class="p">=</span> <span class="s">"Test"</span><span class="p">;</span>

<span class="n">var</span> <span class="n">validator</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">PersonValidator</span><span class="p">();</span>
<span class="n">validator</span><span class="p">.</span><span class="nf">Validate</span><span class="p">(</span><span class="n">context</span><span class="p">);</span>

<span class="c1">// usage inside validator:
</span><span class="nf">RuleFor</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Surname</span><span class="p">).</span><span class="nf">Custom</span><span class="p">((</span><span class="n">x</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="n">context</span><span class="p">.</span><span class="n">ParentContext</span><span class="p">.</span><span class="n">RootContextData</span><span class="p">.</span><span class="nf">ContainsKey</span><span class="p">(</span><span class="s">"MyCustomData"</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">context</span><span class="p">.</span><span class="nf">AddFailure</span><span class="p">(</span><span class="s">"My error message"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span></code></pre></figure>

<p>Looks very promising, and what’s better we can add values to <code class="highlighter-rouge">RootContextData</code>
straight inside top-level validators by overriding <code class="highlighter-rouge">PreValidate</code> method:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">SampleRequestDtoValidator</span> <span class="p">:</span> <span class="n">AbstractValidator</span><span class="p">&lt;</span><span class="n">SampleRequestDto</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="k">public</span>  <span class="nf">SampleRequestDtoValidator</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">RuleFor</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Address</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">SetValidator</span><span class="p">(</span><span class="k">new</span> <span class="nf">AddressDtoValidator</span><span class="p">());</span>

        <span class="nf">RuleFor</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">ContactInfo</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">SetValidator</span><span class="p">(</span><span class="k">new</span> <span class="nf">ContactInfoDtoValidator</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="k">protected</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">PreValidate</span><span class="p">(</span>
        <span class="n">ValidationContext</span><span class="p">&lt;</span><span class="n">SampleRequestDto</span><span class="p">&gt;</span> <span class="n">context</span><span class="p">,</span> <span class="n">ValidationResult</span> <span class="n">result</span><span class="p">)</span> 
    <span class="p">{</span>
        <span class="n">var</span> <span class="n">contextData</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ValidationContextData</span><span class="p">(</span>
            <span class="n">context</span><span class="p">.</span><span class="n">RootContextData</span><span class="p">);</span>

        <span class="n">contextData</span><span class="p">.</span><span class="n">CountryIsoCode</span> <span class="p">=</span> 
            <span class="n">context</span><span class="p">.</span><span class="n">InstanceToValidate</span><span class="p">?.</span><span class="n">Address</span><span class="p">?.</span><span class="n">CountryIsoCode</span><span class="p">;</span>

        <span class="k">return</span> <span class="k">true</span><span class="p">;</span> <span class="c1">// continue validation
</span>    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>To avoid dealing with <code class="highlighter-rouge">object</code>s I have also created a strongly typed
wrapper (<code class="highlighter-rouge">ValidationContextData</code> class) around <code class="highlighter-rouge">RootContextData</code>
dictionary.</p>

<p>IMPORTANT: To make validators reusable you should set <code class="highlighter-rouge">RootContextData</code> only
in top level validators. Validators used with <code class="highlighter-rouge">SetValidator</code>
method are not considered top level.</p>

<p>Now implementing <code class="highlighter-rouge">PhoneNumberValidator</code> is easy:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">PhoneNumberValidator</span> <span class="p">:</span> <span class="n">PropertyValidator</span> <span class="p">{</span>
    <span class="k">public</span> <span class="nf">PhoneNumberValidator</span><span class="p">()</span> 
        <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="s">"'{PropertyValue}' is not a valid phone number in {Country}."</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>

    <span class="k">protected</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">IsValid</span><span class="p">(</span><span class="n">PropertyValidatorContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">var</span> <span class="n">phoneNumber</span> <span class="p">=</span> <span class="p">(</span><span class="kt">string</span><span class="p">)</span> <span class="n">context</span><span class="p">.</span><span class="n">PropertyValue</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="nf">IsNullOrEmpty</span><span class="p">(</span><span class="n">phoneNumber</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">var</span> <span class="n">contextData</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ValidationContextData</span><span class="p">(</span>
            <span class="n">context</span><span class="p">.</span><span class="n">ParentContext</span><span class="p">.</span><span class="n">RootContextData</span><span class="p">);</span>

        <span class="n">var</span> <span class="n">country</span> <span class="p">=</span> <span class="nf">TryFindCountry</span><span class="p">(</span><span class="n">contextData</span><span class="p">.</span><span class="n">CountryIsoCode</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">country</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// without a country we cannot validate a phone number
</span>            <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">context</span><span class="p">.</span><span class="n">MessageFormatter</span><span class="p">.</span><span class="nf">AppendArgument</span><span class="p">(</span><span class="s">"Country"</span><span class="p">,</span> <span class="n">country</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>

        <span class="k">return</span> <span class="n">country</span><span class="p">.</span><span class="n">PhoneNumberFormat</span><span class="p">.</span><span class="nf">Matches</span><span class="p">(</span><span class="n">phoneNumber</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="n">Country</span> <span class="nf">TryFindCountry</span><span class="p">(</span><span class="kt">string</span> <span class="n">countryIsoCode</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="nf">IsNullOrEmpty</span><span class="p">(</span><span class="n">countryIsoCode</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">Countries</span><span class="p">.</span><span class="nf">FindCountryByIsoCode</span><span class="p">(</span><span class="n">countryIsoCode</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">PhoneNumberValidatorExtension</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="n">IRuleBuilderOptions</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;</span> <span class="n">PhoneNumber</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span>
        <span class="k">this</span> <span class="n">IRuleBuilder</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;</span> <span class="n">rule</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">rule</span><span class="p">.</span><span class="nf">SetValidator</span><span class="p">(</span><span class="k">new</span> <span class="nf">PhoneNumberValidator</span><span class="p">());</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>And we are done!</p>

<h4 id="unit-testing-validators">Unit-testing validators</h4>

<p>FluentValidation provides several extension methods that
make unit-testing easy, just take a look:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">using</span> <span class="nn">FluentValidation.TestHelper</span><span class="p">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">SampleRequestDtoValidatorTest</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">SampleRequestDtoValidator</span> <span class="n">_validator</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">SampleRequestDtoValidatorTest</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">_validator</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SampleRequestDtoValidator</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">Fact</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">Should_return_error_when_phone_number_is_invalid_and_countryIsoCode_is_set</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Arrange
</span>        <span class="n">var</span> <span class="n">invalidRequest</span> <span class="p">=</span> 
            <span class="n">SampleRequestDtoFixture</span><span class="p">.</span><span class="nf">CreateValidRequest</span><span class="p">();</span>
        <span class="n">invalidRequest</span><span class="p">.</span><span class="n">Address</span><span class="p">.</span><span class="n">CountryIsoCode</span> <span class="p">=</span> <span class="s">"PL"</span><span class="p">;</span>
        <span class="n">invalidRequest</span><span class="p">.</span><span class="n">ContactInfo</span><span class="p">.</span><span class="n">PhoneNumber</span> <span class="p">=</span> <span class="s">"+48 123"</span><span class="p">;</span>

        <span class="c1">// Assert
</span>        <span class="n">_validator</span>
            <span class="p">.</span><span class="nf">ShouldHaveValidationErrorFor</span><span class="p">(</span>
                <span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">ContactInfo</span><span class="p">.</span><span class="n">PhoneNumber</span><span class="p">,</span> <span class="n">invalidRequest</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">WithErrorMessage</span><span class="p">(</span>
                <span class="s">"'+48 123' is not a valid phone number in Poland."</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h4 id="design-considerations">Design considerations</h4>

<p>Everything works right now, but there is still place for improvement.
For example what happens when a programmer forgets to
override <code class="highlighter-rouge">PreValidate</code> method and set all required properties?
Validation of certain properties will be silently skipped.
This is not good.
To minimize this problem I put additional checks inside <code class="highlighter-rouge">ValidationContextData</code>
class. They will throw an exception with a descriptive message if
validator tries to access a property that was not previously set.</p>

<p>In my application values like phone numbers are always validated against
country specific formats. But I can imaging situations where
sometimes we use country agnostic phone number validator and
sometimes 
we use country specific one. In such cases it would be good
to call the country agnostic validator just a <code class="highlighter-rouge">PhoneNumberValidator</code> and
the country specific validator a <code class="highlighter-rouge">CountryDependentPhoneNumberValidator</code>.</p>

<p>I have a mixed feelings about <code class="highlighter-rouge">ValidationContextData</code> class because
it is used by every country specific validator in my code. Maybe 
instead of introducing this common dependency every validator should
access <code class="highlighter-rouge">RootContextData</code> and check if the property is set itself?</p>

<p>Sample source code: <a href="https://github.com/marcin-chwedczuk/blog-fluent-validation-adventure">GitHub</a>.</p>


	  ]]></description>
	</item>

	<item>
	  <title>You can live without mocking frameworks</title>
	  <link>//you-can-live-without-your-mocking-framework</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2018-09-08T02:00:00+02:00</pubDate>
	  <guid>//you-can-live-without-your-mocking-framework</guid>
	  <description><![CDATA[
	     <p>For a long time I have been fan of mocking frameworks like 
<a href="https://github.com/Moq/moq4/wiki/Quickstart">Moq</a>
and <a href="http://nsubstitute.github.io">NSubstitute</a>.
These libraries seems indispensable while unit-testing.
They allow us to easily generate subs and mocks and assert that
certain interaction between components took place.</p>

<p>NOTE: If you do not remember difference between stub and mock
please read <a href="https://martinfowler.com/articles/mocksArentStubs.html">this Martin Fowler article</a>. 
In short mocks are used to test interactions between components 
(a method was called, a property was set) 
while stubs are used as dumb implementations of component dependencies 
(they usually either do nothing or provide some preset data).</p>

<p>But recently, after reading volume 1 of 
<a href="https://www.yegor256.com/elegant-objects.html">Elegant Objects</a>
which by the way I strongly recommend, I changed my mind.
In one of the chapters author presents the idea that every interface
should have an associated fake object. A fake object is a simple
but <em>working</em> implementation of an interface and resides in the same
source code file as the interface itself.
Fake objects serve two purposes. First, they are example implementations
of interfaces that show users how the interfaces should be implemented.
And second they can be used as stubs and mocks in unit-tests.</p>

<p>Of course this idea seemed a bit extreme to me, so I decided to go with
a bit more evolutionary approach.
I <strong>slowly</strong> replaced all mock object that I had in my unit-tests 
with fakes (I put all fakes in my unit test projects - but I am still thinking that maybe they deserve a project of their own). 
During this process all interaction testing assertions 
that are usually performed using mocking frameworks
were replaced by behaviour testing assertions on fake objects.</p>

<p>It will be the best to illustrate this process using an example.
Say we have a simple component <code class="highlighter-rouge">EventPublishingComponent</code> that
publishes two events (order is not important):</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">EventPublishingComponent</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">EventPublisher</span> <span class="n">_eventPublisher</span><span class="p">;</span>
    <span class="k">public</span> <span class="nf">EventPublishingComponent</span><span class="p">(</span><span class="n">EventPublisher</span> <span class="n">eventPublisher</span><span class="p">)</span>
        <span class="p">=&gt;</span> <span class="n">_eventPublisher</span> <span class="p">=</span> <span class="n">eventPublisher</span><span class="p">;</span>

    <span class="k">public</span> <span class="n">async</span> <span class="n">Task</span> <span class="nf">Publish</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">await</span> <span class="n">_eventPublisher</span><span class="p">.</span><span class="nf">Publish</span><span class="p">(</span><span class="k">new</span> <span class="nf">FirstEvent</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="m">3</span><span class="p">));</span>
        <span class="n">await</span> <span class="n">_eventPublisher</span><span class="p">.</span><span class="nf">Publish</span><span class="p">(</span>
          <span class="k">new</span> <span class="nf">SecondEvent</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="s">"ZDKA9JOPCKXI7"</span><span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">FirstEvent</span> <span class="p">:</span> <span class="n">Event</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="nf">FirstEvent</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">=&gt;</span> <span class="n">Id</span> <span class="p">=</span> <span class="n">id</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">SecondEvent</span> <span class="p">:</span> <span class="n">Event</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="nf">SecondEvent</span><span class="p">(</span><span class="kt">string</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">=&gt;</span> <span class="n">Id</span> <span class="p">=</span> <span class="n">id</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">interface</span> <span class="n">EventPublisher</span> <span class="p">{</span>
    <span class="n">Task</span> <span class="nf">Publish</span><span class="p">(</span><span class="n">Event</span> <span class="n">@event</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">interface</span> <span class="n">Event</span> <span class="p">{</span> <span class="p">}</span></code></pre></figure>

<p>A “classic” unit test for this component using NSubstitute 
could look like this:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">EventPublishingComponentTest</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">EventPublisher</span> <span class="n">_eventPublisher</span><span class="p">;</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">EventPublishingComponent</span> <span class="n">_component</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">EventPublishingComponentTest</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">_eventPublisher</span> <span class="p">=</span> <span class="n">Substitute</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">EventPublisher</span><span class="p">&gt;();</span>
        <span class="n">_component</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">EventPublishingComponent</span><span class="p">(</span><span class="n">_eventPublisher</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">Fact</span><span class="p">]</span>
    <span class="k">public</span> <span class="n">async</span> <span class="n">Task</span> <span class="nf">Should_publish_FirstEvent</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Arrange
</span>        <span class="n">FirstEvent</span> <span class="n">firstEvent</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
        <span class="n">await</span> <span class="n">_eventPublisher</span>
            <span class="p">.</span><span class="nf">Publish</span><span class="p">(</span><span class="n">Arg</span><span class="p">.</span><span class="n">Do</span><span class="p">&lt;</span><span class="n">FirstEvent</span><span class="p">&gt;(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">firstEvent</span> <span class="p">=</span> <span class="n">e</span><span class="p">));</span>

        <span class="c1">// Act
</span>        <span class="n">await</span> <span class="n">_component</span><span class="p">.</span><span class="nf">Publish</span><span class="p">();</span>

        <span class="c1">// Assert
</span>        <span class="n">await</span> <span class="n">_eventPublisher</span><span class="p">.</span><span class="nf">Received</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">Publish</span><span class="p">(</span><span class="n">Arg</span><span class="p">.</span><span class="n">Any</span><span class="p">&lt;</span><span class="n">FirstEvent</span><span class="p">&gt;());</span>

        <span class="n">Check</span><span class="p">.</span><span class="nf">That</span><span class="p">(</span><span class="n">firstEvent</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">IsNotNull</span><span class="p">();</span>

        <span class="n">Check</span><span class="p">.</span><span class="nf">That</span><span class="p">(</span><span class="n">firstEvent</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">IsNotZero</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>I am sure you have seen a lot of tests like this. 
The key points are: Your create mocks and stubs using your
favourite mocking library in the test constructor or setup method.
In the arrange (given) part of the test you define mocks and stubs
behaviour using library specific syntax. Here e.g. we are capturing
argument passed to <code class="highlighter-rouge">Publish</code> method for later use:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">FirstEvent</span> <span class="n">firstEvent</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
<span class="n">await</span> <span class="n">_eventPublisher</span>
    <span class="p">.</span><span class="nf">Publish</span><span class="p">(</span><span class="n">Arg</span><span class="p">.</span><span class="n">Do</span><span class="p">&lt;</span><span class="n">FirstEvent</span><span class="p">&gt;(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">firstEvent</span> <span class="p">=</span> <span class="n">e</span><span class="p">));</span></code></pre></figure>

<p>In the assert (then) part of the test we use again library specific
syntax to check that a method on a mock 
was called with given set of arguments.</p>

<p>This approach is fine but it has some disadvantages:</p>

<ol>
  <li>
    <p>It makes your tests very brittle. For example if I add a new method
 on <code class="highlighter-rouge">EventPublisher</code> called 
 <code class="highlighter-rouge">PublishAll(events)</code> that allows me to publish all events at once and
 refactor <code class="highlighter-rouge">EventPublishingComponent</code> to use it
 then <code class="highlighter-rouge">EventPublishingComponent</code> tests would stop working.
 The main problem here is that my tests check internal interaction
 between components 
 (was method <code class="highlighter-rouge">Publish</code> called?) instead of checking external behaviour 
 of the system (was event published?).</p>
  </li>
  <li>
    <p>Mocking library is another tool that you must learn. 
 And please remember that most of the developers are not too eager to
 read documentation. Time presumably saved by using mocking library 
 will be lost on reading StackOverflow answers and on fighting with
 the library itself 
 (ever have a problem that your stub does not return intended value?).</p>
  </li>
  <li>
    <p>It makes your tests less readable. I must admit that 
 NSubstitute is a huge improvement over Moq in terms
 of readability but it still introduces a lot of visual noise in the test
 code. For example do see all 
 those <code class="highlighter-rouge">&lt;</code>, <code class="highlighter-rouge">&gt;</code>, <code class="highlighter-rouge">(</code> and <code class="highlighter-rouge">)</code> in the code below:</p>
  </li>
</ol>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">FirstEvent</span> <span class="n">firstEvent</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
<span class="n">await</span> <span class="n">_eventPublisher</span>
    <span class="p">.</span><span class="nf">Publish</span><span class="p">(</span><span class="n">Arg</span><span class="p">.</span><span class="n">Do</span><span class="p">&lt;</span><span class="n">FirstEvent</span><span class="p">&gt;(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">firstEvent</span> <span class="p">=</span> <span class="n">e</span><span class="p">));</span></code></pre></figure>

<p>Now let us see how our test can look like if we use fakes instead:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">EventPublishingComponentTest_UsingFakes</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">InMemoryEventPublisher</span> <span class="n">_eventPublisher</span><span class="p">;</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">EventPublishingComponent</span> <span class="n">_component</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">EventPublishingComponentTest_UsingFakes</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">_eventPublisher</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">InMemoryEventPublisher</span><span class="p">();</span>
        <span class="n">_component</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">EventPublishingComponent</span><span class="p">(</span><span class="n">_eventPublisher</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">Fact</span><span class="p">]</span>
    <span class="k">public</span> <span class="n">async</span> <span class="n">Task</span> <span class="nf">Should_publish_FirstEvent</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Act
</span>        <span class="n">await</span> <span class="n">_component</span><span class="p">.</span><span class="nf">Publish</span><span class="p">();</span>

        <span class="c1">// Assert
</span>        <span class="n">var</span> <span class="n">firstEvent</span> <span class="p">=</span> <span class="n">_eventPublisher</span><span class="p">.</span><span class="n">PublishedEvents</span>
            <span class="p">.</span><span class="n">OfType</span><span class="p">&lt;</span><span class="n">FirstEvent</span><span class="p">&gt;()</span>
            <span class="p">.</span><span class="nf">SingleOrDefault</span><span class="p">();</span>

        <span class="n">Check</span><span class="p">.</span><span class="nf">That</span><span class="p">(</span><span class="n">firstEvent</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">IsNotNull</span><span class="p">();</span>

        <span class="n">Check</span><span class="p">.</span><span class="nf">That</span><span class="p">(</span><span class="n">firstEvent</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">IsNotZero</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>To make this test compile we also need to write a fake for 
<code class="highlighter-rouge">EventPublisher</code> interface. Please keep in mind that fake is a simple
but <strong>working</strong> implementation of the interface:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">InMemoryEventPublisher</span> <span class="p">:</span> <span class="n">EventPublisher</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Event</span><span class="p">&gt;</span> <span class="n">_publishedEvents</span> 
      <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Event</span><span class="p">&gt;();</span>

    <span class="k">public</span> <span class="n">IReadOnlyList</span><span class="p">&lt;</span><span class="n">Event</span><span class="p">&gt;</span> <span class="n">PublishedEvents</span>
        <span class="p">=&gt;</span> <span class="n">_publishedEvents</span><span class="p">;</span>

    <span class="k">public</span> <span class="n">Task</span> <span class="nf">Publish</span><span class="p">(</span><span class="n">Event</span> <span class="n">@event</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">@event</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="nf">nameof</span><span class="p">(</span><span class="n">@event</span><span class="p">));</span>

        <span class="n">_publishedEvents</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">@event</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="n">CompletedTask</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>I am sure that after seeing both versions of the test 
you agree with me that both are quite short and readable,
yet the second version does not have the earlier mentioned disadvantages.
Now you may rightly say that with the second approach 
you are forced to create fakes for
almost all interfaces in your application. You are right, but
you actually want to create fakes. Here is why:</p>

<ol>
  <li>
    <p>Fakes are like TDD for your interface <strong>design</strong>. By creating a fake
 you actually check how difficult it is for a client 
 of your API to provide an implementation. A fake too big or 
 too difficult to
 implement is a sign that maybe your interface is doing too much.
 Also fakes can be treated as “reference implementations” of interfaces
 and as such they are part of your API documentation.</p>
  </li>
  <li>
    <p>Writing a fake is a one-time effort. After fake is written it can
 be reused across many tests. Compare this with subs and mocks that you
 need to setup every time you want to use them.</p>
  </li>
</ol>

<p>Now it is time for a more real world example. 
As you probably heard <em>Performance is a feature</em> but logging can 
also be a feature. Imagine an application where we must log
every failed login attempt. Since this is a business requirement
we want to code it as an acceptance test.
How difficult it can be to check that one method call was
performed:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">logger</span><span class="p">.</span><span class="nf">LogDebug</span><span class="p">(</span><span class="s">"User '{userName}' log into application."</span><span class="p">,</span> <span class="s">"root"</span><span class="p">);</span></code></pre></figure>

<p>In practice it can be more difficult than it seems especially if you use
notoriously hard to test <code class="highlighter-rouge">ILogger</code> from <code class="highlighter-rouge">Microsoft.Extensions.Logging.Abstractions</code> package.</p>

<p>Why is <code class="highlighter-rouge">ILogger</code> hard to test?</p>

<ol>
  <li>
    <p><code class="highlighter-rouge">ILogger</code> interface contains only three methods 
 (<a href="https://github.com/aspnet/Logging/blob/master/src/Microsoft.Extensions.Logging.Abstractions/ILogger.cs">source code here</a>)
 rest of its functionality is provided via extension methods.</p>
  </li>
  <li>
    <p>Extension methods that operate on <code class="highlighter-rouge">ILogger</code> often 
 create wrappers around original 
 arguments using classes like <code class="highlighter-rouge">FormattedLogValues</code>.
 Most of these wrapper classes does not 
 overload <code class="highlighter-rouge">Equals</code> and <code class="highlighter-rouge">GetHashCode</code> rendering
 argument matchers from mocking frameworks useless.</p>
  </li>
  <li>
    <p>No easy access to the logged message.
 Only method responsible for actual logging on <code class="highlighter-rouge">ILogger</code> interface
 is <code class="highlighter-rouge">Log</code>:</p>
  </li>
</ol>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">void</span> <span class="n">Log</span><span class="p">&lt;</span><span class="n">TState</span><span class="p">&gt;(</span>
  <span class="n">LogLevel</span> <span class="n">logLevel</span><span class="p">,</span> 
  <span class="n">EventId</span> <span class="n">eventId</span><span class="p">,</span> 
  <span class="n">TState</span> <span class="n">state</span><span class="p">,</span> 
  <span class="n">Exception</span> <span class="n">exception</span><span class="p">,</span> 
  <span class="n">Func</span><span class="p">&lt;</span><span class="n">TState</span><span class="p">,</span> <span class="n">Exception</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;</span> <span class="n">formatter</span><span class="p">);</span></code></pre></figure>

<p>To gain access to the logged message we must either dig 
into <code class="highlighter-rouge">state</code> argument
or call <code class="highlighter-rouge">formatter(state, exception)</code>.</p>

<p>All this causes that naive testing aproachs like this fail:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="na">[Fact]</span>
<span class="k">public</span> <span class="n">async</span> <span class="n">Task</span> <span class="nf">Naive_test</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">var</span> <span class="n">logger</span> <span class="p">=</span> <span class="n">Substitute</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">ILogger</span><span class="p">&lt;</span><span class="n">SomeClass</span><span class="p">&gt;&gt;();</span>
      
  <span class="n">logger</span>
    <span class="p">.</span><span class="nf">LogDebug</span><span class="p">(</span><span class="s">"User '{userName}' log into application."</span><span class="p">,</span> <span class="s">"root"</span><span class="p">);</span>

  <span class="n">logger</span><span class="p">.</span><span class="nf">Received</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">LogDebug</span><span class="p">(</span><span class="s">"User '{userName}' log into application."</span><span class="p">,</span> <span class="s">"root"</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>And how they fail? With confusing error messages like this one:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">Error Message:
 NSubstitute.Exceptions.ReceivedCallsException : 
  Expected to receive a call matching:
  Log&lt;Object&gt;(Debug, 0, User 'root' log into application., &lt;null&gt;, Func&lt;Object, Exception, String&gt;)
Actually received no matching calls.
Received 1 non-matching call 
 (non-matching arguments indicated with '*' characters):
  Log&lt;Object&gt;(Debug, 0, *User 'root' log into application.*, &lt;null&gt;, Func&lt;Object, Exception, String&gt;)</code></pre></figure>

<p>Not very helpful, isn’t it?</p>

<p>If you really want to test <code class="highlighter-rouge">ILogger</code> using NSubstitute you must
use the following code:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">var</span> <span class="n">logger</span> <span class="p">=</span> <span class="n">Substitute</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">ILogger</span><span class="p">&lt;</span><span class="n">SomeClass</span><span class="p">&gt;&gt;();</span>

<span class="n">dynamic</span> <span class="n">state</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
<span class="n">Exception</span> <span class="n">exception</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span> 
<span class="n">Func</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">,</span> <span class="n">Exception</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;</span> <span class="n">formatter</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>

<span class="n">logger</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="n">LogLevel</span><span class="p">.</span><span class="n">Debug</span><span class="p">,</span> 
  <span class="n">Arg</span><span class="p">.</span><span class="n">Any</span><span class="p">&lt;</span><span class="n">EventId</span><span class="p">&gt;(),</span> 
  <span class="n">Arg</span><span class="p">.</span><span class="n">Do</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;(</span><span class="n">s</span> <span class="p">=&gt;</span> <span class="n">state</span> <span class="p">=</span> <span class="n">s</span><span class="p">),</span> 
  <span class="n">Arg</span><span class="p">.</span><span class="n">Do</span><span class="p">&lt;</span><span class="n">Exception</span><span class="p">&gt;(</span><span class="n">ex</span> <span class="p">=&gt;</span> <span class="n">exception</span> <span class="p">=</span> <span class="n">ex</span><span class="p">),</span> 
  <span class="n">Arg</span><span class="p">.</span><span class="n">Do</span><span class="p">&lt;</span><span class="n">Func</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">,</span> <span class="n">Exception</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;&gt;(</span><span class="n">f</span> <span class="p">=&gt;</span> <span class="n">formatter</span> <span class="p">=</span> <span class="n">f</span><span class="p">));</span>

<span class="n">logger</span>
  <span class="p">.</span><span class="nf">LogDebug</span><span class="p">(</span><span class="s">"User '{userName}' log into application."</span><span class="p">,</span> <span class="s">"root"</span><span class="p">);</span>

<span class="n">logger</span><span class="p">.</span><span class="nf">Received</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
  <span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="n">LogLevel</span><span class="p">.</span><span class="n">Debug</span><span class="p">,</span> 
      <span class="n">Arg</span><span class="p">.</span><span class="n">Any</span><span class="p">&lt;</span><span class="n">EventId</span><span class="p">&gt;(),</span> 
      <span class="n">Arg</span><span class="p">.</span><span class="n">Any</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;(),</span> 
      <span class="n">Arg</span><span class="p">.</span><span class="n">Any</span><span class="p">&lt;</span><span class="n">Exception</span><span class="p">&gt;(),</span> 
      <span class="n">Arg</span><span class="p">.</span><span class="n">Any</span><span class="p">&lt;</span><span class="n">Func</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">,</span> <span class="n">Exception</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;&gt;());</span>

<span class="n">Check</span><span class="p">.</span><span class="nf">That</span><span class="p">(</span><span class="nf">formatter</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">exception</span><span class="p">))</span>
    <span class="p">.</span><span class="nf">IsEqualIgnoringCase</span><span class="p">(</span><span class="s">"User 'root' log into application."</span><span class="p">);</span></code></pre></figure>

<p>Did I say something earlier about unreadable tests and a lot of 
visual noise caused by mocking frameworks? Now you can see it with your
own eyes!</p>

<p>Now it is time for our second approach using fakes. First we create
a fake logger:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">InMemoryListOfEntriesLogger</span> <span class="p">:</span> <span class="n">ILogger</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">LogEntry</span><span class="p">&gt;</span> <span class="n">_loggedEntries</span> 
      <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">LogEntry</span><span class="p">&gt;();</span>

    <span class="k">private</span> <span class="k">readonly</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">int</span><span class="p">&gt;</span> <span class="n">_bookmarks</span> 
      <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">int</span><span class="p">&gt;();</span>

    <span class="k">public</span> <span class="n">IReadOnlyList</span><span class="p">&lt;</span><span class="n">LogEntry</span><span class="p">&gt;</span> <span class="n">LoggedEntries</span> 
        <span class="p">=&gt;</span> <span class="n">_loggedEntries</span><span class="p">;</span>

    <span class="k">public</span> <span class="n">IDisposable</span> <span class="n">BeginScope</span><span class="p">&lt;</span><span class="n">TState</span><span class="p">&gt;(</span><span class="n">TState</span> <span class="n">state</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Notice that we do not have to implement
</span>        <span class="c1">// all methods for interfaces that are *not
</span>        <span class="c1">// part* of our application.
</span>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotImplementedException</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="kt">bool</span> <span class="nf">IsEnabled</span><span class="p">(</span><span class="n">LogLevel</span> <span class="n">logLevel</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">void</span> <span class="n">Log</span><span class="p">&lt;</span><span class="n">TState</span><span class="p">&gt;(</span>
        <span class="n">LogLevel</span> <span class="n">logLevel</span><span class="p">,</span> 
        <span class="n">EventId</span> <span class="n">eventId</span><span class="p">,</span> 
        <span class="n">TState</span> <span class="n">state</span><span class="p">,</span> 
        <span class="n">Exception</span> <span class="n">exception</span><span class="p">,</span> 
        <span class="n">Func</span><span class="p">&lt;</span><span class="n">TState</span><span class="p">,</span> <span class="n">Exception</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;</span> <span class="n">formatter</span><span class="p">)</span> 
    <span class="p">{</span>
        <span class="n">_loggedEntries</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span>
          <span class="k">new</span> <span class="nf">LogEntry</span><span class="p">(</span>
            <span class="n">logLevel</span><span class="p">,</span> 
            <span class="nf">formatter</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">exception</span><span class="p">),</span> 
            <span class="n">exception</span><span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">LogEntry</span> <span class="p">{</span>
  <span class="k">public</span> <span class="n">LogLevel</span> <span class="n">LogLevel</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
  <span class="k">public</span> <span class="kt">string</span> <span class="n">Message</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
  <span class="k">public</span> <span class="n">Exception</span> <span class="n">Exception</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

  <span class="k">public</span> <span class="nf">LogEntry</span><span class="p">(</span><span class="n">LogLevel</span> <span class="n">logLevel</span><span class="p">,</span> <span class="kt">string</span> <span class="n">message</span><span class="p">,</span> 
    <span class="n">Exception</span> <span class="n">ex</span> <span class="p">=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">LogLevel</span> <span class="p">=</span> <span class="n">logLevel</span><span class="p">;</span>
      <span class="n">Message</span> <span class="p">=</span> <span class="n">message</span><span class="p">;</span>
      <span class="n">Exception</span> <span class="p">=</span> <span class="n">ex</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="k">override</span> <span class="kt">string</span> <span class="nf">ToString</span><span class="p">()</span>
      <span class="p">=&gt;</span> <span class="err">$</span><span class="s">"{LogLevel}: {Message}"</span> <span class="p">+</span> 
         <span class="p">(</span><span class="n">Exception</span> <span class="p">!=</span> <span class="k">null</span> 
            <span class="p">?</span> <span class="err">$</span><span class="s">" Exception: {Exception.GetType().Name}"</span> 
            <span class="p">:</span> <span class="s">""</span><span class="p">)</span> <span class="p">+</span>
         <span class="s">"."</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>Notice that we did not implement all methods of <code class="highlighter-rouge">ILogger</code> interface.
For external interfaces that are not under our control we should
implement just enough functionality in our fakes to make them usable.</p>

<p>Now it is time for writing actual test:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">var</span> <span class="n">logger</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">InMemoryListOfEntriesLogger</span><span class="p">();</span>

<span class="n">logger</span><span class="p">.</span><span class="nf">LogDebug</span><span class="p">(</span><span class="s">"User '{userName}' log into application."</span><span class="p">,</span> <span class="s">"root"</span><span class="p">);</span>

<span class="n">Check</span><span class="p">.</span><span class="nf">That</span><span class="p">(</span><span class="n">logger</span><span class="p">.</span><span class="n">LoggedEntries</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">HasElementThatMatches</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> 
        <span class="n">x</span><span class="p">.</span><span class="n">Level</span> <span class="p">==</span> <span class="n">LogLevel</span><span class="p">.</span><span class="n">Debug</span> <span class="p">&amp;&amp;</span>
        <span class="n">x</span><span class="p">.</span><span class="n">Message</span> <span class="p">==</span> <span class="s">"User 'root' log into application."</span><span class="p">);</span></code></pre></figure>

<p>Wow! Test is short, readable and simple. Exactly what I was looking for.</p>

<p>I hope that this blog post persuaded you to start using fakes in your
unit tests. At least you now know that you have a good alternative to
mocking frameworks.</p>

<p>Sample source code (with a bit more complicated example): 
<a href="https://github.com/marcin-chwedczuk/blog-fakes-vs-mocks">GitHub</a>.</p>


	  ]]></description>
	</item>

	<item>
	  <title>.NET Core, HttpClient, Proxy and localhost</title>
	  <link>//dotnet-core-http-client-proxy-and-localhost</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2018-05-03T02:00:00+02:00</pubDate>
	  <guid>//dotnet-core-http-client-proxy-and-localhost</guid>
	  <description><![CDATA[
	     <p>Recently I wanted to spy network traffic between a <code class="highlighter-rouge">HttpClient</code> and
a REST service. This task turned out to be more difficult than I
though.</p>

<p>My first challenge was to force <code class="highlighter-rouge">HttpClient</code> to use a proxy.
After a bit of googling I have found 
the following code:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">using</span> <span class="nn">System.Net</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Net.Http</span><span class="p">;</span>

<span class="n">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ConfigurationBuilder</span><span class="p">()</span>
	 <span class="p">.</span><span class="nf">SetBasePath</span><span class="p">(</span><span class="n">Directory</span><span class="p">.</span><span class="nf">GetCurrentDirectory</span><span class="p">())</span>
	 <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="s">"appsettings.json"</span><span class="p">);</span>
<span class="n">var</span> <span class="n">configuration</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="n">var</span> <span class="n">webProxy</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">WebProxy</span><span class="p">(</span>
	 <span class="k">new</span> <span class="nf">Uri</span><span class="p">(</span><span class="n">configuration</span><span class="p">[</span><span class="s">"ProxyUri"</span><span class="p">]),</span> 
	 <span class="n">BypassOnLocal</span><span class="p">:</span> <span class="k">false</span><span class="p">);</span>

<span class="n">var</span> <span class="n">proxyHttpClientHandler</span> <span class="p">=</span> <span class="k">new</span> <span class="n">HttpClientHandler</span> <span class="p">{</span>
	 <span class="n">Proxy</span> <span class="p">=</span> <span class="n">webProxy</span><span class="p">,</span>
	 <span class="n">UseProxy</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span>
<span class="p">};</span>

<span class="n">var</span> <span class="n">httpClient</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">HttpClient</span><span class="p">(</span><span class="n">proxyHttpClientHandler</span><span class="p">)</span> <span class="p">{</span>
	 <span class="n">BaseAddress</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Uri</span><span class="p">(</span><span class="n">configuration</span><span class="p">[</span><span class="s">"RestServiceUri"</span><span class="p">])</span>
<span class="p">};</span></code></pre></figure>

<p>Unfortunately my REST service was exposed on <code class="highlighter-rouge">localhost</code>
and later I found out that proxies are not used for local requests:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="err">/*</span><span class="w"> </span><span class="err">appsettings.json</span><span class="w"> </span><span class="err">*/</span><span class="w">
</span><span class="p">{</span><span class="w">
    </span><span class="nt">"RestServiceUri"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:5001/api"</span><span class="p">,</span><span class="w">
    </span><span class="nt">"ProxyUri"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:8080"</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<p>OK, no problem I though,
let’s just add another DNS alias to localhost - 
just to fool <code class="highlighter-rouge">Uri</code> class to think 
that we are accessing some other machine.
This can be done by modifying <code class="highlighter-rouge">hosts</code> file, which
on my Ubuntu machine is located in <code class="highlighter-rouge">/etc</code> directory:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">127.0.0.1   localhost
127.0.0.2   mymachine</code></pre></figure>

<p>Then I had to change my <code class="highlighter-rouge">appsettings.json</code> file:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="err">/*</span><span class="w"> </span><span class="err">appsettings.json</span><span class="w"> </span><span class="err">*/</span><span class="w">
</span><span class="p">{</span><span class="w">
    </span><span class="nt">"RestServiceUri"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://mymachine:5001/api"</span><span class="p">,</span><span class="w">
    </span><span class="nt">"ProxyUri"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:8080"</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<p>And my REST service configuration so that it will listen for
incoming connections on all interfaces:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="n">IWebHost</span> <span class="nf">BuildWebHost</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span> <span class="p">=&gt;</span>
	<span class="n">WebHost</span><span class="p">.</span><span class="nf">CreateDefaultBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
		 <span class="p">.</span><span class="n">UseStartup</span><span class="p">&lt;</span><span class="n">Startup</span><span class="p">&gt;()</span>
		 <span class="p">.</span><span class="nf">UseUrls</span><span class="p">(</span><span class="s">"http://0.0.0.0:5001"</span><span class="p">)</span>
		 <span class="p">.</span><span class="nf">Build</span><span class="p">();</span></code></pre></figure>

<p>After all these preparations I was able to intercept traffic
using <a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project">ZAP Proxy</a>:
<img src="assets/images/2018-05-03/zap_1.png" alt="Intercepted traffix" /></p>

<p>But was this all necessary? Turns out that not really.
You may use your vanilla <code class="highlighter-rouge">HttpClient</code>:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">var</span> <span class="n">restServiceUri</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Uri</span><span class="p">(</span><span class="n">configuration</span><span class="p">[</span><span class="s">"RestServiceUri"</span><span class="p">]);</span>
<span class="n">var</span> <span class="n">httpClient</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">HttpClient</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">BaseAddress</span> <span class="p">=</span> <span class="n">restServiceUri</span>
<span class="p">};</span></code></pre></figure>

<p>And then just set <code class="highlighter-rouge">http_proxy</code> environmental variable to get
exactly the same behaviour (without any need to modify <code class="highlighter-rouge">hosts</code>, or
to force REST service to listen on all interfaces).
Just run in Bash:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">http_proxy=http://localhost:8080 dotnet run</code></pre></figure>

<p>Since I don’t have any machine with Windows/MacOS I cannot
confirm that it works on all OS’es, but at least it works
on my Ubuntu.</p>


	  ]]></description>
	</item>


</channel>
</rss>
