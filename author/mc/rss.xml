<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>marcin-chwedczuk.github.io/</title>
   
   <link>https://marcin-chwedczuk.github.io/</link>
   <description>A place where I can share my thoughts about programming</description>
   <language>en-uk</language>
   <managingEditor> marcin-chwedczuk</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Reduce cognitive load for readers of your code</title>
	  <link>//reduce-cognitive-load</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2019-03-05T01:00:00+01:00</pubDate>
	  <guid>//reduce-cognitive-load</guid>
	  <description><![CDATA[
	     <p>Recently I was reviewing a piece of code that was performing
some computation on file sizes. The author of that code
followed good programming practices and created a separate
type for representing file sizes:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">struct</span> <span class="nc">FileSize</span> <span class="p">{</span>
   <span class="k">public</span> <span class="k">static</span> <span class="n">FileSize</span> <span class="nf">FromBytes</span><span class="p">(</span><span class="kt">ulong</span> <span class="n">bytes</span><span class="p">)</span>
       <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">FileSize</span><span class="p">(</span><span class="n">bytes</span><span class="p">);</span>
   <span class="c1">// Other factory methods...
</span>   
   <span class="k">private</span> <span class="kt">ulong</span> <span class="n">_bytes</span><span class="p">;</span>
   <span class="k">public</span> <span class="kt">ulong</span> <span class="n">TotalBytes</span>
       <span class="p">=&gt;</span> <span class="n">_bytes</span><span class="p">;</span>
   
   <span class="k">public</span> <span class="nf">FileSize</span><span class="p">(</span><span class="kt">ulong</span> <span class="n">bytes</span><span class="p">)</span> <span class="p">{</span>
       <span class="n">_bytes</span> <span class="p">=</span> <span class="n">bytes</span><span class="p">;</span>
   <span class="p">}</span>
   <span class="c1">// Other stuff, equatable, comparable, blah...
</span>   
   <span class="k">public</span> <span class="k">override</span> <span class="kt">string</span> <span class="nf">ToString</span><span class="p">()</span>
       <span class="p">=&gt;</span> <span class="err">$</span><span class="s">"{_bytes:##,#B}"</span><span class="p">;</span>
   
   <span class="k">public</span> <span class="k">static</span> <span class="n">FileSize</span> <span class="k">operator</span><span class="p">+(</span><span class="n">FileSize</span> <span class="n">left</span><span class="p">,</span> <span class="n">FileSize</span> <span class="n">right</span><span class="p">)</span>
       <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">FileSize</span><span class="p">(</span><span class="n">left</span><span class="p">.</span><span class="n">_bytes</span> <span class="p">+</span> <span class="n">right</span><span class="p">.</span><span class="n">_bytes</span><span class="p">);</span>
   <span class="c1">// Other operators...
</span><span class="p">}</span></code></pre></figure>

<p>Yet when it came to computing a total size of set of files I saw
code like this:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">var</span> <span class="n">total</span> <span class="p">=</span> <span class="n">fileSizes</span><span class="p">.</span><span class="nf">Aggregate</span><span class="p">((</span><span class="n">acc</span><span class="p">,</span> <span class="n">curr</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">acc</span> <span class="p">+</span> <span class="n">curr</span><span class="p">);</span></code></pre></figure>

<p>What is wrong with this code?
It forces readers to concentrate on irrelevant details like how
to sum a list of file sizes. As a programmer, reading a lot
of code I would prefer to have something like:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">var</span> <span class="n">total</span> <span class="p">=</span> <span class="n">fileSizes</span><span class="p">.</span><span class="nf">Sum</span><span class="p">();</span></code></pre></figure>

<p>Which is shorter, easier to read and also hides implementation
of <code class="highlighter-rouge">Sum</code> method.</p>

<p>The first code snippet is also a good example of 
<a href="http://wiki.c2.com/?MixingLevels">Mixing levels of abstractions</a>
antipattern. If you never heard about this antipattern or
of the <em>Single level of abstraction</em> principle you can find
<a href="http://principles-wiki.net/principles:single_level_of_abstraction">a good introduction here</a>.</p>

<p>Fortunately for us, we may quickly implement <code class="highlighter-rouge">Sum</code> 
using extension methods and also solve the problem
of summing empty list of file sizes (which previous snippet did not
handle well):</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">EnumerableOfFileSize</span> <span class="p">{</span>
     <span class="cm">/* This version is fine, but does not check overflow:
     public static FileSize Sum(this IEnumerable&lt;FileSize&gt; sizes)
         =&gt; sizes.Aggregate(FileSize.FromBytes(0), 
                            (acc, curr) =&gt; acc + curr);
     */</span>

     <span class="k">public</span> <span class="k">static</span> <span class="n">FileSize</span> <span class="nf">Sum</span><span class="p">(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">FileSize</span><span class="p">&gt;</span> <span class="n">sizes</span><span class="p">)</span> <span class="p">{</span>
         <span class="kt">ulong</span> <span class="n">total</span> <span class="p">=</span> <span class="m">0</span><span class="p">;</span>

         <span class="k">foreach</span> <span class="p">(</span><span class="n">var</span> <span class="n">size</span> <span class="k">in</span> <span class="n">sizes</span><span class="p">)</span> <span class="p">{</span>
             <span class="n">total</span> <span class="p">=</span> <span class="k">checked</span><span class="p">(</span><span class="n">total</span> <span class="p">+</span> <span class="n">size</span><span class="p">.</span><span class="n">TotalBytes</span><span class="p">);</span>
         <span class="p">}</span>

         <span class="k">return</span> <span class="k">new</span> <span class="nf">FileSize</span><span class="p">(</span><span class="n">total</span><span class="p">);</span>
     <span class="p">}</span>
 <span class="p">}</span></code></pre></figure>

<p>After this change we achieved code that is easy to read and
also hides irrelevant details. Yay!</p>


	  ]]></description>
	</item>

	<item>
	  <title>Why using PESEL as a password is a very bad idea</title>
	  <link>//why-using-pesel-as-a-password-is-a-very-bad-idea</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2019-02-25T01:00:00+01:00</pubDate>
	  <guid>//why-using-pesel-as-a-password-is-a-very-bad-idea</guid>
	  <description><![CDATA[
	     <p>I am sure, none of you, my dear readers would use a PESEL number
as a password or an encryption key.
Still, as unbelievable as it may sounds, recently 
I was talking with my friend on a topic of computer security and
he told me a horror story about a certain company doing exactly that.
Such practice is highly insecure and in this post I going to
prove that. Namely we will create an encrypted 7zip archive with
a random PESEL as a password and then we will crack it using
<a href="https://github.com/magnumripper/JohnTheRipper">John the Ripper</a>.</p>

<p>DISCLAIMER: All information is provided for educational purposes only.
Accessing data that does not belong to you is in most
cases illegal. Always check your local laws and your company policy
before using tools presented in this blog post.</p>

<h3 id="wtf-is-pesel">WTF is PESEL?</h3>

<p>First, let me explain for non-Polish readers what is
a <a href="https://en.wikipedia.org/wiki/PESEL">PESEL number</a>.
Basically it is an identification number similar to 
US Social Security number (SSN).
Every Polish citizen is assigned one unique PESEL number at birth.</p>

<p>But more important to us here is, that 
PESEL numbers have a very well defined structure:
<img src="assets/images/2019-02-25/pesel.svg" alt="PESEL number structure" />
First six digits of a PESEL number represent a date of birth
in <code class="highlighter-rouge">YYMMDD</code> format. Of course such a simple format does not allow us
to represent birth dates after year 1999. 
So there is a small twist, by adding twenty to the month number
we signify that the year is <code class="highlighter-rouge">20YY</code> not <code class="highlighter-rouge">19YY</code>.
For example if a person was born on 25th March 2029 we encode it
in PESEL as <code class="highlighter-rouge">292325XXXXX</code>.</p>

<p>The other interesting property of a PESEL number is that one before last
digit is used to encode person gender. Males are assigned
only odd digits, females only even digits.</p>

<p>The last digit of a PESEL is a checksum that can be easily computed
using other digits.</p>

<h3 id="so-how-many-pesels-are-there">So how many PESELs are there?</h3>

<p>Let’s assume that we intercepted a message encrypted by a PESEL
number. We know that the recipient of the message is male,
with age between twenty and sixty five.
How much PESELs we must brute force in the worst case scenario?</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">(65 - 20 + 1) * 356 * 10^3 * 5 = 83_950_000</code></pre></figure>

<p>How many six character 
passwords are there consisting of small letters and numbers?</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">(10 + 26)^6 = 2_176_782_336</code></pre></figure>

<p>Do you consider a six character password safe? Of course not!
Yet the number of possible six character passwords dwarfs
the number of possible PESELs.</p>

<p>What is worse, is that it is usually not too difficult to find out person
<em>year</em> of birth, thus reducing number of possible PESELs even more.</p>

<h3 id="demo-time">Demo time</h3>

<p>To demonstrate how weak protection PESEL passwords provide,
we will first create an encrypted <code class="highlighter-rouge">7z</code> archive and then
we will try to crack it using John the Ripper.</p>

<p>All provided instructions are for Ubuntu, but there should
be no problems with running modified versions of
these commands on macOS or Windows.</p>

<p>First we need to install <a href="https://www.7-zip.org/download.html">7-zip</a>:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">sudo apt-get install p7zip-full p7zip-rar</code></pre></figure>

<p>Then we can create an encrypted archive:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">7z a -m0<span class="o">=</span>lzma2 -mx<span class="o">=</span>9 -p29032502498 secret.7z secret.txt </code></pre></figure>

<p>with <code class="highlighter-rouge">29032502498</code> PESEL as a password.</p>

<p>Just to make sure that the archive is indeed encrypted,
we execute:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="gp">$ </span>7z l -slt secret.7z

<span class="o">(</span>... skipped ...<span class="o">)</span>
Encrypted <span class="o">=</span> +
Method <span class="o">=</span> LZMA2:16 7zAES:19
Block <span class="o">=</span> 0</code></pre></figure>

<p><code class="highlighter-rouge">7zAES:19</code> visible in the command output means that the archive 
is encrypted with AES-256 algorithm.</p>

<h3 id="meet-john">Meet John</h3>

<p>To install John the Ripper we must follow instructions
<a href="https://github.com/magnumripper/JohnTheRipper/blob/bleeding-jumbo/doc/INSTALL-UBUNTU">from the official repository</a>.
I compiled John without OpenCL and REXGEN support, YMMV though.</p>

<p>To allow John to crack <code class="highlighter-rouge">7z</code> file, first we must extract a hash from
it:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">./john/run/7z2john.pl secret.7z &gt; secret.7z.hash</code></pre></figure>

<p>To make this Perl script work, I had to install this library:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">sudo apt-get install libcompress-raw-lzma-perl</code></pre></figure>

<p>Then I generated a suitable list of PESEL numbers
(people aged 20-65, males) using
<a href="https://github.com/marcin-chwedczuk/blog-pesel-password-bad-idea/blob/master/peselgen/Program.cs">this short program</a>
that I wrote.
The generated file <code class="highlighter-rouge">pesels.txt</code> is about 1GB big and
consist of 82 185 000 PESEL numbers.
We are going to use it as a John the Ripper wordlist.</p>

<p>Now we can start cracking:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">./john/run/john --wordlist<span class="o">=</span>pesels.txt secret.7z.hash

<span class="c"># Found passwords are saved in john.pot file</span>
cat ./john/run/john.pot</code></pre></figure>

<p>I performed two test. First I tried to crack a small
340B archive that you can find <a href="https://github.com/marcin-chwedczuk/blog-pesel-password-bad-idea/blob/master/secret.7z">here</a>.
On it I achieved speed of about 100 checked PESELs per second,
this means that cracking it, could take in the worst case scenario:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">82 185 000 / 100 / 3600 / 24 ~ 10 days</code></pre></figure>

<p>And all this on my four years old i7-4771 CPU, using John without GPU support.
Imagine how fast it would work on a high end Amazon EC2 instance…</p>

<p>Then I performed a second test, trying to crack 3MB archive
containing a PDF file. There I achieved speed of about 50 PESELs per second.
Not bad either (20 days in the worst case scenario).</p>

<p>But you don’t have to believe me here. Grab the
<a href="https://github.com/marcin-chwedczuk/blog-pesel-password-bad-idea/blob/master/secret.7z">test archive</a> and try to crack it yourself!
I encrypted it with a random PESEL generated using <a href="https://bogus-z-polska.pl/generatory/all.html">Bogus</a> site. Good luck!</p>

<p>As we can see archives protected by PESEL numbers can be easily cracked.</p>

<h3 id="conclusion">Conclusion</h3>

<ul>
  <li>Do NOT use PESEL numbers neither as passwords nor as encryption keys.</li>
  <li>Do USE <a href="https://www.gnupg.org/">GPG</a> if you want to send other person
 some secret data using email.</li>
</ul>

<h3 id="references">References</h3>

<ul>
  <li><a href="https://askubuntu.com/a/928301">https://askubuntu.com/a/928301</a></li>
  <li><a href="https://sourceforge.net/p/p7zip/patches/25/#3da5">https://sourceforge.net/p/p7zip/patches/25/#3da5</a></li>
  <li><a href="https://github.com/magnumripper/JohnTheRipper/blob/bleeding-jumbo/doc/INSTALL-UBUNTU">https://github.com/magnumripper/JohnTheRipper/blob/bleeding-jumbo/doc/INSTALL-UBUNTU</a></li>
  <li><a href="https://www.openwall.com/john/doc/">https://www.openwall.com/john/doc/</a></li>
  <li><a href="https://github.com/koboi137/john/blob/master/7z2john.pl#L32">https://github.com/koboi137/john/blob/master/7z2john.pl#L32</a></li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>FluentAssertions and code formatting</title>
	  <link>//fluent-assertions-and-code-formatting</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2019-02-10T01:00:00+01:00</pubDate>
	  <guid>//fluent-assertions-and-code-formatting</guid>
	  <description><![CDATA[
	     <p>Recently I was playing with
<a href="https://fluentassertions.com/">FluentAssertions</a>
library.
I was really amazed by the beautiful error messages generated by FluentAssertions.
For example, for this failing test:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="na">[Fact]</span>
<span class="k">public</span> <span class="k">void</span> <span class="nf">add_returns_sum_of_its_arguments</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Arrange
</span>    <span class="n">var</span> <span class="n">service</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ServiceA</span><span class="p">();</span>
    
    <span class="c1">// Assert
</span>    <span class="n">service</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">).</span><span class="nf">Should</span><span class="p">().</span><span class="nf">Be</span><span class="p">(</span><span class="m">3</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>FluentAssertions generates a message:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">Outcome: Failed
Error Message:
Expected service.Add(1, 2) to be 3, but found 42.</code></pre></figure>

<p>Unfortunatelly my joy did not last long.
When I added an explanation to an assertion and
broke the line because it got too long:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="na">[Fact]</span>
<span class="k">public</span> <span class="k">void</span> <span class="nf">add_returns_sum_of_its_arguments</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Arrange
</span>    <span class="n">var</span> <span class="n">service</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ServiceA</span><span class="p">();</span>

    <span class="c1">// Assert
</span>    <span class="n">service</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">Should</span><span class="p">().</span><span class="nf">Be</span><span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="n">because</span><span class="p">:</span> <span class="s">"three is sum of one and two"</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>FluentAssertions reproted just:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">Outcome: Failed
Error Message:
Expected value to be 3 because three is sum of one and two,
    but found 42.</code></pre></figure>

<p>It turns out, in order to have these fancy error messages,
we must place <code class="highlighter-rouge">.Should()</code> on the same line as the
tested expression:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="na">[Fact]</span>
<span class="k">public</span> <span class="k">void</span> <span class="nf">add_returns_sum_of_arguments</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Arrange
</span>    <span class="n">var</span> <span class="n">service</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ServiceA</span><span class="p">();</span>

    <span class="c1">// Assert
</span>    <span class="n">service</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">)</span><span class="cm">/*abra cadabra*/</span><span class="p">.</span><span class="nf">Should</span><span class="p">()</span>
        <span class="p">.</span><span class="nf">Be</span><span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="n">because</span><span class="p">:</span> <span class="s">"three is sum of one and two"</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>The above test generates a message:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">Outcome: Failed
Error Message:
Expected service.Add(1, 2)/*abra cadabra*/ to be 3 because three
   is sum of one and two, but found 42.</code></pre></figure>

<p>Notice that comment was also include in the message.</p>

<p>This behavior of FluentAssertions really suprised me.
Why the way we format our code have influence over
the readability of error messages?</p>

<p>Anyway this is how FluentAssertions works,
moreover this behaviour is described 
(with short explanation how it works) on the <em>first</em> page
of <a href="https://fluentassertions.com/documentation/#subject-identification">the official documentation</a>.
If only I have spend ten minutes reading the friendly docs instead of
skimming it…</p>

<p>From now on I will follow “Read The Friendly Manual” (RTFM) advice!!!</p>


	  ]]></description>
	</item>

	<item>
	  <title>Spy JVM network traffic with Owasp ZAP proxy</title>
	  <link>//spy-jvm-network-traffic-with-owasp-zap</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2019-01-24T01:00:00+01:00</pubDate>
	  <guid>//spy-jvm-network-traffic-with-owasp-zap</guid>
	  <description><![CDATA[
	     <p>We start by downloading <a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project">Owasp ZAP proxy</a>:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="gp">$ </span><span class="c"># Download and unpack...</span>
<span class="gp">$ </span>curl -O -J -L https://github.com/zaproxy/zaproxy/releases/download/2.7.0/ZAP_2.7.0_Linux.tar.gz
<span class="gp">$ </span>tar xvzf ZAP_2.7.0_Linux.tar.gz

<span class="gp">$ </span><span class="c"># Run ZAP proxy...</span>
<span class="gp">$ </span>./ZAP_2.7.0/zap.sh  </code></pre></figure>

<p>By default ZAP listens on <code class="highlighter-rouge">localhost:8080</code>. You can change default address
and port by going into Tools -&gt; Options -&gt; Local Proxies tab:
<img src="assets/images/2019-01-25/zap_options.png" alt="ZAP Local Proxies tab" /></p>

<p>To test that network traffic interception works, 
we will use a simple Java app:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
    <span class="n">CloseableHttpClient</span> <span class="n">client</span> <span class="o">=</span> <span class="n">HttpClientBuilder</span><span class="o">.</span><span class="na">create</span><span class="o">()</span>
            <span class="o">.</span><span class="na">useSystemProperties</span><span class="o">()</span>
            <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">status</span> <span class="o">=</span> <span class="n">client</span>
            <span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">HttpGet</span><span class="o">(</span><span class="s">"http://httpstat.us/200"</span><span class="o">))</span>
            <span class="o">.</span><span class="na">getStatusLine</span><span class="o">()</span>
            <span class="o">.</span><span class="na">toString</span><span class="o">();</span>

        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">status</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">finally</span> <span class="o">{</span>
        <span class="n">client</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>There are few things to notice:</p>

<ul>
  <li>We use Apache HttpClient to perform http requests.</li>
  <li>By default Apache HttpClient do not use proxy servers,
 even if you set ZAP as a system wide proxy. We will deal
 with this problem later. For now we will use <code class="highlighter-rouge">useSystemProperties()</code> method
 on <code class="highlighter-rouge">HttpClientBuilder</code> class that will enable proxy support.</li>
  <li>Right now we will concentrate on intercepting HTTP traffic.
 I will show you how to deal with HTTPS connections later.</li>
</ul>

<p>If we, now, run our application, we will notice that ZAP did not
intercept any traffic:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="gp">$ </span>java -jar ./build/libs/zapproxydemo-1.0-SNAPSHOT.jar 
HTTP/1.1 200 OK</code></pre></figure>

<p>Indeed right now our application does not know that it should use
a proxy server. We may force it to use a proxy via JVM command line
parameters:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="gp">$ </span>java -Dhttp.proxyHost<span class="o">=</span>127.0.0.1 <span class="se">\</span>
 -Dhttp.proxyPort<span class="o">=</span>8080 <span class="se">\</span>
 -Dhttps.proxyHost<span class="o">=</span>127.0.0.1 <span class="se">\</span>
 -Dhttps.proxyPort<span class="o">=</span>8080 <span class="se">\</span>
 -jar ./build/libs/zapproxydemo-1.0-SNAPSHOT.jar </code></pre></figure>

<p>or by dynamicaly setting system properties in code:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"http.proxyHost"</span><span class="o">,</span> <span class="s">"127.0.0.1"</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"http.proxyPort"</span><span class="o">,</span> <span class="s">"8080"</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"https.proxyHost"</span><span class="o">,</span> <span class="s">"127.0.0.1"</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"https.proxyPort"</span><span class="o">,</span> <span class="s">"8080"</span><span class="o">);</span></code></pre></figure>

<p>Whatever method you use, if you run the application again,
you should be able to see now a single intercepted request in ZAP:
<img src="assets/images/2019-01-25/intercepted_request.png" alt="Intercepted request in ZAP" />
You can remove previously recorded requests in ZAP by pressing <code class="highlighter-rouge">Ctrl+N</code>.</p>

<h4 id="intercepting-traffic-from-proxy-unfriendly-apps">Intercepting traffic from proxy unfriendly apps</h4>

<p>As I mentioned previously, Apache HttpClient ignores
proxy settings by default.
If we create our <code class="highlighter-rouge">HttpClient</code> using <code class="highlighter-rouge">create()</code> method:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
    <span class="n">CloseableHttpClient</span> <span class="n">client</span> <span class="o">=</span> <span class="n">HttpClientBuilder</span><span class="o">.</span><span class="na">create</span><span class="o">()</span>
            <span class="o">.</span><span class="na">build</span><span class="o">();</span>

    <span class="k">try</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">status</span> <span class="o">=</span> <span class="n">client</span>
            <span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">HttpGet</span><span class="o">(</span><span class="s">"http://httpstat.us/200"</span><span class="o">))</span>
            <span class="o">.</span><span class="na">getStatusLine</span><span class="o">()</span>
            <span class="o">.</span><span class="na">toString</span><span class="o">();</span>

        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">status</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">finally</span> <span class="o">{</span>
        <span class="n">client</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p><code class="highlighter-rouge">HttpClient</code> will ignore proxy settings no matter how we set them.</p>

<p>For dealing with cases like this, we may use
<a href="https://github.com/rofl0r/proxychains-ng/tree/v4.13">proxychains-ng</a>.
This project is a new reincarnation of old
<a href="https://github.com/haad/proxychains">proxychains</a> util which is no
longer maintained.
Please be aware of this difference. On my system <code class="highlighter-rouge">apt-get install proxychains</code>
installs <code class="highlighter-rouge">proxychains</code> and not <code class="highlighter-rouge">proxychains-ng</code> that we need here.
To install <code class="highlighter-rouge">proxychains-ng</code> I needed to download sources from GitHub
and compile them myself:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="gp">$ </span><span class="c"># Checkout tag v4.13</span>
<span class="gp">$ </span>git clone --branch v4.13 git@github.com:rofl0r/proxychains-ng.git

<span class="gp">$ </span><span class="nb">cd </span>proxychains-ng
<span class="gp">$ </span>./configure
<span class="gp">$ </span><span class="c"># If there are no errors from configure script</span>
<span class="gp">$ </span>make
<span class="gp">$ </span>./proxychains4 --help

Usage:  ./proxychains4 -q -f config_file program_name <span class="o">[</span>arguments]
    -q makes proxychains quiet - this overrides the config setting
    -f allows one to manually specify a configfile to use
    <span class="k">for </span>example : proxychains telnet somehost.com
More <span class="nb">help </span><span class="k">in </span>README file

<span class="gp">$ </span><span class="c"># Install system wide...</span>
<span class="gp">$ </span>sudo make install</code></pre></figure>

<p>We also need to change default <code class="highlighter-rouge">proxychains-ng</code> configuration:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">sudo vim /etc/proxychains.conf

<span class="c"># Comment out line:</span>
<span class="c"># proxy_dns</span>

<span class="c"># Change ProxyList to:</span>
<span class="o">[</span>ProxyList]
http 127.0.0.1 8080</code></pre></figure>

<p>Now if we run our application using <code class="highlighter-rouge">proxychains</code>:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="gp">$ </span>proxychains4 java -jar ./build/libs/zapproxydemo-1.0-SNAPSHOT.jar 
<span class="o">[</span>proxychains] config file found: /etc/proxychains.conf
<span class="o">[</span>proxychains] preloading /usr/local/lib/libproxychains4.so
<span class="o">[</span>proxychains] DLL init: proxychains-ng 4.13-git-10-g1198857
<span class="o">[</span>proxychains] Strict chain  ...  127.0.0.1:8080  ...  23.99.0.12:80  ...  OK
HTTP/1.1 200 OK</code></pre></figure>

<p>We will be able to intercept traffic using ZAP.</p>

<p>One of the limitations of proxychains is that it may not work for
subprocesses. If you app launches other applications they may
not be proxied at all.</p>

<h4 id="intercepting-https-traffic">Intercepting HTTPS traffic</h4>

<p>So far, so good, but what will happen if we try to intercept
HTTPS traffic from a new, more secure, example:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="p">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
    <span class="n">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"http.proxyHost"</span><span class="o">,</span> <span class="s">"127.0.0.1"</span><span class="o">);</span>
    <span class="n">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"http.proxyPort"</span><span class="o">,</span> <span class="s">"8080"</span><span class="o">);</span>
    <span class="n">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"https.proxyHost"</span><span class="o">,</span> <span class="s">"127.0.0.1"</span><span class="o">);</span>
    <span class="n">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"https.proxyPort"</span><span class="o">,</span> <span class="s">"8080"</span><span class="o">);</span>

    <span class="n">CloseableHttpClient</span> <span class="n">client</span> <span class="o">=</span> <span class="n">HttpClientBuilder</span><span class="o">.</span><span class="na">create</span><span class="o">()</span>
            <span class="o">.</span><span class="na">useSystemProperties</span><span class="o">()</span>
            <span class="o">.</span><span class="na">build</span><span class="o">();</span>

    <span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="s">"https://www.random.org/integers/?num=12&amp;min=1&amp;max=100&amp;col=3&amp;base=10&amp;format=plain&amp;rnd=new"</span><span class="o">;</span>

    <span class="k">try</span> <span class="o">{</span>
        <span class="n">HttpEntity</span> <span class="n">entity</span> <span class="o">=</span> <span class="n">client</span>
            <span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">HttpGet</span><span class="o">(</span><span class="n">url</span><span class="o">))</span>
            <span class="o">.</span><span class="na">getEntity</span><span class="o">();</span>

        <span class="n">String</span> <span class="n">responseBody</span> <span class="o">=</span> <span class="n">EntityUtils</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">entity</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">responseBody</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">finally</span> <span class="o">{</span>
        <span class="n">client</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>We will get an exception similar to:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">Exception in thread "main" javax.net.ssl.SSLHandshakeException:
sun.security.validator.ValidatorException: PKIX path building failed:
sun.security.provider.certpath.SunCertPathBuilderException: unable
to find valid certification path to requested target</code></pre></figure>

<p>We get this exception because certificate returned by ZAP
proxy is not trusted.
To fix this problem we must generate a new ZAP root cert and add it
(temporarily) to Java keystore.</p>

<p>Generate a new cert and save it somewhere
(Tools -&gt; Options -&gt; Dynamic SSL Certificates):
<img src="assets/images/2019-01-25/gen_cert.png" alt="ZAP generate a new root certificate" />
Don’t forget to click OK.</p>

<p>Then add ZAP root certificate to Java keystore:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="gp">$ </span><span class="nb">cd</span> <span class="nv">$JAVA_HOME</span>/jre/lib/security
<span class="gp">$ </span><span class="nb">pwd</span>
/usr/lib/jvm/java-8-oracle/jre/lib/security
<span class="gp">$ </span><span class="c"># You should see cacerts file in this directory.</span>

<span class="gp">$ </span><span class="c"># Create a backup</span>
<span class="gp">$ </span>sudo cp cacerts cacerts.bakup2019-01-26

<span class="gp">$ </span><span class="c"># Add certificate to the store</span>
<span class="gp">$ </span>sudo keytool -importcert <span class="se">\</span>
 -alias zap-proxy.org <span class="se">\</span>
 -file ~/owasp_zap_root_ca.cer <span class="se">\</span>
 -keystore cacerts
<span class="gp">$ </span><span class="c"># When asked about keystore password </span>
<span class="gp">$ </span><span class="c"># write: changeit (the default password)</span></code></pre></figure>

<p>If we run our app again, we will be able to intercept an HTTPS request:
<img src="assets/images/2019-01-25/intercept_https.png" alt="Intercepted HTTPS call" /></p>

<p>This again should work with <code class="highlighter-rouge">proxychains-ng</code>.
Sometimes to make it work you will have to <strong>uncommend</strong> <code class="highlighter-rouge">proxy_dns</code>
option in <code class="highlighter-rouge">/etc/proxychains.conf</code> file, that I earlier said to
comment out. Why is this sometimes needed, to be honest, I don’t know but
it works this way…</p>

<p><strong>For security reasons</strong> after you finished your debugging session,
you should remove ZAP certificate from Java keystore:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="gp">$ </span><span class="nb">cd</span> <span class="nv">$JAVA_HOME</span>/jre/lib/security

<span class="gp">$ </span><span class="c"># Make sure you see your cert</span>
<span class="gp">$ </span>sudo keytool -list -v -keystore cacerts | grep zap-proxy.org
Enter keystore password:  changeit

<span class="gp">$ </span><span class="c"># Remove it</span>
<span class="gp">$ </span>sudo keytool -delete -alias zap-proxy.org -keystore cacerts

<span class="gp">$ </span><span class="c"># Make sure it's gone</span>
<span class="gp">$ </span>sudo keytool -list -v -keystore cacerts | grep zap-proxy.org
Enter keystore password:  changeit</code></pre></figure>

<p>Always generate a new ZAP proxy certificate
before adding it to Java keystore. If you must do this
often, I can advice you to create a script and/or bash alias to
make entire process more convenient.</p>


	  ]]></description>
	</item>

	<item>
	  <title>ReadOnly does not mean Immutable</title>
	  <link>//read-only-does-not-mean-immutable</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2019-01-06T01:00:00+01:00</pubDate>
	  <guid>//read-only-does-not-mean-immutable</guid>
	  <description><![CDATA[
	     <p>Recently I have introduced a subtle bug into my code.
It all started when I was creating a few
value object classes:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">Method</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="nf">Method</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">Name</span> <span class="p">=</span> <span class="n">name</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// Equals, GetHashCode, ToString skipped
</span>    <span class="c1">// to save space.
</span><span class="p">}</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">TypedArgument</span> <span class="p">{</span>
    <span class="k">public</span> <span class="n">Type</span> <span class="n">Type</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">object</span> <span class="n">Value</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="nf">TypedArgument</span><span class="p">(</span><span class="n">Type</span> <span class="n">type</span><span class="p">,</span> <span class="kt">object</span> <span class="k">value</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">Type</span> <span class="p">=</span> <span class="n">type</span><span class="p">;</span>
        <span class="n">Value</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">MethodCall</span> <span class="p">{</span>
    <span class="k">public</span> <span class="n">Method</span> <span class="n">CalledMethod</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="n">IReadOnlyList</span><span class="p">&lt;</span><span class="n">TypedArgument</span><span class="p">&gt;</span> <span class="n">PassedArguments</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="nf">MethodCall</span><span class="p">(</span>
        <span class="n">Method</span> <span class="n">calledMethod</span><span class="p">,</span>
        <span class="n">IReadOnlyList</span><span class="p">&lt;</span><span class="n">TypedArgument</span><span class="p">&gt;</span> <span class="n">args</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">CalledMethod</span> <span class="p">=</span> <span class="n">calledMethod</span><span class="p">;</span>
        <span class="c1">// NOTICE: No defensive copy.
</span>        <span class="n">PassedArguments</span> <span class="p">=</span> <span class="n">args</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>While implementing <code class="highlighter-rouge">MethodCall</code> class constructor, I wrongly assumed
that <code class="highlighter-rouge">IReadOnlyList&lt;T&gt;</code> behaves like an immutable list.
In other words that its content never changes.
Due to this wrong assumption I did not create a defensive copy,
that I usually do for collection arguments.
Instead I just assigned <code class="highlighter-rouge">args</code> parameter to
a readonly property named <code class="highlighter-rouge">PassedArguments</code>.</p>

<p><code class="highlighter-rouge">MethodCall</code> object was then used by another component
called <code class="highlighter-rouge">MethodCallSpy</code>:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">MethodCallSpy</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">MethodCall</span><span class="p">&gt;</span> <span class="n">_methodCalls</span>
        <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">MethodCall</span><span class="p">&gt;();</span>

    <span class="k">public</span> <span class="n">IReadOnlyList</span><span class="p">&lt;</span><span class="n">MethodCall</span><span class="p">&gt;</span> <span class="n">MethodCalls</span>
        <span class="p">=&gt;</span> <span class="n">_methodCalls</span><span class="p">;</span>

    <span class="k">private</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">TypedArgument</span><span class="p">&gt;</span> <span class="n">_currentArguments</span>
        <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">TypedArgument</span><span class="p">&gt;();</span>

    <span class="k">public</span> <span class="k">void</span> <span class="nf">AddArgument</span><span class="p">(</span><span class="n">TypedArgument</span> <span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">_currentArguments</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">arg</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">void</span> <span class="nf">AddMethodCall</span><span class="p">(</span><span class="n">Method</span> <span class="n">method</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">var</span> <span class="n">methodCall</span> <span class="p">=</span> 
            <span class="k">new</span> <span class="nf">MethodCall</span><span class="p">(</span><span class="n">method</span><span class="p">,</span> <span class="n">_currentArguments</span><span class="p">);</span>
        <span class="n">_methodCalls</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">methodCall</span><span class="p">);</span>

        <span class="c1">// NOTICE: Old List&lt;T&gt; is not modified.
</span>        <span class="n">_currentArguments</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">TypedArgument</span><span class="p">&gt;();</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><code class="highlighter-rouge">MethodCallSpy</code>
gathers <code class="highlighter-rouge">TypedArgument</code>s passed to it via <code class="highlighter-rouge">AddArgument</code> calls
in <code class="highlighter-rouge">_currentArguments</code> list. 
Then when someone calls <code class="highlighter-rouge">AddMethodCall</code> method, it uses stored
<code class="highlighter-rouge">TypedArgument</code>s and a value of <code class="highlighter-rouge">method</code> parameter to construct
a new <code class="highlighter-rouge">MethodCall</code> object and adds it to <code class="highlighter-rouge">_methodCalls</code> list.</p>

<p><code class="highlighter-rouge">MethodCallSpy</code> class worked perfectly, at least until I
returned to it a few days later to make some improvements.
Yes, I know, I know
<a href="https://xkcd.com/1691/">“premature optimization is the root of all evil”</a>
but this was my quick’n’dirty pet project and I just cannot resist:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// readonly added.
</span><span class="k">private</span> <span class="k">readonly</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">TypedArgument</span><span class="p">&gt;</span> <span class="n">_currentArguments</span>
    <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">TypedArgument</span><span class="p">&gt;();</span>
<span class="k">public</span> <span class="k">void</span> <span class="nf">AddMethodCall_AfterRefactoring</span><span class="p">(</span><span class="n">Method</span> <span class="n">method</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Assumes that MethodCall will make a defensive copy
</span>    <span class="c1">// of _currentArguments list.
</span>    <span class="n">var</span> <span class="n">methodCall</span> <span class="p">=</span> 
        <span class="k">new</span> <span class="nf">MethodCall</span><span class="p">(</span><span class="n">method</span><span class="p">,</span> <span class="n">_currentArguments</span><span class="p">);</span>

    <span class="n">_methodCalls</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">methodCall</span><span class="p">);</span>

    <span class="c1">// NOTICE: We use clear instead of creating a new list
</span>    <span class="n">_currentArguments</span><span class="p">.</span><span class="nf">Clear</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>

<p>Of course I also made a lot of other refactorings without
running my tests (I had only a few integration tests).
This was another mistake of mine. Looks like good
programming practices help even if you are building
quickly a Proof Of Concept solution.</p>

<p>When I finally ran my tests, they all have failed. For some reason
<code class="highlighter-rouge">MethodCall</code> objects did not contain any <code class="highlighter-rouge">TypedArgument</code>s.
Strange, isn’t it…</p>

<p>After a quarter of debugging, I have found that the bug was
introduced by my wrong assumptions about <code class="highlighter-rouge">IReadOnlyList&lt;T&gt;</code>
interface.</p>

<p><code class="highlighter-rouge">IReadOnlyList&lt;T&gt;</code>, <code class="highlighter-rouge">IReadOnlyCollection&lt;T&gt;</code> interfaces and
<code class="highlighter-rouge">ReadOnlyCollection&lt;T&gt;</code> class where introduced
to protect owners of the collections, not the receivers.
For example if a method is declared like this:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">void</span> <span class="n">ProcessList</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">IReadOnlyList</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">list</span><span class="p">);</span></code></pre></figure>

<p>We can be sure, that it will not attempt to modify
the list that we are going to pass to it:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">var</span> <span class="n">list</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="p">{</span> <span class="s">"foo"</span><span class="p">,</span> <span class="s">"bar"</span> <span class="p">};</span>
<span class="nf">ProcessList</span><span class="p">(</span><span class="n">list</span><span class="p">);</span>
<span class="p">//</span> <span class="n">still</span><span class="p">:</span> <span class="n">list</span> <span class="p">==</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="p">{</span> <span class="s">"foo"</span><span class="p">,</span> <span class="s">"bar"</span> <span class="p">}</span></code></pre></figure>

<p>Of course <code class="highlighter-rouge">ProcessList</code> method may be
implemented in an evil way:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">private</span> <span class="k">void</span> <span class="n">ProcessList</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">IReadOnlyList</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">list</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">(</span><span class="n">list</span> <span class="k">as</span> <span class="n">IList</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;)[</span><span class="m">0</span><span class="p">]</span> <span class="p">=</span> <span class="k">default</span><span class="p">(</span><span class="n">T</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>But we can protect our lists from evil code by using <code class="highlighter-rouge">AsReadOnly</code>
method, that returns a <code class="highlighter-rouge">List&lt;T&gt;</code> instance
wrapped in a <code class="highlighter-rouge">ReadOnlyCollection&lt;T&gt;</code> object
(<a href="https://github.com/dotnet/corefx/blob/master/src/Common/src/CoreLib/System/Collections/Generic/List.cs#L251">source code</a>).</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">var</span> <span class="n">list</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="p">{</span> <span class="s">"foo"</span><span class="p">,</span> <span class="s">"bar"</span> <span class="p">};</span>
<span class="nf">ProcessList</span><span class="p">(</span><span class="n">list</span><span class="p">.</span><span class="nf">AsReadOnly</span><span class="p">());</span>
<span class="c1">// Our list can be modified now
// only by using reflection
// to get access to private fields
</span><span class="p">//</span> <span class="n">of</span> <span class="n">ReadOnlyCollection</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="k">class</span><span class="err">.</span></code></pre></figure>

<p>On the other hand receivers of <code class="highlighter-rouge">IReadOnlyList&lt;T&gt;</code> arguments
are not protected at all. Consider this short program:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="na">[Fact]</span>
<span class="k">public</span> <span class="k">void</span> <span class="nf">ReadonlyButNotForYou</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">var</span> <span class="n">list</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="p">{</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span> <span class="p">};</span>

    <span class="kt">int</span> <span class="nf">extraInt</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">list</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">=</span> <span class="m">42</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">list</span><span class="p">[</span><span class="m">0</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="nf">ProcessList</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="n">extraInt</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">private</span> <span class="k">void</span> <span class="nf">ProcessList</span><span class="p">(</span><span class="n">IReadOnlyList</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">ints</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">extraInt</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">first</span> <span class="p">=</span> <span class="n">ints</span><span class="p">.</span><span class="nf">First</span><span class="p">();</span>
    <span class="kt">int</span> <span class="n">tmp</span> <span class="p">=</span> <span class="nf">extraInt</span><span class="p">();</span>
    <span class="kt">int</span> <span class="n">firstAgain</span> <span class="p">=</span> <span class="n">ints</span><span class="p">.</span><span class="nf">First</span><span class="p">();</span>

    <span class="n">Assert</span><span class="p">.</span><span class="nf">Equal</span><span class="p">(</span><span class="n">first</span><span class="p">,</span> <span class="n">firstAgain</span><span class="p">);</span> <span class="c1">// fails
</span><span class="p">}</span></code></pre></figure>

<p>It demonstrates that <code class="highlighter-rouge">IReadOnlyList&lt;T&gt;</code> can change even
during duration of a single method!</p>

<p>So what should we do to avoid this class of bugs?
Option one is to use old and proven defensive copy
technique:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="nf">MethodCall</span><span class="p">(</span>
    <span class="n">Method</span> <span class="n">calledMethod</span><span class="p">,</span> 
    <span class="n">IReadOnlyList</span><span class="p">&lt;</span><span class="n">TypedArgument</span><span class="p">&gt;</span> <span class="n">args</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">CalledMethod</span> <span class="p">=</span> <span class="n">calledMethod</span><span class="p">;</span>
    <span class="n">PassedArguments</span> <span class="p">=</span> 
        <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">TypedArgument</span><span class="p">&gt;(</span><span class="n">args</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>Remember not to use <code class="highlighter-rouge">ReadOnlyCollection&lt;T&gt;</code> class to create
a defensive copy. This class is only a wrapper - it
does not copy the actual data.</p>

<p>The second option is to use truly immutable
data structures, for example from
<a href="https://www.nuget.org/packages/System.Collections.Immutable">System.Collections.Immutable</a>
package:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="nf">MethodCall</span><span class="p">(</span>
    <span class="n">Method</span> <span class="n">calledMethod</span><span class="p">,</span> 
    <span class="n">IImmutableList</span><span class="p">&lt;</span><span class="n">TypedArgument</span><span class="p">&gt;</span> <span class="n">args</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">CalledMethod</span> <span class="p">=</span> <span class="n">calledMethod</span><span class="p">;</span>
    <span class="n">PassedArguments</span> <span class="p">=</span> <span class="n">args</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>These types are truly immutable, they never change their
contents after they are created.</p>

<p>One problem that I have with <code class="highlighter-rouge">System.Collections.Immutable</code>
is that immutable types have often different performance
characteristics than their mutable counterparts.
For example <code class="highlighter-rouge">ImmutableList</code> is implemented using,
guess what, a good old AVL tree
(<a href="https://github.com/dotnet/corefx/blob/master/src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList_1.cs#L28">source code</a>).</p>

<p>On the other hand <code class="highlighter-rouge">ImmutableArray</code> that is backed by a
regular array, seems like a perfect candidate for making
defensive copies. You can read more about <code class="highlighter-rouge">ImmutableArray</code>
in <a href="https://blogs.msdn.microsoft.com/dotnet/2013/06/24/please-welcome-immutablearrayt/">this MSDN article</a>.</p>

<p>It is never wrong to take a look at the collection source code
before using it (all links to GitHub):</p>

<ul>
  <li><a href="https://github.com/dotnet/corefx/blob/master/src/Common/src/CoreLib/System/Collections/ObjectModel/ReadOnlyCollection.cs">ReadOnlyCollection</a></li>
  <li><a href="https://github.com/dotnet/corefx/blob/master/src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList_1.cs">ImmutableList</a></li>
  <li><a href="https://github.com/dotnet/corefx/blob/master/src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray_1.cs">ImmutableArray</a></li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>Random thoughts on Maybe</title>
	  <link>//random-thoughts-on-maybe</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2019-01-01T01:00:00+01:00</pubDate>
	  <guid>//random-thoughts-on-maybe</guid>
	  <description><![CDATA[
	     <p>With functional programming on the rise nowadays, 
more and more people start using functional 
patterns in their code.
One of the simplest patterns is <code class="highlighter-rouge">Maybe&lt;T&gt;</code> monad
also called <code class="highlighter-rouge">Option&lt;T&gt;</code> or <code class="highlighter-rouge">Optional&lt;T&gt;</code>.
<code class="highlighter-rouge">Maybe&lt;T&gt;</code>’s primary use case is to represent a possibly
missing value.</p>

<p>I have already use <code class="highlighter-rouge">Maybe&lt;T&gt;</code> a few times in real
codebases and in this post I want to gather my thoughts
on <code class="highlighter-rouge">Maybe&lt;T&gt;</code> and how, I think, it should be used.</p>

<h4 id="why-we-use-maybet">Why we use <code class="highlighter-rouge">Maybe&lt;T&gt;</code>?</h4>

<p>Most people that use <code class="highlighter-rouge">Maybe&lt;T&gt;</code> generally fall into
one of the two categories.</p>

<h5 id="category-1-wants-to-eliminate-nullreferenceexception">Category 1: Wants to eliminate <code class="highlighter-rouge">NullReferenceException</code></h5>

<p>For a long time before <code class="highlighter-rouge">Maybe&lt;T&gt;</code> programmers tried to
clearly state to the clients of their API that a given
method may return <code class="highlighter-rouge">null</code> instead of an object.
Some of them used special naming conventions or 
comments, for example:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// Naming convention and XML documentation
// comments in action.
</span><span class="k">public</span> <span class="k">interface</span> <span class="n">IUserRepository</span> <span class="p">{</span>
    <span class="c1">/// &lt;returns&gt;
</span>    <span class="c1">/// Returns &lt;c&gt;null&lt;/c&gt; if user is not found.
</span>    <span class="c1">/// &lt;/returns&gt;
</span>    <span class="n">User</span> <span class="nf">FindById</span><span class="p">(</span><span class="n">UserId</span> <span class="n">id</span><span class="p">);</span>

    <span class="c1">/// &lt;exception cref="EntityNotFound"&gt;
</span>    <span class="c1">/// If user is not found.
</span>    <span class="c1">/// &lt;/exception&gt;
</span>    <span class="n">User</span> <span class="nf">FindRequiredById</span><span class="p">(</span><span class="n">UserId</span> <span class="n">id</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>Others resorted to using special marking attributes and
static code analysis tools. 
A good example of this category is 
<a href="https://www.nuget.org/packages/JetBrains.Annotations">JetBrains.Annotations</a> package, that can be used together with ReSharper
to detect missing null checks:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">interface</span> <span class="n">IUserRepository</span> <span class="p">{</span>
    <span class="p">[</span><span class="n">CanBeNull</span><span class="p">]</span>
    <span class="n">User</span> <span class="nf">FindById</span><span class="p">(</span><span class="n">UserId</span> <span class="n">id</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">interface</span> <span class="n">IUserService</span> <span class="p">{</span>
    <span class="k">void</span> <span class="nf">ActivateUser</span><span class="p">([</span><span class="n">NotNull</span><span class="p">]</span> <span class="n">User</span> <span class="n">user</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>Yet another solution to this problem were 
<a href="https://www.infoq.com/articles/code-contracts-csharp">Code Contracts</a>
developed by Microsoft.</p>

<p>None of those solutions is perfect and <code class="highlighter-rouge">Maybe&lt;T&gt;</code> seems
to offer a better alternative. 
Why? Because it is checked by the compiler,
does not require additional tools and does not slow
down compilation.
But remember there is 
<a href="https://en.wikipedia.org/wiki/No_Silver_Bullet">no silver bullet</a>,
and <code class="highlighter-rouge">Maybe&lt;T&gt;</code> is not perfect either.</p>

<p>We can use <code class="highlighter-rouge">Maybe&lt;T&gt;</code> like this:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">interface</span> <span class="n">IUserRepository</span> <span class="p">{</span>
    <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">User</span><span class="p">&gt;</span> <span class="nf">FindById</span><span class="p">(</span><span class="n">UserId</span> <span class="n">id</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">// and usage:
</span><span class="n">var</span> <span class="n">user</span> <span class="p">=</span> <span class="n">usersRepository</span><span class="p">.</span><span class="nf">FindById</span><span class="p">(</span><span class="n">userId</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="n">user</span><span class="p">.</span><span class="n">HasValue</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">user</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>

<p>If you find yourself in this category of programmers, 
you would definitely
want to use a lightweight library that
does not force you to embrace a more functional style.
One good library that I can recommend is: 
<a href="https://github.com/vkhorikov/CSharpFunctionalExtensions">CSharpFunctionalExtensions</a>.</p>

<p>If you choose a different library, please make sure to check
that <code class="highlighter-rouge">Maybe&lt;T&gt;</code> is implemented using <code class="highlighter-rouge">struct</code>, otherwise you
may be surprised:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Maybe</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">GetUserAgent</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>One small downside of using a <code class="highlighter-rouge">struct</code> is
possibility of declaration of a nullable <code class="highlighter-rouge">Maybe&lt;T&gt;</code> type:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// Don't do this:
</span><span class="n">Maybe</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;?</span> <span class="n">bad</span><span class="p">;</span></code></pre></figure>

<p>When I was writing this article I tried to gather some
best practices of using <code class="highlighter-rouge">Maybe&lt;T&gt;</code>. 
Unfortunately it was very difficult to provide a comprehensive
list. There is not much material on this on the web (I mean using 
<code class="highlighter-rouge">Maybe&lt;T&gt;</code> <em>not</em> in the FP fashion) and the available
material is often contradictory. 
And so instead of providing you with a list of best practices, 
I will only give you some hints where you can look for advice.</p>

<p>We should start our search by looking at
Java 8, which was published in 2014 and introduced 
<code class="highlighter-rouge">java.util.Optional&lt;T&gt;</code> class. 
The purpose of this class is to be a nullability marker
for method results just like our <code class="highlighter-rouge">Maybe&lt;T&gt;</code>. 
There are a lot of articles about how <code class="highlighter-rouge">Optional&lt;T&gt;</code> should
and should not be used. 
A good starting point will be 
<a href="https://stackoverflow.com/questions/26327957/should-java-8-getters-return-optional-type">this SO question</a>
with the first two answers. 
From this question alone we may learn e.g. to never wrap
a collection into <code class="highlighter-rouge">Maybe&lt;T&gt;</code>, 
instead of we should return a possibly empty collection.</p>

<p>The downside of reading Java’s best practices is that some
of them do not apply to C#. For example let’s look at the
advice given in <a href="https://stackoverflow.com/a/39005452/1779504">this SO answer</a>:</p>

<blockquote>
  <p>When a method can accept optional parameters, 
it’s preferable to adopt the well-proven approach 
and design such case using method overloading.</p>
</blockquote>

<p>In other words author suggest to change:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// this ctor:
</span><span class="k">public</span> <span class="nf">SystemMessage</span><span class="p">(</span>
    <span class="kt">string</span> <span class="n">title</span><span class="p">,</span>
    <span class="kt">string</span> <span class="n">body</span><span class="p">,</span>
    <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">Attachment</span><span class="p">&gt;</span> <span class="n">attachment</span><span class="p">);</span>

<span class="c1">// into two ctor's:
</span><span class="k">public</span> <span class="nf">SystemMessage</span><span class="p">(</span>
    <span class="kt">string</span> <span class="n">title</span><span class="p">,</span>
    <span class="kt">string</span> <span class="n">body</span><span class="p">,</span>
    <span class="n">Attachment</span> <span class="n">attachment</span><span class="p">);</span>

<span class="k">public</span> <span class="nf">SystemMessage</span><span class="p">(</span>
    <span class="kt">string</span> <span class="n">title</span><span class="p">,</span>
    <span class="kt">string</span> <span class="n">body</span><span class="p">);</span>

<span class="c1">// Because using these ctor's would be easier for
// the clients. Consider:
</span><span class="k">new</span> <span class="nf">SystemMessage</span><span class="p">(</span><span class="s">"foo"</span><span class="p">,</span> <span class="s">"bar"</span><span class="p">,</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">Attachment</span><span class="p">&gt;.</span><span class="n">None</span><span class="p">)</span>
<span class="k">new</span> <span class="nf">SystemMessage</span><span class="p">(</span><span class="s">"foo"</span><span class="p">,</span> <span class="s">"bar"</span><span class="p">,</span> 
    <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">Attachment</span><span class="p">&gt;.</span><span class="nf">From</span><span class="p">(</span><span class="n">attachment</span><span class="p">))</span>
<span class="c1">// vs
</span><span class="k">new</span> <span class="nf">SystemMessage</span><span class="p">(</span><span class="s">"foo"</span><span class="p">,</span> <span class="s">"bar"</span><span class="p">);</span>
<span class="k">new</span> <span class="nf">SystemMessage</span><span class="p">(</span><span class="s">"foo"</span><span class="p">,</span> <span class="s">"bar"</span><span class="p">,</span> <span class="n">attachment</span><span class="p">);</span></code></pre></figure>

<p>But this argument does not applies to C#, where we can
use implicit conversion operator with default parameters
to achieve exactly the same effect without using overloads:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">struct</span> <span class="nc">Maybe</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">{</span> 
    <span class="k">private</span> <span class="n">T</span> <span class="n">_value</span><span class="p">;</span>
    <span class="k">private</span> <span class="kt">bool</span> <span class="n">_present</span><span class="p">;</span>
    
    <span class="k">public</span> <span class="nf">Maybe</span><span class="p">(</span><span class="n">T</span> <span class="k">value</span><span class="p">)</span> <span class="p">{</span> 
        <span class="n">_value</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
        <span class="n">_present</span> <span class="p">=</span> <span class="p">(</span><span class="k">value</span> <span class="p">!=</span> <span class="k">null</span><span class="p">);</span>
    <span class="p">}</span>
    
    <span class="k">public</span> <span class="k">static</span> <span class="k">implicit</span> <span class="k">operator</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">T</span> <span class="k">value</span><span class="p">)</span>
        <span class="p">=&gt;</span> <span class="k">value</span> <span class="p">==</span> <span class="k">null</span> <span class="p">?</span> <span class="k">new</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;()</span> <span class="p">:</span> <span class="k">new</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">value</span><span class="p">);</span> 
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Attachment</span> <span class="p">{</span> <span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">SystemMessage</span> <span class="p">{</span>
    <span class="k">public</span> <span class="nf">SystemMessage</span><span class="p">(</span>
        <span class="kt">string</span> <span class="n">title</span><span class="p">,</span> <span class="kt">string</span> <span class="n">body</span><span class="p">,</span> 
        <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">Attachment</span><span class="p">&gt;</span> <span class="n">attachment</span> <span class="p">=</span> <span class="k">default</span><span class="p">(</span><span class="n">Maybe</span><span class="p">&lt;</span><span class="n">Attachment</span><span class="p">&gt;))</span> <span class="p">{</span> 
    <span class="p">}</span>
<span class="p">}</span>   

<span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span> <span class="p">{</span> 
        <span class="k">new</span> <span class="nf">SystemMessage</span><span class="p">(</span><span class="s">"foo"</span><span class="p">,</span> <span class="s">"bar"</span><span class="p">);</span>
        <span class="k">new</span> <span class="nf">SystemMessage</span><span class="p">(</span><span class="s">"foo"</span><span class="p">,</span> <span class="s">"bar"</span><span class="p">,</span> <span class="k">new</span> <span class="nf">Attachment</span><span class="p">());</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>As we can see every Java’ish advice must be taken with 
a grain of salt.</p>

<p>Fortunately for us there is more and more C# posts about
using <code class="highlighter-rouge">Maybe&lt;T&gt;</code>. For example <a href="https://enterprisecraftsmanship.com/2015/03/13/functional-c-non-nullable-reference-types/">this one</a>
from the author of CSharpFunctionalExtensions library.</p>

<p>Although I cannot provide you with a list of best practices,
I think I have gathered enough experience to provide
you with a list of <code class="highlighter-rouge">Maybe&lt;T&gt;</code> code smells:</p>

<ul>
  <li>Nested <code class="highlighter-rouge">Maybe</code>s are wrong, for example <code class="highlighter-rouge">Maybe&lt;Maybe&lt;string&gt;&gt;</code>.
 Usually this is a sign that you should replace one of
 <code class="highlighter-rouge">Map</code> calls by a <code class="highlighter-rouge">FlatMap</code> (alternatively a <code class="highlighter-rouge">Select</code> by a <code class="highlighter-rouge">SelectMany</code> call).</li>
  <li><code class="highlighter-rouge">Maybe</code>s that wrap collections are wrong, for example <code class="highlighter-rouge">Maybe&lt;List&lt;User&gt;&gt;</code>.
 Instead return a non-empty or empty collection.</li>
  <li><code class="highlighter-rouge">Maybe</code>s wrapping nullable types are wrong, for example <code class="highlighter-rouge">Maybe&lt;int?&gt;</code>.
 Instead convert nullable type <code class="highlighter-rouge">T?</code> to <code class="highlighter-rouge">Maybe&lt;T&gt;</code>. 
 Even if you chosen library does not support such conversion out of 
 the box, you may write an extension method that provides this functionality
 yourself:</li>
</ul>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">ToMaybe</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">T</span><span class="p">?</span> <span class="k">value</span><span class="p">)</span>
        <span class="n">where</span> <span class="n">T</span><span class="p">:</span> <span class="k">struct</span>
    <span class="err">=&gt;</span> <span class="nc">value</span><span class="p">.</span><span class="n">HasValue</span> <span class="p">?</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;.</span><span class="nf">From</span><span class="p">(</span><span class="k">value</span><span class="p">.</span><span class="n">Value</span><span class="p">)</span> <span class="p">:</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;.</span><span class="n">None</span><span class="p">;</span></code></pre></figure>

<ul>
  <li>Nested callbacks when using <code class="highlighter-rouge">Maybe&lt;T&gt;</code> fluent interface are wrong.
 For example:</li>
</ul>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// BAD Fluent interface spaghetti
</span><span class="n">var</span> <span class="n">cultureBad</span> <span class="p">=</span> <span class="n">user</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span>
    <span class="n">u</span> <span class="p">=&gt;</span> <span class="nf">LoadPreferences</span><span class="p">(</span><span class="n">u</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">prefs</span> <span class="p">=&gt;</span> <span class="n">prefs</span><span class="p">.</span><span class="n">Culture</span><span class="p">));</span>

<span class="c1">// GOOD, only one operation per Select method call
</span><span class="n">var</span> <span class="n">cultureGood</span> <span class="p">=</span> <span class="n">user</span>
    <span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">u</span> <span class="p">=&gt;</span> <span class="nf">LoadPreferences</span><span class="p">(</span><span class="n">u</span><span class="p">))</span>
    <span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">prefs</span> <span class="p">=&gt;</span> <span class="n">prefs</span><span class="p">.</span><span class="n">Culture</span><span class="p">);</span></code></pre></figure>

<p>Also be mindful when using <code class="highlighter-rouge">Maybe&lt;T&gt;</code> with properties.
A declaration like:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">Culture</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span></code></pre></figure>

<p>Means that you may both get and set an optional value.
In other words assignment of <code class="highlighter-rouge">None</code> value to this 
property should be valid:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">foo</span><span class="p">.</span><span class="n">Culture</span> <span class="p">=</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;.</span><span class="n">None</span><span class="p">;</span></code></pre></figure>

<p>A property that can return <code class="highlighter-rouge">None</code> but must be
set to some value should be split into a getter and a method:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// AVOID:
</span><span class="n">Maybe</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">Culture</span> <span class="p">{</span>
    <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;.</span><span class="nf">From</span><span class="p">(</span><span class="n">_culture</span><span class="p">);</span> <span class="p">}</span>
    <span class="k">set</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">value</span><span class="p">.</span><span class="n">HasNoValue</span><span class="p">)</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span><span class="s">"Culture cannot be empty."</span><span class="p">);</span>
        <span class="n">_culture</span> <span class="p">=</span> <span class="k">value</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// PREFER:
</span><span class="n">Maybe</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">Culture</span>
    <span class="p">=&gt;</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;.</span><span class="nf">From</span><span class="p">(</span><span class="n">_culture</span><span class="p">);</span>

<span class="k">void</span> <span class="nf">SetCulture</span><span class="p">(</span><span class="kt">string</span> <span class="n">culture</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">culture</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span><span class="s">"Culture cannot be empty."</span><span class="p">);</span>
    <span class="n">_culture</span> <span class="p">=</span> <span class="n">culture</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>As you probably heard C# 8.0 is going to introduce a nullable reference types (NRT).
Will NRT replace <code class="highlighter-rouge">Maybe&lt;T&gt;</code>?
For “Category 1” programmers, NRTs offer a better
alternative to <code class="highlighter-rouge">Maybe&lt;T&gt;</code>. On the other hand a lot of people
that start in “Category 1”, slowly begin to embrace more FP approach.
Usually people start by using <code class="highlighter-rouge">Maybe&lt;T&gt;</code> fluent interface to transform
one <code class="highlighter-rouge">Maybe&lt;T&gt;</code> value into another. After some time they take a leap and
switch to writing in a more functional fashion.</p>

<p>We may also take a look at <a href="https://kotlinlang.org/">Kotlin</a>,
a language created by JetBrains that from the very beginning 
<a href="https://kotlinlang.org/docs/reference/null-safety.html">offered nullable reference types</a>. 
And yet the most popular Kotlin functional library
<a href="https://github.com/MarioAriasC/funKTionale">funKTionale</a> 
still offers an <code class="highlighter-rouge">Option</code> type. 
So it looks like NRT or not, <code class="highlighter-rouge">Maybe&lt;T&gt;</code> is going to stay with us for sure.</p>

<h5 id="category-2-wants-to-embrace-fp-paradigm">Category 2: Wants to embrace FP paradigm</h5>

<p>Programmers belonging to this category embraced FP. They
often think about using F# at work and are a bit disappointed
by poor C# pattern matching facilities.</p>

<p>Code written in FP fashion will never use <code class="highlighter-rouge">if</code> to check
if <code class="highlighter-rouge">Maybe&lt;T&gt;</code> contains some value, instead a fluent interface
will be used to transform <code class="highlighter-rouge">Maybe&lt;T&gt;</code>s into some other values, for example:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">private</span> <span class="n">UserRepository</span> <span class="n">_userRepository</span><span class="p">;</span>

<span class="c1">// NOTICE: No if's in code
</span><span class="k">public</span> <span class="k">static</span> <span class="n">Option</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">GetUserCulture</span><span class="p">(</span><span class="kt">int</span> <span class="n">userId</span><span class="p">)</span>
    <span class="p">=&gt;</span> <span class="n">_userRepository</span><span class="p">.</span><span class="nf">FindById</span><span class="p">(</span><span class="n">userId</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">BiMap</span><span class="p">(</span>
            <span class="n">Some</span><span class="p">:</span> <span class="n">user</span> <span class="p">=&gt;</span> <span class="nf">GetUserCulture</span><span class="p">(</span><span class="n">user</span><span class="p">),</span>
            <span class="n">None</span><span class="p">:</span> <span class="n">_</span> <span class="p">=&gt;</span> <span class="k">null</span><span class="p">);</span>

<span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">GetUserCulture</span><span class="p">(</span><span class="n">User</span> <span class="n">user</span><span class="p">)</span>
    <span class="p">=&gt;</span> <span class="n">user</span><span class="p">.</span><span class="n">Preferences</span>    
            <span class="p">.</span><span class="nf">Map</span><span class="p">(</span><span class="n">prefs</span> <span class="p">=&gt;</span> <span class="n">prefs</span><span class="p">.</span><span class="n">Culture</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">IfNone</span><span class="p">(</span><span class="s">"en-US"</span><span class="p">);</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">UserRepository</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">User</span><span class="p">&gt;</span> <span class="n">_users</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">User</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="k">new</span> <span class="nf">User</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="k">null</span><span class="p">),</span>
        <span class="k">new</span> <span class="nf">User</span><span class="p">(</span><span class="m">2</span><span class="p">,</span> <span class="k">new</span> <span class="n">UserPreferences</span> <span class="p">{</span>
            <span class="n">Culture</span> <span class="p">=</span> <span class="s">"pl-PL"</span>
        <span class="p">})</span>
    <span class="p">};</span>

    <span class="c1">// NOTICE: Extra extension methods for IEnumerable&lt;T&gt;
</span>    <span class="c1">// that return Option&lt;T&gt; instead of null's.
</span>    <span class="k">public</span> <span class="n">Option</span><span class="p">&lt;</span><span class="n">User</span><span class="p">&gt;</span> <span class="nf">FindById</span><span class="p">(</span><span class="kt">int</span> <span class="n">userId</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">_users</span><span class="p">.</span><span class="nf">Find</span><span class="p">(</span><span class="n">u</span> <span class="p">=&gt;</span> <span class="n">u</span><span class="p">.</span><span class="n">UserId</span> <span class="p">==</span> <span class="n">userId</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">User</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">UserId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">private</span> <span class="n">UserPreferences</span> <span class="n">_preferences</span><span class="p">;</span>
    <span class="k">public</span> <span class="n">Option</span><span class="p">&lt;</span><span class="n">UserPreferences</span><span class="p">&gt;</span> <span class="n">Preferences</span>
        <span class="p">=&gt;</span> <span class="nf">Optional</span><span class="p">(</span><span class="n">_preferences</span><span class="p">);</span>

    <span class="k">public</span> <span class="nf">User</span><span class="p">(</span><span class="kt">int</span> <span class="n">userId</span><span class="p">,</span> <span class="n">UserPreferences</span> <span class="n">preferences</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">UserId</span> <span class="p">=</span> <span class="n">userId</span><span class="p">;</span>
        <span class="n">_preferences</span> <span class="p">=</span> <span class="n">preferences</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">UserPreferences</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Culture</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Alternatively we may change our previous method to:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">GetUserCulture2</span><span class="p">(</span><span class="kt">int</span> <span class="n">userId</span><span class="p">)</span>
    <span class="p">=&gt;</span> <span class="n">_userRepository</span><span class="p">.</span><span class="nf">FindById</span><span class="p">(</span><span class="n">userId</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">Bind</span><span class="p">(</span><span class="n">user</span> <span class="p">=&gt;</span> <span class="n">user</span><span class="p">.</span><span class="n">Preferences</span><span class="p">)</span> <span class="c1">// FlatMap
</span>        <span class="p">.</span><span class="nf">Map</span><span class="p">(</span><span class="n">prefs</span> <span class="p">=&gt;</span> <span class="n">prefs</span><span class="p">.</span><span class="n">Culture</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">IfNone</span><span class="p">(</span><span class="s">"en-US"</span><span class="p">);</span> <span class="p">//</span> <span class="k">default</span> <span class="n">culture</span></code></pre></figure>

<p>The only difference between these two methods
is the value returned for users not present in the repository.
<code class="highlighter-rouge">GetUserCulture</code> returns for them <code class="highlighter-rouge">None()</code> but <code class="highlighter-rouge">GetUserCulture2</code>
returns a default culture (<code class="highlighter-rouge">Some("en-US")</code>).</p>

<p>Another sign of a functional design, is that monads like <code class="highlighter-rouge">Maybe&lt;T&gt;</code>
will be unpacked only on the outskirts of the application.
For example in a typical RESTful service, <code class="highlighter-rouge">Maybe&lt;T&gt;</code> value will 
be unpacked only in the controller:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// GET /user/{userId}/culture
</span><span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Get</span><span class="p">(</span><span class="kt">int</span> <span class="n">userId</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// WARNING: In real apps do not return bare strings 
</span>    <span class="c1">// from the REST api. 
</span>    <span class="c1">// Always wrap them in DTOs / ViewModels / QueryResponses.
</span>    <span class="n">Maybe</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">culture</span> <span class="p">=</span> <span class="nf">GetUserCulture</span><span class="p">();</span>
    <span class="k">return</span> <span class="nf">Maybe</span><span class="p">(</span><span class="n">culture</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Presumably in the base controller
</span><span class="k">public</span> <span class="n">IActionResult</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">Maybe</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">m</span><span class="p">)</span>
    <span class="p">=&gt;</span> <span class="n">m</span><span class="p">.</span><span class="nf">Map</span><span class="p">(</span><span class="k">value</span> <span class="p">=&gt;</span> <span class="nf">Ok</span><span class="p">(</span><span class="k">value</span><span class="p">))</span>
        <span class="p">.</span><span class="nf">IfNone</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nf">NotFound</span><span class="p">());</span></code></pre></figure>

<p>In this category of programmers there is also a small group
of zealots, that in my opinion go a little bit to far in their cult of monads. 
They propose to use LINQ query syntax to transform monads.
Let my explain this using an example:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// We want to sum three Option&lt;int&gt; values.
</span><span class="k">private</span> <span class="k">static</span> <span class="n">Option</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">GetOptionalInt</span><span class="p">()</span>
    <span class="p">=&gt;</span> <span class="m">3</span><span class="p">;</span>

<span class="c1">// Using fluent interface:
</span><span class="n">var</span> <span class="n">sum</span> <span class="p">=</span> <span class="nf">GetOptionalInt</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">SelectMany</span><span class="p">(</span><span class="n">_</span> <span class="p">=&gt;</span> <span class="nf">GetOptionalInt</span><span class="p">(),</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">+</span><span class="n">b</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">SelectMany</span><span class="p">(</span><span class="n">_</span> <span class="p">=&gt;</span> <span class="nf">GetOptionalInt</span><span class="p">(),</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">+</span><span class="n">b</span><span class="p">);</span>

<span class="c1">// Using LINQ query:
</span><span class="n">var</span> <span class="n">sum2</span> <span class="p">=</span>  <span class="n">from</span> <span class="n">n1</span> <span class="k">in</span> <span class="nf">GetOptionalInt</span><span class="p">()</span>
            <span class="n">from</span> <span class="n">n2</span> <span class="k">in</span> <span class="nf">GetOptionalInt</span><span class="p">()</span>
            <span class="n">from</span> <span class="n">n3</span> <span class="k">in</span> <span class="nf">GetOptionalInt</span><span class="p">()</span>
            <span class="n">select</span> <span class="n">n1</span><span class="p">+</span><span class="n">n2</span><span class="p">+</span><span class="n">n3</span><span class="p">;</span></code></pre></figure>

<p>I must admin that LINQ query offers some advantages like
ability to use <code class="highlighter-rouge">let</code> and <code class="highlighter-rouge">where</code> keywords. Also some transformations
may be easier to express using LINQ query syntax, for example:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">var</span> <span class="n">sum2</span> <span class="p">=</span>  
    <span class="n">from</span> <span class="n">n1</span> <span class="k">in</span> <span class="nf">GetOptionalInt</span><span class="p">()</span>
    <span class="n">from</span> <span class="n">n2</span> <span class="k">in</span> <span class="nf">GetOptionalInt</span><span class="p">()</span>
    <span class="n">from</span> <span class="n">n3</span> <span class="k">in</span> <span class="nf">GetOptionalInt</span><span class="p">()</span>
    <span class="n">let</span> <span class="n">max</span> <span class="p">=</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Max</span><span class="p">(</span><span class="n">n1</span><span class="p">,</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Max</span><span class="p">(</span><span class="n">n2</span><span class="p">,</span> <span class="n">n3</span><span class="p">))</span>
    <span class="n">let</span> <span class="n">min</span> <span class="p">=</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Min</span><span class="p">(</span><span class="n">n1</span><span class="p">,</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Min</span><span class="p">(</span><span class="n">n2</span><span class="p">,</span> <span class="n">n3</span><span class="p">))</span>
    <span class="n">where</span> <span class="n">min</span> <span class="p">!=</span> <span class="m">0</span>
    <span class="n">select</span> <span class="n">max</span> <span class="p">/</span> <span class="n">min</span><span class="p">;</span></code></pre></figure>

<p>Yet in my opinion fluent interface is in 90% of cases 
a more readable and understandable way 
to transform <code class="highlighter-rouge">Maybe&lt;T&gt;</code>s and other monads.
For example we may rewrite the last code snippet to:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">var</span> <span class="n">res</span> <span class="p">=</span> <span class="nf">Combine</span><span class="p">(</span>
        <span class="nf">GetOptionalInt</span><span class="p">(),</span>
        <span class="nf">GetOptionalInt</span><span class="p">(),</span>
        <span class="nf">GetOptionalInt</span><span class="p">()</span>
    <span class="p">)</span>
    <span class="p">.</span><span class="nf">Map</span><span class="p">(</span><span class="n">nnn</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="p">(</span><span class="n">var</span> <span class="n">n1</span><span class="p">,</span> <span class="n">var</span> <span class="n">n2</span><span class="p">,</span> <span class="n">var</span> <span class="n">n3</span><span class="p">)</span> <span class="p">=</span> <span class="n">nnn</span><span class="p">;</span>
        <span class="k">return</span> <span class="k">new</span> <span class="p">{</span> 
            <span class="n">Max</span> <span class="p">=</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Max</span><span class="p">(</span><span class="n">n1</span><span class="p">,</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Max</span><span class="p">(</span><span class="n">n2</span><span class="p">,</span> <span class="n">n3</span><span class="p">)),</span>
            <span class="n">Min</span> <span class="p">=</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Min</span><span class="p">(</span><span class="n">n1</span><span class="p">,</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Min</span><span class="p">(</span><span class="n">n2</span><span class="p">,</span> <span class="n">n3</span><span class="p">))</span>
        <span class="p">};</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nf">Filter</span><span class="p">(</span><span class="n">m</span> <span class="p">=&gt;</span> <span class="n">m</span><span class="p">.</span><span class="n">Min</span> <span class="p">!=</span> <span class="m">0</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">Map</span><span class="p">(</span><span class="n">m</span> <span class="p">=&gt;</span> <span class="n">m</span><span class="p">.</span><span class="n">Max</span> <span class="p">/</span> <span class="n">m</span><span class="p">.</span><span class="n">Min</span><span class="p">);</span>

<span class="c1">// We need a few utils
</span><span class="k">private</span> <span class="k">static</span> <span class="n">Option</span><span class="p">&lt;(</span><span class="n">T</span><span class="p">,</span><span class="n">T</span><span class="p">)&gt;</span> <span class="n">Combine</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">Option</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">a</span><span class="p">,</span> <span class="n">Option</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">b</span><span class="p">)</span>
    <span class="p">=&gt;</span> <span class="n">a</span><span class="p">.</span><span class="nf">SelectMany</span><span class="p">(</span>
            <span class="n">_</span> <span class="p">=&gt;</span> <span class="n">b</span><span class="p">,</span>
            <span class="p">(</span><span class="n">aValue</span><span class="p">,</span> <span class="n">bValue</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="n">aValue</span><span class="p">,</span> <span class="n">bValue</span><span class="p">));</span>

<span class="k">private</span> <span class="k">static</span> <span class="n">Option</span><span class="p">&lt;(</span><span class="n">T</span><span class="p">,</span><span class="n">T</span><span class="p">,</span><span class="n">T</span><span class="p">)&gt;</span> <span class="n">Combine</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">Option</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">a</span><span class="p">,</span> <span class="n">Option</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">b</span><span class="p">,</span> <span class="n">Option</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">c</span><span class="p">)</span>
    <span class="p">=&gt;</span> <span class="nf">Combine</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">SelectMany</span><span class="p">(</span>
            <span class="n">_</span> <span class="p">=&gt;</span> <span class="n">c</span><span class="p">,</span>
            <span class="p">(</span><span class="n">tt</span><span class="p">,</span> <span class="n">cValue</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="n">tt</span><span class="p">.</span><span class="n">Item1</span><span class="p">,</span> <span class="n">tt</span><span class="p">.</span><span class="n">Item2</span><span class="p">,</span> <span class="n">cValue</span><span class="p">));</span></code></pre></figure>

<p>Not as pretty as LINQ query but still readable.</p>

<p>At the end of the day consistency is what matters on real
projects. Choose one style and follow it consistently.</p>

<p>In this category we find libraries like 
<a href="https://github.com/louthy/language-ext">LanguageExt</a>.
This library has many flaws but still it is the best 
functional library on the market. 
My biggest disappointment with LanguageExt is poor documentation,
which basically consists of just a list of functions without any guidelines how
this library should be used and how it affects overall architecture.
Compare this with <a href="https://www.vavr.io/vavr-docs/">Vavr</a>
(the most popular FP library for JVM) and you can clearly
see the difference.</p>

<p>If you decided that you want to use FP in you code, you
should definitively check awesome
<a href="https://fsharpforfunandprofit.com/rop/">Railway oriented programming</a>
talk.</p>

<p><code class="highlighter-rouge">Maybe&lt;T&gt;</code> is not the only monad that is popular, other
frequently used one is <code class="highlighter-rouge">Either&lt;L,R&gt;</code>. 
<code class="highlighter-rouge">Either&lt;L,R&gt;</code> is used to represent either a result of computation or an error.
You may think of <code class="highlighter-rouge">Either&lt;L,R&gt;</code> as a functional response to exceptions.
If you want to use <code class="highlighter-rouge">Maybe&lt;T&gt;</code> efficiently, you must learn 
how it can be transformed it into other monads, in particular into <code class="highlighter-rouge">Either&lt;L,R&gt;</code>.
E.g. we may make our last example more robust if we provide
information to the user why the computation failed:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">var</span> <span class="n">result</span> <span class="p">=</span> <span class="nf">Combine</span><span class="p">(</span>
    <span class="nf">GetOptionalInt</span><span class="p">(),</span>
    <span class="nf">GetOptionalInt</span><span class="p">(),</span>
    <span class="nf">GetOptionalInt</span><span class="p">()</span>
    <span class="p">)</span>
    <span class="p">.</span><span class="nf">Map</span><span class="p">(</span><span class="n">ttt</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="p">(</span><span class="n">var</span> <span class="n">n1</span><span class="p">,</span> <span class="n">var</span> <span class="n">n2</span><span class="p">,</span> <span class="n">var</span> <span class="n">n3</span><span class="p">)</span> <span class="p">=</span> <span class="n">ttt</span><span class="p">;</span>
        <span class="k">return</span> <span class="k">new</span> <span class="p">{</span> 
            <span class="n">Max</span> <span class="p">=</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Max</span><span class="p">(</span><span class="n">n1</span><span class="p">,</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Max</span><span class="p">(</span><span class="n">n2</span><span class="p">,</span> <span class="n">n3</span><span class="p">)),</span>
            <span class="n">Min</span> <span class="p">=</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Min</span><span class="p">(</span><span class="n">n1</span><span class="p">,</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Min</span><span class="p">(</span><span class="n">n2</span><span class="p">,</span> <span class="n">n3</span><span class="p">))</span>
        <span class="p">};</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nf">ToEither</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nf">Error</span><span class="p">(</span><span class="s">"Not all values are available."</span><span class="p">))</span>
    <span class="p">.</span><span class="nf">Bind</span><span class="p">(</span><span class="n">m</span> <span class="p">=&gt;</span> <span class="nf">Divide</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">Max</span><span class="p">,</span> <span class="n">m</span><span class="p">.</span><span class="n">Min</span><span class="p">));</span> <span class="c1">// FlatMap
</span>
<span class="n">Either</span><span class="p">&lt;</span><span class="n">Error</span><span class="p">,</span> <span class="kt">int</span><span class="p">&gt;</span> <span class="nf">Divide</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">b</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span> <span class="k">return</span> <span class="nf">Left</span><span class="p">(</span><span class="nf">Error</span><span class="p">(</span><span class="s">"Cannot divide by zero"</span><span class="p">));</span>
    <span class="k">return</span> <span class="nf">Right</span><span class="p">(</span><span class="n">a</span> <span class="p">/</span> <span class="n">b</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Helper classes:
</span><span class="k">public</span> <span class="k">class</span> <span class="nc">Error</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Message</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="nf">Error</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">Message</span> <span class="p">=</span> <span class="n">message</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">override</span> <span class="kt">string</span> <span class="nf">ToString</span><span class="p">()</span>
        <span class="p">=&gt;</span> <span class="err">$</span><span class="s">"Error({Message})"</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">ErrorHelpers</span> <span class="p">{</span>
    <span class="c1">// For `using static` import...
</span>    <span class="k">public</span> <span class="k">static</span> <span class="n">Error</span> <span class="nf">Error</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">)</span>
        <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">Error</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>Since FP is on the rise, you will find a lot of books, blogs, podcasts
and MOOC’s about using FP in C#. Also .NET has amazing F# community
that is very welcoming to the beginners.
One of the best blogs about FP in C# is in my opinion
<a href="http://blog.ploeh.dk/archive/">Mark Seemann blog</a>.</p>

<h4 id="what-to-do-with-none">What to do with None?</h4>

<p>How much value you will be able to extract from <code class="highlighter-rouge">Maybe&lt;T&gt;</code> depends on
your attitude towards <code class="highlighter-rouge">None</code>s. 
Every time when you have to handle <code class="highlighter-rouge">None</code>, you must decide if it is 
the result of 
<a href="https://www.quora.com/What-are-essential-and-accidental-complexity">the accidental complexity</a>
e.g. someone passed a wrong id to the REST API) 
or if you just discovered a new edge case in your domain.</p>

<p>To better understand the problem let’s follow an imaginary example.
Joe must write a simple function that will
send an email message to all users whose subscriptions will end in the next month.
During implementation Joe notices that <code class="highlighter-rouge">EmailAddress</code> field in <code class="highlighter-rouge">User</code> entity 
is declared as <code class="highlighter-rouge">Option&lt;Email&gt;</code>:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">User</span> <span class="p">{</span>
    <span class="k">public</span> <span class="n">Option</span><span class="p">&lt;</span><span class="n">Email</span><span class="p">&gt;</span> <span class="n">EmailAddress</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="c1">// ...
</span><span class="p">}</span></code></pre></figure>

<p>Now Joe knows that for some strange reason not all users have email addresses.
Joe logs into production DB to confirm that some email addresses are missing 
and indeed they are. Looks like Joe just discovered a new edge case.
Joe goes to Mark a business analyst to describe the problem. Mark is a long
timer in the company and knows that for a short period of time users
were able to log into the platform using their phone numbers instead of emails.
A new solution is created. Users that have no email address will receive 
a text message instead of an email. Also users without email will be asked to
enter their email address next time they log into the platform. Success!</p>

<p>On the other hand consider what will happen if Joe just
dig out the email address from <code class="highlighter-rouge">Maybe&lt;T&gt;</code> by accessing <code class="highlighter-rouge">Value</code> or if he just
log a warning about missing email address 
without telling anyone from the business side?</p>

<h5 id="end-of-the-part-i">End of the part I</h5>

<p>Soon I will write a follow up to this post in which 
we will try to implement a perfect <code class="highlighter-rouge">Maybe&lt;T&gt;</code> type on our own and we will see
that it is not an easy task in C#.</p>


	  ]]></description>
	</item>

	<item>
	  <title>NSubstitute and the search for perfect error messages</title>
	  <link>//nsubstitute-and-the-search-for-perfect-error-messages</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2018-12-15T01:00:00+01:00</pubDate>
	  <guid>//nsubstitute-and-the-search-for-perfect-error-messages</guid>
	  <description><![CDATA[
	     <p>Those of us that practice TDD daily already know how important good
error messages in tests are. After all writing a failing test that
<em>clearly</em> states what functionality the program 
is missing is the first step in TDD cycle.
The rest of us that either can’t or simply don’t want to practice TDD
must put extra effort to ensure that tests always fail
with meaningful error messages.
Unfortunately, according to what I have learned from my personal experience, 
the most devs either don’t have
enough time or simply don’t bother to check if their tests fail with
something meaningful. For average Joe developer writing tests and
making them green is already a lot of work. 
Things like good test names and proper error messages are often forgotten.</p>

<p>But the developers are not the only one here to blame. 
Too often tools and libraries that supposedly should make unit testing
simpler and easier, generate horrible and often cryptic error messages.</p>

<p>In this post we will take a close look at 
<a href="http://nsubstitute.github.io/">NSubstitute</a>,
a modern and popular mocking libary for .NET and see 
how we can improve messages generated by its argument matchers.</p>

<p>Let’s start by looking at a simple test. 
It demonstrates how NSubstitute is often used to assert that 
a method was called with an argument in a certain state:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">PlainArgument</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">FirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">LastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">EmailAddress</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="nf">PlainArgument</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">firstName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">lastName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">emailAddress</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">Id</span> <span class="p">=</span> <span class="n">id</span><span class="p">;</span>
        <span class="n">FirstName</span> <span class="p">=</span> <span class="n">firstName</span><span class="p">;</span>
        <span class="n">LastName</span> <span class="p">=</span> <span class="n">lastName</span><span class="p">;</span>
        <span class="n">EmailAddress</span> <span class="p">=</span> <span class="n">emailAddress</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">interface</span> <span class="n">IFooService</span> <span class="p">{</span>
    <span class="k">void</span> <span class="nf">DoStuff</span><span class="p">(</span><span class="kt">object</span> <span class="n">argument</span><span class="p">);</span>
<span class="p">}</span>

<span class="na">[Fact]</span>
<span class="k">public</span> <span class="k">void</span> <span class="nf">Checking_argument_using_Arg_Is</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Act
</span>    <span class="n">_component</span><span class="p">.</span><span class="nf">DoStuff</span><span class="p">();</span>

    <span class="c1">// Assert
</span>    <span class="n">_fooService</span><span class="p">.</span><span class="nf">Received</span><span class="p">()</span>
        <span class="p">.</span><span class="nf">DoStuff</span><span class="p">(</span><span class="n">Arg</span><span class="p">.</span><span class="n">Is</span><span class="p">&lt;</span><span class="n">PlainArgument</span><span class="p">&gt;(</span>
            <span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="m">9</span> <span class="p">&amp;&amp;</span>
                 <span class="n">e</span><span class="p">.</span><span class="n">FirstName</span> <span class="p">==</span> <span class="s">"jan"</span> <span class="p">&amp;&amp;</span>
                 <span class="n">e</span><span class="p">.</span><span class="n">LastName</span> <span class="p">==</span> <span class="s">"kowalski"</span> <span class="p">&amp;&amp;</span>
                 <span class="n">e</span><span class="p">.</span><span class="n">EmailAddress</span> <span class="p">==</span> <span class="s">"jan.kowalski@gmail.com"</span>
                 <span class="p">));</span>
<span class="p">}</span></code></pre></figure>

<p>When the argument passed to the checked method
was in an unexpected state (e.g. first name was not “jan” but “john”),
we get an error message similar to (formatting added):</p>

<figure class="highlight"><pre><code class="language-nohighlight" data-lang="nohighlight">Expected to receive a call matching:
    DoStuff(e =&gt; ((((e.Id == 9) AndAlso 
        (e.FirstName == "jan")) AndAlso 
        (e.LastName == "kowalski")) AndAlso 
        (e.EmailAddress == "jan.kowalski@gmail.com")))
Actually received no matching calls.
Received 1 non-matching call (non-matching arguments indicated 
with '*' characters):
    DoStuff(*PlainArgument*)</code></pre></figure>

<p>This error message is terrible.
It contains a lot of informations that are easily obtainable by looking at the
test method’s source code. Yet it does not contain
the most important piece of information that we need: which properties 
have unexpected values and what these values are.</p>

<p>We can slightly improve this error message by overloading <code class="highlighter-rouge">ToString</code> method
on <code class="highlighter-rouge">PlainArgument</code> class. 
Let’s call this new class <code class="highlighter-rouge">StringableArgument</code>:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">StringableArgument</span> <span class="p">{</span>
    <span class="c1">// the same code as in PlainArgument
</span>    <span class="k">public</span> <span class="k">override</span> <span class="kt">string</span> <span class="nf">ToString</span><span class="p">()</span>
        <span class="p">=&gt;</span> <span class="err">$</span><span class="s">"{nameof(StringableArgument)}(id: {Id}, firstName: \"{FirstName}\", "</span> <span class="p">+</span>
            <span class="err">$</span><span class="s">"lastName: \"{LastName}\", emailAddres: \"{EmailAddress}\")"</span><span class="p">;</span>
<span class="p">}</span>

<span class="c1">// in a test method:
</span><span class="n">_fooService</span><span class="p">.</span><span class="nf">Received</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">DoStuff</span><span class="p">(</span><span class="n">Arg</span><span class="p">.</span><span class="n">Is</span><span class="p">&lt;</span><span class="n">StringableArgument</span><span class="p">&gt;(</span>
        <span class="n">e</span> <span class="p">=&gt;</span> <span class="n">e</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="m">9</span> <span class="p">&amp;&amp;</span>
             <span class="n">e</span><span class="p">.</span><span class="n">FirstName</span> <span class="p">==</span> <span class="s">"jan"</span> <span class="p">&amp;&amp;</span>
             <span class="n">e</span><span class="p">.</span><span class="n">LastName</span> <span class="p">==</span> <span class="s">"kowalski"</span> <span class="p">&amp;&amp;</span>
             <span class="n">e</span><span class="p">.</span><span class="n">EmailAddress</span> <span class="p">==</span> <span class="s">"jan.kowalski@gmail.com"</span>
             <span class="p">));</span></code></pre></figure>

<p>Now the error message looks similar to (formatting added):</p>

<figure class="highlight"><pre><code class="language-nohighlight" data-lang="nohighlight">Expected to receive a call matching:
    DoStuff(e =&gt; ((((e.Id == 9) AndAlso 
        (e.FirstName == "jan")) AndAlso 
        (e.LastName == "kowalski")) AndAlso 
        (e.EmailAddress == "jan.kowalski@gmail.com")))
Actually received no matching calls.
Received 1 non-matching call (non-matching arguments indicated 
with '*' characters):
    DoStuff(*StringableArgument(
        id: 7, firstName: "john", 
        lastName: "doe", 
        emailAddres: "john.doe@gmail.com")*)</code></pre></figure>

<p>This is better than before. 
Now we can see both expected and actual values of the 
matched argument’s properties.</p>

<p>One drawback of this approach is that 
the quality of the error message depends on the quality of
<code class="highlighter-rouge">ToString</code> implementation. 
If we are using AOP solution like
<a href="https://github.com/Fody/Fody">Fody</a> to generate <code class="highlighter-rouge">ToString</code> implementations
for most of our classes, then this solution may be good enough. 
On the other hand if we are generating and updating our <code class="highlighter-rouge">ToString</code> methods
manually (even if this means pressing a shortcut in our IDE)
then I would prefer to look for a better solution that is totally automatic.</p>

<p>There is also another problem that we were ignoring so far.
Consider what will happen if we add a new field to our <code class="highlighter-rouge">StringableArgument</code>
class. 
Because we are using property access syntax inside of a lambda expression,
our existing matchers will not only compile without any problems when
we add a new field, they will also pass!
In order to ensure that our matchers and tests remain valid,
we must go through all argument matchers 
for <code class="highlighter-rouge">StringableArgument</code> class and make sure that they use 
the newly added field.</p>

<p>The above problem may be solved by moving equality checking
to the <code class="highlighter-rouge">StringableArgument</code> class itself. 
Let’s call this new class <code class="highlighter-rouge">EquotableArgument</code>:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">EquotableArgument</span> <span class="p">:</span> <span class="n">IEquatable</span><span class="p">&lt;</span><span class="n">EquotableArgument</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">FirstName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">LastName</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">EmailAddress</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="nf">EquotableArgument</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">,</span> <span class="kt">string</span> <span class="n">firstName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">lastName</span><span class="p">,</span> <span class="kt">string</span> <span class="n">emailAddress</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">Id</span> <span class="p">=</span> <span class="n">id</span><span class="p">;</span>
        <span class="n">FirstName</span> <span class="p">=</span> <span class="n">firstName</span><span class="p">;</span>
        <span class="n">LastName</span> <span class="p">=</span> <span class="n">lastName</span><span class="p">;</span>
        <span class="n">EmailAddress</span> <span class="p">=</span> <span class="n">emailAddress</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">override</span> <span class="kt">string</span> <span class="nf">ToString</span><span class="p">()</span>
        <span class="p">=&gt;</span> <span class="err">$</span><span class="s">"{nameof(StringableArgument)}(id: {Id}, firstName: \"{FirstName}\", "</span> <span class="p">+</span>
            <span class="err">$</span><span class="s">"lastName: \"{LastName}\", emailAddres: \"{EmailAddress}\")"</span><span class="p">;</span>

    <span class="k">public</span> <span class="kt">bool</span> <span class="nf">Equals</span><span class="p">(</span><span class="n">EquotableArgument</span> <span class="n">other</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">other</span> <span class="k">is</span> <span class="k">null</span><span class="p">)</span> <span class="k">return</span> <span class="k">false</span><span class="p">;</span>

        <span class="k">return</span> <span class="nf">ToTuple</span><span class="p">(</span><span class="k">this</span><span class="p">)</span> <span class="p">==</span> <span class="nf">ToTuple</span><span class="p">(</span><span class="n">other</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">Equals</span><span class="p">(</span><span class="kt">object</span> <span class="n">obj</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">obj</span> <span class="k">is</span> <span class="n">EquotableArgument</span> <span class="n">other</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nf">Equals</span><span class="p">(</span><span class="n">other</span><span class="p">);</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="k">false</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">override</span> <span class="kt">int</span> <span class="nf">GetHashCode</span><span class="p">()</span>
        <span class="p">=&gt;</span> <span class="nf">ToTuple</span><span class="p">(</span><span class="k">this</span><span class="p">).</span><span class="nf">GetHashCode</span><span class="p">();</span>

    <span class="k">private</span> <span class="k">static</span> <span class="p">(</span><span class="kt">int</span><span class="p">,</span> <span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">,</span> <span class="kt">string</span><span class="p">)</span> <span class="nf">ToTuple</span><span class="p">(</span><span class="n">EquotableArgument</span> <span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="p">(</span><span class="n">arg</span><span class="p">.</span><span class="n">Id</span><span class="p">,</span> <span class="n">arg</span><span class="p">.</span><span class="n">FirstName</span><span class="p">,</span> <span class="n">arg</span><span class="p">.</span><span class="n">LastName</span><span class="p">,</span> <span class="n">arg</span><span class="p">.</span><span class="n">EmailAddress</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// in a test method:
</span><span class="n">_fooService</span><span class="p">.</span><span class="nf">Received</span><span class="p">()</span>
    <span class="c1">// NOTICE: We no longer use a lambda expression.
</span>    <span class="p">.</span><span class="nf">DoStuff</span><span class="p">(</span><span class="n">Arg</span><span class="p">.</span><span class="nf">Is</span><span class="p">(</span><span class="k">new</span> <span class="nf">EquotableArgument</span><span class="p">(</span>
        <span class="n">id</span><span class="p">:</span> <span class="m">9</span><span class="p">,</span> 
        <span class="n">firstName</span><span class="p">:</span> <span class="s">"jan"</span><span class="p">,</span> 
        <span class="n">lastName</span><span class="p">:</span> <span class="s">"kowalski"</span><span class="p">,</span>
        <span class="n">emailAddress</span><span class="p">:</span> <span class="s">"jan.kowalski@gmail.com"</span><span class="p">)));</span></code></pre></figure>

<p>With this solution it is impossible to forget to update our matchers
when we add a new field.
We also get a slightly better error message (formatting added):</p>

<figure class="highlight"><pre><code class="language-nohighlight" data-lang="nohighlight">Expected to receive a call matching:
    DoStuff(StringableArgument(
        id: 9, firstName: "jan", 
        lastName: "kowalski", 
        emailAddres: "jan.kowalski@gmail.com"))
Actually received no matching calls.
Received 1 non-matching call (non-matching arguments 
indicated with '*' characters):
    DoStuff(*StringableArgument(
        id: 7, firstName: "john", 
        lastName: "doe", 
        emailAddres: "john.doe@gmail.com")*)</code></pre></figure>

<p>So far so good. But what if our argument has ten or more properties.
With complex arguments looking for a one property with
unexpected value may quickly change into “Where’s Wally?” game.
The only way to further improve error messages is to stop relaying on
NSubstitute/hand-carfted <code class="highlighter-rouge">Equals</code> implementation 
and instead to use specialized assertion library like
<a href="https://fluentassertions.com/">FluentAssertions</a> or
<a href="http://www.n-fluent.net/">NFluent</a>.</p>

<p>Here is how our test would look like if we decide to use FluentAssertions:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="na">[Fact]</span>
<span class="k">public</span> <span class="k">void</span> <span class="nf">Catching_argument_and_checking_manually_with_fluent_assertions</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Arrange
</span>    <span class="n">PlainArgument</span> <span class="n">arg</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>

    <span class="n">_fooService</span>
        <span class="p">.</span><span class="nf">DoStuff</span><span class="p">(</span><span class="n">Arg</span><span class="p">.</span><span class="n">Do</span><span class="p">&lt;</span><span class="n">PlainArgument</span><span class="p">&gt;(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">arg</span> <span class="p">=</span> <span class="n">x</span><span class="p">));</span>

    <span class="c1">// Act
</span>    <span class="n">_component</span><span class="p">.</span><span class="nf">DoStuff</span><span class="p">();</span>

    <span class="c1">// Assert
</span>    <span class="n">_fooService</span><span class="p">.</span><span class="nf">Received</span><span class="p">()</span>
        <span class="p">.</span><span class="nf">DoStuff</span><span class="p">(</span><span class="n">Arg</span><span class="p">.</span><span class="n">Any</span><span class="p">&lt;</span><span class="n">PlainArgument</span><span class="p">&gt;());</span>

    <span class="n">arg</span><span class="p">.</span><span class="nf">Should</span><span class="p">()</span>
        <span class="p">.</span><span class="nf">BeEquivalentTo</span><span class="p">(</span><span class="k">new</span> <span class="nf">PlainArgument</span><span class="p">(</span>
            <span class="n">id</span><span class="p">:</span> <span class="m">11</span><span class="p">,</span> 
            <span class="n">firstName</span><span class="p">:</span> <span class="s">"jan"</span><span class="p">,</span> 
            <span class="n">lastName</span><span class="p">:</span> <span class="s">"kowlaski"</span><span class="p">,</span> 
            <span class="n">emailAddress</span><span class="p">:</span> <span class="s">"jan.kowalski@gmail.com"</span><span class="p">));</span>        
<span class="p">}</span></code></pre></figure>

<p>The error message is:</p>

<figure class="highlight"><pre><code class="language-nohighlight" data-lang="nohighlight">Expected member Id to be 11, but found 7.
Expected member FirstName to be "jan" with a length of 3, but "john" has a length of 4, differs near "ohn" (index 1).
Expected member LastName to be "kowlaski" with a length of 8, but "doe" has a length of 3, differs near "doe" (index 0).
Expected member EmailAddress to be 
"jan.kowalski@gmail.com" with a length of 22, but 
"john.doe@gmail.com" has a length of 18, differs near "ohn" (index 1).

With configuration:
// (skipped)
// Here FluentAssertions describes configuration
// that it used to compare the two objects.</code></pre></figure>

<p>Not bad, I must say. We get a list of only these properties that have
unexpected values. Certain messages seem a little bit too verbose for me
e.g. <code class="highlighter-rouge">Expected member FirstName to be "jan" with a length of 3</code>,
 <code class="highlighter-rouge">but "john" has a length of 4, differs near "ohn" (index 1).</code>
Maybe <code class="highlighter-rouge">Expected FirstName to be "jan" but was "john".</code> would be
just enough?
Still it is the best solution that we have so far.</p>

<p>The only downside that I see 
is that the test code is now a little more verbose and less readable.
Mainly because 
we are now responsible for manually capturing argument’s value:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">PlainArgument</span> <span class="n">arg</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
<span class="n">_fooService</span>
    <span class="p">.</span><span class="nf">DoStuff</span><span class="p">(</span><span class="n">Arg</span><span class="p">.</span><span class="n">Do</span><span class="p">&lt;</span><span class="n">PlainArgument</span><span class="p">&gt;(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">arg</span> <span class="p">=</span> <span class="n">x</span><span class="p">));</span></code></pre></figure>

<p>With a bit of C# magic we may make argument capturing less painful:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">_fooService</span>
    <span class="p">.</span><span class="nf">DoStuff</span><span class="p">(</span><span class="nf">Capture</span><span class="p">(</span><span class="k">out</span> <span class="n">Arg</span><span class="p">&lt;</span><span class="n">PlainArgument</span><span class="p">&gt;</span> <span class="n">arg</span><span class="p">));</span>

<span class="c1">// Act
</span><span class="n">_component</span><span class="p">.</span><span class="nf">DoStuff</span><span class="p">();</span>

<span class="c1">// Assert
</span><span class="n">_fooService</span><span class="p">.</span><span class="nf">Received</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">DoStuff</span><span class="p">(</span><span class="n">Arg</span><span class="p">.</span><span class="n">Any</span><span class="p">&lt;</span><span class="n">PlainArgument</span><span class="p">&gt;());</span>

<span class="c1">// This time we use NFluent
</span><span class="n">Check</span><span class="p">.</span><span class="nf">That</span><span class="p">(</span><span class="n">arg</span><span class="p">.</span><span class="n">Value</span><span class="p">).</span><span class="nf">HasFieldsWithSameValues</span><span class="p">(</span>
    <span class="k">new</span> <span class="nf">PlainArgument</span><span class="p">(</span>
        <span class="n">id</span><span class="p">:</span> <span class="m">7</span><span class="p">,</span> 
        <span class="n">firstName</span><span class="p">:</span> <span class="s">"john"</span><span class="p">,</span> 
        <span class="n">lastName</span><span class="p">:</span> <span class="s">"doe"</span><span class="p">,</span> 
        <span class="n">emailAddress</span><span class="p">:</span> <span class="s">"john.doe@gmail.com"</span><span class="p">));</span> </code></pre></figure>

<p>To see how it works please check <a href="https://github.com/marcin-chwedczuk/blog-nsubstitute-error-messages/blob/master/Library.Test/ArgCapture.cs">ArgCapture.cs</a> file.</p>

<p>Catching argument’s value manually is cumbersome and 
makes tests less readable. On the other hand using some “magical”
syntactic sugar also does not looks like a good idea. 
After all our code should be simple. If we can avoid using “magic”
we should do it!</p>

<p>Our final solution is to create a custom NSubstitute argument matcher.
The matcher uses undercover FluentAssertions library to perform the check.
Here is how the test code looks like with this approach:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="na">[Fact]</span>
<span class="k">public</span> <span class="k">void</span> <span class="nf">Checking_argument_using_custom_NSubstitute_matcher</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Arrange
</span>
    <span class="c1">// Act
</span>    <span class="n">_component</span><span class="p">.</span><span class="nf">DoStuff</span><span class="p">();</span>

    <span class="c1">// Assert
</span>    <span class="n">var</span> <span class="n">expected</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">PlainArgument</span><span class="p">(</span>
        <span class="n">id</span><span class="p">:</span> <span class="m">11</span><span class="p">,</span> 
        <span class="n">firstName</span><span class="p">:</span> <span class="s">"jan"</span><span class="p">,</span> 
        <span class="n">lastName</span><span class="p">:</span> <span class="s">"kowlaski"</span><span class="p">,</span> 
        <span class="n">emailAddress</span><span class="p">:</span> <span class="s">"jan.kowalski@gmail.com"</span><span class="p">);</span>

    <span class="n">_fooService</span><span class="p">.</span><span class="nf">Received</span><span class="p">()</span>
        <span class="p">.</span><span class="nf">DoStuff</span><span class="p">(</span><span class="n">WithArg</span><span class="p">.</span><span class="nf">EquivalentTo</span><span class="p">(</span><span class="n">expected</span><span class="p">));</span>
<span class="p">}</span></code></pre></figure>

<p>The error message generated for an argument that does
not overload <code class="highlighter-rouge">ToString</code> looks like this (formatting added):</p>

<figure class="highlight"><pre><code class="language-nohighlight" data-lang="nohighlight">Expected to receive a call matching:
    DoStuff(PlainArgument)
Actually received no matching calls.
Received 1 non-matching call (non-matching arguments indicated 
with '*' characters):
    DoStuff(*PlainArgument*)
        arg[0]: Expected member Id to be 11, but found 7.
                Expected member FirstName to be "jan" with a length of 3, 
                but "john" has a length of 4, differs near "ohn" (index 1).
                Expected member LastName to be "kowlaski" with a length of 8, 
                but "doe" has a length of 3, differs near "doe" (index 0).
                Expected member EmailAddress to be 
                "jan.kowalski@gmail.com" with a length of 22, but 
                "john.doe@gmail.com" has a length of 18, differs near "ohn" 
                (index 1).</code></pre></figure>

<p>It is clear that the problem occurred at the first argument (<code class="highlighter-rouge">arg[0]</code>). 
Also we can see the actual and expected values of the argument’s 
fields and properties.
And the test code is simple and clean.
If you are interested how it is implemented please see
<a href="https://github.com/marcin-chwedczuk/blog-nsubstitute-error-messages/blob/master/Library.Test/CustomMatcher.cs">CustomMatcher.cs</a>
file.</p>

<p>As we can see there exists no perfect solution. Still with a little effort
we can make our error messages much more readable and pleasurable to work with.
I personally suggest to use either the last solution or 
the solution presented in <code class="highlighter-rouge">Catching_argument_and_checking_manually_with_fluent_assertions</code> test.</p>

<p>Source code and examples: <a href="https://github.com/marcin-chwedczuk/blog-nsubstitute-error-messages">GitHub</a></p>


	  ]]></description>
	</item>

	<item>
	  <title>Inheritance? Just say no!</title>
	  <link>//inheritance-just-say-no</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2018-12-12T01:00:00+01:00</pubDate>
	  <guid>//inheritance-just-say-no</guid>
	  <description><![CDATA[
	     <p>Recently during a code review I have found the following piece
of code:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">TemplateCache</span> 
    <span class="p">:</span> <span class="n">ConcurrentDictionary</span><span class="p">&lt;</span><span class="n">TemplateName</span><span class="p">,</span> <span class="n">Template</span><span class="p">&gt;</span> <span class="p">{</span> <span class="p">}</span></code></pre></figure>

<p>Here the programmer broke one of the most fundamental principles
of modern object oriented programming:</p>

<blockquote>
  <p>Prefer composition over inheritance</p>
</blockquote>

<p>Why inheritance is bad in most of the cases? Here are the reasons:</p>

<h6 id="watered-down-component-api">Watered down component API</h6>

<p>What methods would you expect on a cache? Something that gets
values from the cache if they are already there. Let us call 
this operation <code class="highlighter-rouge">TryGetValue(cacheKey, out value)</code>. 
And of course a method to
add a new or overwrite an existing cache entry, let’s call it
<code class="highlighter-rouge">SetValue(cacheKey, value)</code>. Do we need more methods on a cache
from the client point of view? Maybe in the future we will want to
extend <code class="highlighter-rouge">SetValue</code> operation to allow client to specify for how
long items added to the cache should be stored? Who knows. 
But still we would end up with only two operations.</p>

<blockquote>
  <p>NOTE A truly generic and reusable cache 
is usually slightly more complicated - instead of two
we have three methods! For example please see
<a href="https://github.com/aspnet/Caching/blob/master/src/Microsoft.Extensions.Caching.Abstractions/IMemoryCache.cs">IMemoryCache</a> interface.</p>
</blockquote>

<p>On the other hand if we use inheritance we end up with something 
like this:
<img src="assets/images/2018-12-12/cache_api.png" alt="Cache API when we use inheritance" />
This is much more than we asked for. We actually get operations
that make no sense for a cache like <code class="highlighter-rouge">IsEmpty</code>. I mean either an item
that we are looking for is in the cache or it is not - who cares
if the cache is empty itself?</p>

<p>I hope that I managed to persuade you that a good component
API should be small, focused and easy to use. We get none of these 
if we use inheritance.</p>

<h6 id="broken-encapsulation">Broken encapsulation</h6>

<p>By using inheritance we are making it clear to the clients of
our component that it is implemented using <code class="highlighter-rouge">ConcurrentDictionary</code> class.
If we wait long enough we will notice that some of them 
will start relaying on that knowledge in their code. 
For example they may use <code class="highlighter-rouge">ContainsKey</code> method for checking if
the cache contains a given entry. 
What will happen later, when we decide that we want to change 
the cache implementation and use for example 
<a href="https://dotnetcoretutorials.com/2017/03/05/using-inmemory-cache-net-core/">IMemoryCache</a> instead?
Clients of our component will get angry, because
our new version of the cache<br />
introduced a breaking change into their code.</p>

<p>Just to sum up: Inheritance both exposes implementation
details of components and makes evolution of their APIs more difficult.</p>

<h6 id="liskov-substitution-principle-is-violated">Liskov substitution principle is violated</h6>

<p>In short some operations that make sense for a dictionary
may not make sense for a cache. For example it makes no
sense to cache a template that does not exists, yet with
inheritance we may write:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">var</span> <span class="n">foo</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">TemplateName</span><span class="p">(</span><span class="s">"foo"</span><span class="p">);</span>

<span class="n">ConcurrentDictionary</span><span class="p">&lt;</span><span class="n">TemplateName</span><span class="p">,</span> <span class="n">Template</span><span class="p">&gt;</span> <span class="n">dict</span> 
   <span class="p">=</span> <span class="k">new</span> <span class="nf">TemplateCache</span><span class="p">();</span>

<span class="n">dict</span><span class="p">.</span><span class="nf">GetOrAdd</span><span class="p">(</span><span class="n">foo</span><span class="p">,</span> <span class="p">(</span><span class="n">Template</span><span class="p">)</span><span class="k">null</span><span class="p">);</span>

<span class="c1">// Ops we have a null template here...
</span><span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"value is: "</span> <span class="p">+</span> 
   <span class="n">dict</span><span class="p">.</span><span class="nf">GetOrAdd</span><span class="p">(</span><span class="n">foo</span><span class="p">,</span> <span class="p">(</span><span class="n">Template</span><span class="p">)</span><span class="k">null</span><span class="p">));</span></code></pre></figure>

<p>When we use inheritance we are telling the type system that
<code class="highlighter-rouge">TemplateCache</code> <em>is a</em> <code class="highlighter-rouge">ConcurrentDictionary</code>. 
From logical point of view this makes no sense. They are two
different components that have two different purposes and also
different usage patterns. 
They should have nothing in common.</p>

<blockquote>
  <p>BTW You should avoid putting <code class="highlighter-rouge">null</code>s into collection classes of any sort.</p>
</blockquote>

<p>Let’s finish this post by seeing how composition can be used
to improve our <code class="highlighter-rouge">TemplateCache</code> component:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">TemplateCache</span> <span class="p">{</span>
  <span class="k">private</span> <span class="k">readonly</span> <span class="n">ConcurrentDictionary</span><span class="p">&lt;</span><span class="n">TemplateName</span><span class="p">,</span> <span class="n">Template</span><span class="p">&gt;</span> <span class="n">_cache</span> 
      <span class="p">=</span> <span class="k">new</span> <span class="n">ConcurrentDictionary</span><span class="p">&lt;</span><span class="n">TemplateName</span><span class="p">,</span> <span class="n">Template</span><span class="p">&gt;();</span>

  <span class="k">public</span> <span class="kt">bool</span> <span class="nf">TryGetTemplate</span><span class="p">(</span><span class="n">TemplateName</span> <span class="n">name</span><span class="p">,</span> <span class="k">out</span> <span class="n">Template</span> <span class="n">template</span><span class="p">)</span>
      <span class="p">=&gt;</span> <span class="n">_cache</span><span class="p">.</span><span class="nf">TryGetValue</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="k">out</span> <span class="n">template</span><span class="p">);</span>

  <span class="k">public</span> <span class="k">void</span> <span class="nf">AddTemplate</span><span class="p">(</span><span class="n">Template</span> <span class="n">template</span><span class="p">)</span>
      <span class="p">=&gt;</span> <span class="n">_cache</span><span class="p">.</span><span class="nf">AddOrUpdate</span><span class="p">(</span>
          <span class="n">template</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">template</span><span class="p">,</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">existing</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">template</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>Yep, simple, clean and easy to use!</p>


	  ]]></description>
	</item>

	<item>
	  <title>Abusing local functions to hide design problems</title>
	  <link>//abusing-local-functions-to-hide-design-problems</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2018-10-08T02:00:00+02:00</pubDate>
	  <guid>//abusing-local-functions-to-hide-design-problems</guid>
	  <description><![CDATA[
	     <p>Recently I was browsing through a certain code base
and I saw a code similar to this:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">EnterpriseNotificationSender</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IUserManagementService</span> <span class="n">_userManagementService</span><span class="p">;</span>
    <span class="c1">// ctor and stuff...
</span>  
    <span class="k">public</span> <span class="k">void</span> <span class="nf">SendNotificationsToUsers</span><span class="p">(</span><span class="kt">string</span> <span class="n">companyId</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">var</span> <span class="n">addresses</span> <span class="p">=</span> <span class="nf">GetRecipientsAddresses</span><span class="p">(</span><span class="n">companyId</span><span class="p">);</span>
        <span class="k">foreach</span><span class="p">(</span><span class="n">var</span> <span class="n">address</span> <span class="k">in</span> <span class="n">addresses</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">SendNotification</span><span class="p">(</span><span class="n">address</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
  
    <span class="k">private</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">EmailAddress</span><span class="p">&gt;</span> 
                     <span class="nf">GetRecipientsAddresses</span><span class="p">(</span><span class="kt">string</span> <span class="n">companyId</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">_userManagementService</span>
             <span class="p">.</span><span class="nf">FindUsersBelongingToCompany</span><span class="p">(</span><span class="n">companyId</span><span class="p">)</span>
             <span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="n">UserShouldReciveNotification</span><span class="p">)</span>
             <span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">user</span> <span class="p">=&gt;</span> <span class="n">user</span><span class="p">.</span><span class="n">EmailAddress</span><span class="p">)</span>
             <span class="p">.</span><span class="nf">ToList</span><span class="p">();</span>
  
        <span class="kt">bool</span> <span class="nf">UserShouldReciveNotification</span><span class="p">(</span><span class="n">User</span> <span class="n">user</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">user</span><span class="p">.</span><span class="n">EmailAddress</span> <span class="p">!=</span> <span class="k">null</span>
                <span class="p">&amp;&amp;</span> <span class="n">user</span><span class="p">.</span><span class="n">IsRegistered</span>
                <span class="p">&amp;&amp;</span> <span class="p">!</span><span class="n">user</span><span class="p">.</span><span class="n">IsDisabled</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
  
    <span class="k">private</span> <span class="k">void</span> <span class="nf">SendNotification</span><span class="p">(</span><span class="n">EmailAddress</span> <span class="n">address</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// do stuff...
</span>    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Especially <code class="highlighter-rouge">GetRecipientsAddresses</code> method draw my attention.
Someone extracted quite complicated lambda expression
to a local function.
At first I thought that this is indeed a very nice usage for local
functions.
LINQ query is much more readable
with expressions like <code class="highlighter-rouge">Where(UserShouldReciveNotification)</code>
instead of long lambdas.</p>

<p>It took me a while to realize that the local function
in the code above, was used to hide design problems.
Let’s take a closer look at the condition encapsulated by
<code class="highlighter-rouge">UserShouldReciveNotification</code> function:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">return</span> <span class="n">user</span><span class="p">.</span><span class="n">EmailAddress</span> <span class="p">!=</span> <span class="k">null</span>
    <span class="p">&amp;&amp;</span> <span class="n">user</span><span class="p">.</span><span class="n">IsRegistered</span>
    <span class="p">&amp;&amp;</span> <span class="p">!</span><span class="n">user</span><span class="p">.</span><span class="n">IsDisabled</span><span class="p">;</span></code></pre></figure>

<p>We should deal with the simplest to fix problems first:</p>

<p><strong>Bad naming:</strong> We should always format predicates in “a positive way”.
For examples we should prefer <code class="highlighter-rouge">IsOpen</code> and <code class="highlighter-rouge">IsAvailable</code> to <code class="highlighter-rouge">IsClose</code>
and <code class="highlighter-rouge">IsUnavailable</code>. Here <code class="highlighter-rouge">IsDisabled</code> should be named <code class="highlighter-rouge">IsEnabled</code>.
As a first step in refactoring we may add <code class="highlighter-rouge">IsEnabled</code> property
to the <code class="highlighter-rouge">User</code> class:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="kt">bool</span> <span class="n">IsEnabled</span> <span class="p">=&gt;</span> <span class="p">!</span><span class="n">IsDisabled</span><span class="p">;</span></code></pre></figure>

<p><strong>Unreadable condition:</strong> If a user has optional email then we may expect
that our codebase is littered with little <code class="highlighter-rouge">user.EmailAddres != null</code> checks.
To increase readability we should encapsulate this check into a separate property:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="kt">bool</span> <span class="n">HasEmailAddress</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="n">EmailAddress</span> <span class="p">!=</span> <span class="k">null</span><span class="p">);</span></code></pre></figure>

<p><strong>Missing entity attributes:</strong> When I looked closely at the condition
<code class="highlighter-rouge">user.IsRegistered &amp;&amp; !user.IsDisabled</code> I found out that it occurs
in many places in that codebase. For some reason the system was creating
users before they actually registered. A user that not registered yet was basically
a stub not a real user. Users could also be disabled by admins (registered or not),
this is what the second part of the condition was responsible for.
Clearly <code class="highlighter-rouge">User</code> entity is missing an attribute that could tell us whatever
a user is active, so let’s add one:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="kt">bool</span> <span class="n">IsActive</span>
    <span class="p">=&gt;</span> <span class="n">IsRegistered</span> <span class="p">&amp;&amp;</span> <span class="n">IsEnabled</span><span class="p">;</span></code></pre></figure>

<p>After all these refactorings we may finally rewrite our LINQ query:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">return</span> <span class="n">_userManagementService</span>
    <span class="p">.</span><span class="nf">FindUsersBelongingToCompany</span><span class="p">(</span><span class="n">companyId</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="n">user</span> <span class="p">=&gt;</span> <span class="n">user</span><span class="p">.</span><span class="n">IsActive</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="n">user</span> <span class="p">=&gt;</span> <span class="n">user</span><span class="p">.</span><span class="n">HasEmailAddress</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">user</span> <span class="p">=&gt;</span> <span class="n">user</span><span class="p">.</span><span class="n">EmailAddress</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">ToList</span><span class="p">();</span></code></pre></figure>

<p>This version is as readable as version with the local function,
but does not attempt to hide code smells.</p>

<p>Conclusion: Every time when you have a too long or too complicated
lambda expression, that you what to extract to a local function,
think if you can simplify that lambda by extracting conditions and checks
into new methods and properties on processed objects.</p>


	  ]]></description>
	</item>

	<item>
	  <title>Automatically generate new OAuth 2.0 access tokens when using Postman</title>
	  <link>//automatically-generate-new-oauth2-tokens-when-using-postman</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2018-09-29T02:00:00+02:00</pubDate>
	  <guid>//automatically-generate-new-oauth2-tokens-when-using-postman</guid>
	  <description><![CDATA[
	     <p>Did you ever try to use <a href="https://www.getpostman.com/">Postman</a>
with OAuth 2.0 protected API? 
It is pretty annoying. 
First you must select the correct authorization type, 
then you must open a popup to request a new access token,
and only then you can send your HTTP request.
And of course when the token expires or when for some reason you need a
new one (e.g. because you want to switching from development to staging environment),
you need to go through the process again.
Fortunately for us this can be automated using Postman pre-request scripts.</p>

<p>To test that my pre-request script works I used publicly available 
<a href="http://identityserver.io/">IdentityServer</a>
<a href="https://demo.identityserver.io/">demo instance</a>.
We may use it to manually generate a new access token and
to preform a test API call:
<img src="assets/images/2018-09-29/Postman_1.png" alt="Manually generating token 1" />
<img src="assets/images/2018-09-29/Postman_2.png" alt="Manually generating token 2" />
<img src="assets/images/2018-09-29/Postman_3.png" alt="Performing test API call" /></p>

<p>OK, so how will we automate this stuff? Let’s start by creating a new
collection that will contain all requests for which we want to automatically
generate OAuth access tokens:
<img src="assets/images/2018-09-29/Postman_4.png" alt="Create a new collection" />
On Authorization tab use {{accessToken}}
 as a value of the Access Token
field, this way Postman will try to load the token value from a variable:
<img src="assets/images/2018-09-29/Postman_6.png" alt="Set Access Token field" />
We will populate this variable using the following pre-request script:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// Adapted from: https://gist.github.com/harryi3t/dd5c61451206047db70710ff6174c3c1</span>

<span class="kd">let</span> <span class="nx">tokenUrl</span> <span class="o">=</span> <span class="s1">'https://demo.identityserver.io/connect/token'</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">clientId</span> <span class="o">=</span> <span class="s1">'client'</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">clientSecret</span> <span class="o">=</span> <span class="s1">'secret'</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">scope</span> <span class="o">=</span> <span class="s1">'api'</span>

<span class="kd">let</span> <span class="nx">getTokenRequest</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">method</span><span class="p">:</span> <span class="s1">'POST'</span><span class="p">,</span>
    <span class="na">url</span><span class="p">:</span> <span class="nx">tokenUrl</span><span class="p">,</span>
    <span class="na">auth</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">type</span><span class="p">:</span> <span class="s2">"basic"</span><span class="p">,</span>
        <span class="na">basic</span><span class="p">:</span> <span class="p">[</span>
            <span class="p">{</span> <span class="na">key</span><span class="p">:</span> <span class="s2">"username"</span><span class="p">,</span> <span class="na">value</span><span class="p">:</span> <span class="nx">clientId</span> <span class="p">},</span>
            <span class="p">{</span> <span class="na">key</span><span class="p">:</span> <span class="s2">"password"</span><span class="p">,</span> <span class="na">value</span><span class="p">:</span> <span class="nx">clientSecret</span> <span class="p">}</span>
        <span class="p">]</span>
    <span class="p">},</span>
    <span class="na">body</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">mode</span><span class="p">:</span> <span class="s1">'formdata'</span><span class="p">,</span>
        <span class="na">formdata</span><span class="p">:</span> <span class="p">[</span>
            <span class="p">{</span> <span class="na">key</span><span class="p">:</span> <span class="s1">'grant_type'</span><span class="p">,</span> <span class="na">value</span><span class="p">:</span> <span class="s1">'client_credentials'</span> <span class="p">},</span>
            <span class="p">{</span> <span class="na">key</span><span class="p">:</span> <span class="s1">'scope'</span><span class="p">,</span> <span class="na">value</span><span class="p">:</span> <span class="nx">scope</span> <span class="p">}</span>
        <span class="p">]</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="nx">pm</span><span class="p">.</span><span class="nx">sendRequest</span><span class="p">(</span><span class="nx">getTokenRequest</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">jsonResponse</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">(),</span>
        <span class="nx">newAccessToken</span> <span class="o">=</span> <span class="nx">jsonResponse</span><span class="p">.</span><span class="nx">access_token</span><span class="p">;</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">({</span> <span class="nx">err</span><span class="p">,</span> <span class="nx">jsonResponse</span><span class="p">,</span> <span class="nx">newAccessToken</span> <span class="p">})</span>

    <span class="nx">pm</span><span class="p">.</span><span class="nx">environment</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">'accessToken'</span><span class="p">,</span> <span class="nx">newAccessToken</span><span class="p">);</span>
    <span class="nx">pm</span><span class="p">.</span><span class="nx">variables</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">'accessToken'</span><span class="p">,</span> <span class="nx">newAccessToken</span><span class="p">);</span>
<span class="p">});</span></code></pre></figure>

<p>Which should be set on Pre-request Scripts tab:
<img src="assets/images/2018-09-29/Postman_5.png" alt="Set pre-request script" />
Let’s save all changes.</p>

<p>Now we must add a new request to our collection:
<img src="assets/images/2018-09-29/Postman_7.png" alt="Add a new request" />
<strong>This is very important.</strong> Without this step our
pre-request script will not be called:
<img src="assets/images/2018-09-29/Postman_8.png" alt="Save the new request" />
When creating the new request we should select “Inherit auth from parent”
as the authentication type.</p>

<p>Now if we send our test request we should get <code class="highlighter-rouge">200 OK</code> response:
<img src="assets/images/2018-09-29/Postman_9.png" alt="It works" /></p>

<h2 id="making-our-pre-request-script-work-with-multiple-environments">Making our pre-request script work with multiple environments</h2>

<p>Often we have to work with multiple environments like
development, staging (UAT) and production.
Each of these environments uses different URLs for services
and for OAuth authorization server. 
Not to mention that each environment will 
have its own set of client secrets (passwords).</p>

<p>Fortunately for us Postman has build in support for multiple environments.
Let’s start by creating a new environment with all necessary values
that are needed by our pre-request script:
<img src="assets/images/2018-09-29/Postman_10.png" alt="Create a new environment" /></p>

<p>Then we must modify our script to use values from the selected
environment:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">function</span> <span class="nx">getvar</span><span class="p">(</span><span class="nx">variableName</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">pm</span><span class="p">.</span><span class="nx">variables</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">variableName</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">value</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span>
        <span class="err">`</span><span class="nx">Variable</span> <span class="s1">'${variableName}'</span> <span class="nx">is</span> <span class="nx">not</span> <span class="nx">defined</span><span class="p">.</span> <span class="nx">Do</span> <span class="nx">you</span> <span class="nx">forget</span> <span class="nx">to</span> <span class="nx">select</span> <span class="nx">an</span> <span class="nx">environment</span><span class="p">?</span><span class="err">`</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">tokenUrl</span> <span class="o">=</span> <span class="nx">getvar</span><span class="p">(</span><span class="s1">'tokenUrl'</span><span class="p">);</span>
<span class="kd">let</span> <span class="nx">clientId</span> <span class="o">=</span> <span class="nx">getvar</span><span class="p">(</span><span class="s1">'clientId'</span><span class="p">);</span>
<span class="kd">let</span> <span class="nx">clientSecret</span> <span class="o">=</span> <span class="nx">getvar</span><span class="p">(</span><span class="s1">'clientSecret'</span><span class="p">);</span>
<span class="kd">let</span> <span class="nx">scope</span> <span class="o">=</span> <span class="nx">getvar</span><span class="p">(</span><span class="s1">'scope'</span><span class="p">);</span> 

<span class="c1">// rest of the script is the same as before</span></code></pre></figure>

<p>And that is all. Now we must define all environments that
we need and we are ready to go:
<img src="assets/images/2018-09-29/Postman_11.png" alt="Sending request with environment set" /></p>

<h2 id="troubleshooting">Troubleshooting</h2>

<p>Select <code class="highlighter-rouge">View -&gt; Show Postman Console</code> to see all log statements
made by our pre-request script: 
<img src="assets/images/2018-09-29/Postman_12.png" alt="Postman Console" /></p>

<p>Also using traffic sniffer like <a href="https://www.telerik.com/fiddler">Fiddler</a>
or <a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project">ZAP</a>
to compare requests made by auth popup and pre-request script may be helpful:
<img src="assets/images/2018-09-29/zap.png" alt="ZAP" /></p>

<p>If you are going to use ZAP do not forget to set ZAP as a proxy in Postman settings.</p>


	  ]]></description>
	</item>


</channel>
</rss>
