<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>marcin-chwedczuk.github.io/</title>
   
   <link>https://marcin-chwedczuk.github.io/</link>
   <description>A place where I can share my thoughts about programming</description>
   <language>en-uk</language>
   <managingEditor> marcin-chwedczuk</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Inheritance? Just say no!</title>
	  <link>//inheritance-just-say-no</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2018-12-12T01:00:00+01:00</pubDate>
	  <guid>//inheritance-just-say-no</guid>
	  <description><![CDATA[
	     <p>Recently during a code review I have found the following piece
of code:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">TemplateCache</span> 
    <span class="p">:</span> <span class="n">ConcurrentDictionary</span><span class="p">&lt;</span><span class="n">TemplateName</span><span class="p">,</span> <span class="n">Template</span><span class="p">&gt;</span> <span class="p">{</span> <span class="p">}</span></code></pre></figure>

<p>Here the programmer broke one of the most fundamental principles
of modern object oriented programming:</p>

<blockquote>
  <p>Prefer composition over inheritance</p>
</blockquote>

<p>Why inheritance is bad in most of the cases? Here are the reasons:</p>

<h6 id="watered-down-component-api">Watered down component API</h6>

<p>What methods would you expect on a cache? Something that gets
values from the cache if they are already there. Let us call 
this operation <code class="highlighter-rouge">TryGetValue(cacheKey, out value)</code>. 
And of course a method to
add a new or overwrite an existing cache entry, let’s call it
<code class="highlighter-rouge">SetValue(cacheKey, value)</code>. Do we need more methods on a cache
from the client point of view? Maybe in the future we will want to
extend <code class="highlighter-rouge">SetValue</code> operation to allow client to specify for how
long items added to the cache should be stored? Who knows. 
But still we would end up with only two operations.</p>

<blockquote>
  <p>NOTE A truly generic and reusable cache 
is usually slightly more complicated - instead of two
we have three methods! For example please see
<a href="https://github.com/aspnet/Caching/blob/master/src/Microsoft.Extensions.Caching.Abstractions/IMemoryCache.cs">IMemoryCache</a> interface.</p>
</blockquote>

<p>On the other hand if we use inheritance we end up with something 
like this:
<img src="assets/images/2018-12-12/cache_api.png" alt="Cache API when we use inheritance" />
This is much more than we asked for. We actually get operations
that make no sense for a cache like <code class="highlighter-rouge">IsEmpty</code>. I mean either an item
that we are looking for is in the cache or it is not - who cares
if the cache is empty itself?</p>

<p>I hope that I managed to persuade you that a good component
API should be small, focused and easy to use. We get none of these 
if we use inheritance.</p>

<h6 id="broken-encapsulation">Broken encapsulation</h6>

<p>By using inheritance we are making it clear to the clients of
our component that it is implemented using <code class="highlighter-rouge">ConcurrentDictionary</code> class.
If we wait long enough we will notice that some of them 
will start relaying on that knowledge in their code. 
For example they may use <code class="highlighter-rouge">ContainsKey</code> method for checking if
the cache contains a given entry. 
What will happen later, when we decide that we want to change 
the cache implementation and use for example 
<a href="https://dotnetcoretutorials.com/2017/03/05/using-inmemory-cache-net-core/">IMemoryCache</a> instead?
Clients of our component will get angry, because
our new version of the cache<br />
introduced a breaking change into their code.</p>

<p>Just to sum up: Inheritance both exposes implementation
details of components and makes evolution of their APIs more difficult.</p>

<h6 id="liskov-substitution-principle-is-broken">Liskov substitution principle is broken</h6>

<p>In short some operations that make sense for a dictionary
may not make sense for a cache. For example it makes no
sense to cache a template that does not exists, yet with
inheritance we may write:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">var</span> <span class="n">foo</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">TemplateName</span><span class="p">(</span><span class="s">"foo"</span><span class="p">);</span>

<span class="n">ConcurrentDictionary</span><span class="p">&lt;</span><span class="n">TemplateName</span><span class="p">,</span> <span class="n">Template</span><span class="p">&gt;</span> <span class="n">dict</span> 
   <span class="p">=</span> <span class="k">new</span> <span class="nf">TemplateCache</span><span class="p">();</span>

<span class="n">dict</span><span class="p">.</span><span class="nf">GetOrAdd</span><span class="p">(</span><span class="n">foo</span><span class="p">,</span> <span class="p">(</span><span class="n">Template</span><span class="p">)</span><span class="k">null</span><span class="p">);</span>

<span class="c1">// Ops we have a null template here...
</span><span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="s">"value is: "</span> <span class="p">+</span> 
   <span class="n">dict</span><span class="p">.</span><span class="nf">GetOrAdd</span><span class="p">(</span><span class="n">foo</span><span class="p">,</span> <span class="p">(</span><span class="n">Template</span><span class="p">)</span><span class="k">null</span><span class="p">));</span></code></pre></figure>

<p>When we use inheritance we are telling the type system that
<code class="highlighter-rouge">TemplateCache</code> <em>is a</em> <code class="highlighter-rouge">ConcurrentDictionary</code>. 
From logical point of view this makes no sense. They are two
different components that have two different purposes and also
different usage patterns. 
They should have nothing in common.</p>

<blockquote>
  <p>BTW You should avoid putting <code class="highlighter-rouge">null</code>s into collection classes of any sort.</p>
</blockquote>

<p>Let’s finish this post by seeing how composition can be used
to improve our <code class="highlighter-rouge">TemplateCache</code> component:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">TemplateCache</span> <span class="p">{</span>
  <span class="k">private</span> <span class="k">readonly</span> <span class="n">ConcurrentDictionary</span><span class="p">&lt;</span><span class="n">TemplateName</span><span class="p">,</span> <span class="n">Template</span><span class="p">&gt;</span> <span class="n">_cache</span> 
      <span class="p">=</span> <span class="k">new</span> <span class="n">ConcurrentDictionary</span><span class="p">&lt;</span><span class="n">TemplateName</span><span class="p">,</span> <span class="n">Template</span><span class="p">&gt;();</span>

  <span class="k">public</span> <span class="kt">bool</span> <span class="nf">TryGetTemplate</span><span class="p">(</span><span class="n">TemplateName</span> <span class="n">name</span><span class="p">,</span> <span class="k">out</span> <span class="n">Template</span> <span class="n">template</span><span class="p">)</span>
      <span class="p">=&gt;</span> <span class="n">_cache</span><span class="p">.</span><span class="nf">TryGetValue</span><span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="k">out</span> <span class="n">template</span><span class="p">);</span>

  <span class="k">public</span> <span class="k">void</span> <span class="nf">AddTemplate</span><span class="p">(</span><span class="n">Template</span> <span class="n">template</span><span class="p">)</span>
      <span class="p">=&gt;</span> <span class="n">_cache</span><span class="p">.</span><span class="nf">AddOrUpdate</span><span class="p">(</span>
          <span class="n">template</span><span class="p">.</span><span class="n">Name</span><span class="p">,</span> <span class="n">template</span><span class="p">,</span> <span class="p">(</span><span class="n">name</span><span class="p">,</span> <span class="n">existing</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">template</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>Yep, simple, clean and easy to use!</p>


	  ]]></description>
	</item>

	<item>
	  <title>Abusing local functions to hide design problems</title>
	  <link>//abusing-local-functions-to-hide-design-problems</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2018-10-08T02:00:00+02:00</pubDate>
	  <guid>//abusing-local-functions-to-hide-design-problems</guid>
	  <description><![CDATA[
	     <p>Recently I was browsing through a certain code base
and I saw a code similar to this:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">EnterpriseNotificationSender</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IUserManagementService</span> <span class="n">_userManagementService</span><span class="p">;</span>
    <span class="c1">// ctor and stuff...
</span>  
    <span class="k">public</span> <span class="k">void</span> <span class="nf">SendNotificationsToUsers</span><span class="p">(</span><span class="kt">string</span> <span class="n">companyId</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">var</span> <span class="n">addresses</span> <span class="p">=</span> <span class="nf">GetRecipientsAddresses</span><span class="p">(</span><span class="n">companyId</span><span class="p">);</span>
        <span class="k">foreach</span><span class="p">(</span><span class="n">var</span> <span class="n">address</span> <span class="k">in</span> <span class="n">addresses</span><span class="p">)</span> <span class="p">{</span>
            <span class="nf">SendNotification</span><span class="p">(</span><span class="n">address</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
  
    <span class="k">private</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">EmailAddress</span><span class="p">&gt;</span> 
                     <span class="nf">GetRecipientsAddresses</span><span class="p">(</span><span class="kt">string</span> <span class="n">companyId</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">_userManagementService</span>
             <span class="p">.</span><span class="nf">FindUsersBelongingToCompany</span><span class="p">(</span><span class="n">companyId</span><span class="p">)</span>
             <span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="n">UserShouldReciveNotification</span><span class="p">)</span>
             <span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">user</span> <span class="p">=&gt;</span> <span class="n">user</span><span class="p">.</span><span class="n">EmailAddress</span><span class="p">)</span>
             <span class="p">.</span><span class="nf">ToList</span><span class="p">();</span>
  
        <span class="kt">bool</span> <span class="nf">UserShouldReciveNotification</span><span class="p">(</span><span class="n">User</span> <span class="n">user</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span> <span class="n">user</span><span class="p">.</span><span class="n">EmailAddress</span> <span class="p">!=</span> <span class="k">null</span>
                <span class="p">&amp;&amp;</span> <span class="n">user</span><span class="p">.</span><span class="n">IsRegistered</span>
                <span class="p">&amp;&amp;</span> <span class="p">!</span><span class="n">user</span><span class="p">.</span><span class="n">IsDisabled</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>
  
    <span class="k">private</span> <span class="k">void</span> <span class="nf">SendNotification</span><span class="p">(</span><span class="n">EmailAddress</span> <span class="n">address</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// do stuff...
</span>    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Especially <code class="highlighter-rouge">GetRecipientsAddresses</code> method draw my attention.
Someone extracted quite complicated lambda expression
to a local function.
At first I thought that this is indeed a very nice usage for local
functions.
LINQ query is much more readable
with expressions like <code class="highlighter-rouge">Where(UserShouldReciveNotification)</code>
instead of long lambdas.</p>

<p>It took me a while to realize that the local function
in the code above, was used to hide design problems.
Let’s take a closer look at the condition encapsulated by
<code class="highlighter-rouge">UserShouldReciveNotification</code> function:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">return</span> <span class="n">user</span><span class="p">.</span><span class="n">EmailAddress</span> <span class="p">!=</span> <span class="k">null</span>
    <span class="p">&amp;&amp;</span> <span class="n">user</span><span class="p">.</span><span class="n">IsRegistered</span>
    <span class="p">&amp;&amp;</span> <span class="p">!</span><span class="n">user</span><span class="p">.</span><span class="n">IsDisabled</span><span class="p">;</span></code></pre></figure>

<p>We should deal with the simplest to fix problems first:</p>

<p><strong>Bad naming:</strong> We should always format predicates in “a positive way”.
For examples we should prefer <code class="highlighter-rouge">IsOpen</code> and <code class="highlighter-rouge">IsAvailable</code> to <code class="highlighter-rouge">IsClose</code>
and <code class="highlighter-rouge">IsUnavailable</code>. Here <code class="highlighter-rouge">IsDisabled</code> should be named <code class="highlighter-rouge">IsEnabled</code>.
As a first step in refactoring we may add <code class="highlighter-rouge">IsEnabled</code> property
to the <code class="highlighter-rouge">User</code> class:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="kt">bool</span> <span class="n">IsEnabled</span> <span class="p">=&gt;</span> <span class="p">!</span><span class="n">IsDisabled</span><span class="p">;</span></code></pre></figure>

<p><strong>Unreadable condition:</strong> If a user has optional email then we may expect
that our codebase is littered with little <code class="highlighter-rouge">user.EmailAddres != null</code> checks.
To increase readability we should encapsulate this check into a separate property:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="kt">bool</span> <span class="n">HasEmailAddress</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="n">EmailAddress</span> <span class="p">!=</span> <span class="k">null</span><span class="p">);</span></code></pre></figure>

<p><strong>Missing entity attributes:</strong> When I looked closely at the condition
<code class="highlighter-rouge">user.IsRegistered &amp;&amp; !user.IsDisabled</code> I found out that it occurs
in many places in that codebase. For some reason the system was creating
users before they actually registered. A user that not registered yet was basically
a stub not a real user. Users could also be disabled by admins (registered or not),
this is what the second part of the condition was responsible for.
Clearly <code class="highlighter-rouge">User</code> entity is missing an attribute that could tell us whatever
a user is active, so let’s add one:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="kt">bool</span> <span class="n">IsActive</span>
    <span class="p">=&gt;</span> <span class="n">IsRegistered</span> <span class="p">&amp;&amp;</span> <span class="n">IsEnabled</span><span class="p">;</span></code></pre></figure>

<p>After all these refactorings we may finally rewrite our LINQ query:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">return</span> <span class="n">_userManagementService</span>
    <span class="p">.</span><span class="nf">FindUsersBelongingToCompany</span><span class="p">(</span><span class="n">companyId</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="n">user</span> <span class="p">=&gt;</span> <span class="n">user</span><span class="p">.</span><span class="n">IsActive</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="n">user</span> <span class="p">=&gt;</span> <span class="n">user</span><span class="p">.</span><span class="n">HasEmailAddress</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">user</span> <span class="p">=&gt;</span> <span class="n">user</span><span class="p">.</span><span class="n">EmailAddress</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">ToList</span><span class="p">();</span></code></pre></figure>

<p>This version is as readable as version with the local function,
but does not attempt to hide code smells.</p>

<p>Conclusion: Every time when you have a too long or too complicated
lambda expression, that you what to extract to a local function,
think if you can simplify that lambda by extracting conditions and checks
into new methods and properties on processed objects.</p>


	  ]]></description>
	</item>

	<item>
	  <title>Automatically generate new OAuth 2.0 access tokens when using Postman</title>
	  <link>//automatically-generate-new-oauth2-tokens-when-using-postman</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2018-09-29T02:00:00+02:00</pubDate>
	  <guid>//automatically-generate-new-oauth2-tokens-when-using-postman</guid>
	  <description><![CDATA[
	     <p>Did you ever try to use <a href="https://www.getpostman.com/">Postman</a>
with OAuth 2.0 protected API? 
It is pretty annoying. 
First you must select the correct authorization type, 
then you must open a popup to request a new access token,
and only then you can send your HTTP request.
And of course when the token expires or when for some reason you need a
new one (e.g. because you want to switching from development to staging environment),
you need to go through the process again.
Fortunately for us this can be automated using Postman pre-request scripts.</p>

<p>To test that my pre-request script works I used publicly available 
<a href="http://identityserver.io/">IdentityServer</a>
<a href="https://demo.identityserver.io/">demo instance</a>.
We may use it to manually generate a new access token and
to preform a test API call:
<img src="assets/images/2018-09-29/Postman_1.png" alt="Manually generating token 1" />
<img src="assets/images/2018-09-29/Postman_2.png" alt="Manually generating token 2" />
<img src="assets/images/2018-09-29/Postman_3.png" alt="Performing test API call" /></p>

<p>OK, so how will we automate this stuff? Let’s start by creating a new
collection that will contain all requests for which we want to automatically
generate OAuth access tokens:
<img src="assets/images/2018-09-29/Postman_4.png" alt="Create a new collection" />
On Authorization tab use {{accessToken}}
 as a value of the Access Token
field, this way Postman will try to load the token value from a variable:
<img src="assets/images/2018-09-29/Postman_6.png" alt="Set Access Token field" />
We will populate this variable using the following pre-request script:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// Adapted from: https://gist.github.com/harryi3t/dd5c61451206047db70710ff6174c3c1</span>

<span class="kd">let</span> <span class="nx">tokenUrl</span> <span class="o">=</span> <span class="s1">'https://demo.identityserver.io/connect/token'</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">clientId</span> <span class="o">=</span> <span class="s1">'client'</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">clientSecret</span> <span class="o">=</span> <span class="s1">'secret'</span><span class="p">;</span>
<span class="kd">let</span> <span class="nx">scope</span> <span class="o">=</span> <span class="s1">'api'</span>

<span class="kd">let</span> <span class="nx">getTokenRequest</span> <span class="o">=</span> <span class="p">{</span>
    <span class="na">method</span><span class="p">:</span> <span class="s1">'POST'</span><span class="p">,</span>
    <span class="na">url</span><span class="p">:</span> <span class="nx">tokenUrl</span><span class="p">,</span>
    <span class="na">auth</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">type</span><span class="p">:</span> <span class="s2">"basic"</span><span class="p">,</span>
        <span class="na">basic</span><span class="p">:</span> <span class="p">[</span>
            <span class="p">{</span> <span class="na">key</span><span class="p">:</span> <span class="s2">"username"</span><span class="p">,</span> <span class="na">value</span><span class="p">:</span> <span class="nx">clientId</span> <span class="p">},</span>
            <span class="p">{</span> <span class="na">key</span><span class="p">:</span> <span class="s2">"password"</span><span class="p">,</span> <span class="na">value</span><span class="p">:</span> <span class="nx">clientSecret</span> <span class="p">}</span>
        <span class="p">]</span>
    <span class="p">},</span>
    <span class="na">body</span><span class="p">:</span> <span class="p">{</span>
        <span class="na">mode</span><span class="p">:</span> <span class="s1">'formdata'</span><span class="p">,</span>
        <span class="na">formdata</span><span class="p">:</span> <span class="p">[</span>
            <span class="p">{</span> <span class="na">key</span><span class="p">:</span> <span class="s1">'grant_type'</span><span class="p">,</span> <span class="na">value</span><span class="p">:</span> <span class="s1">'client_credentials'</span> <span class="p">},</span>
            <span class="p">{</span> <span class="na">key</span><span class="p">:</span> <span class="s1">'scope'</span><span class="p">,</span> <span class="na">value</span><span class="p">:</span> <span class="nx">scope</span> <span class="p">}</span>
        <span class="p">]</span>
    <span class="p">}</span>
<span class="p">};</span>

<span class="nx">pm</span><span class="p">.</span><span class="nx">sendRequest</span><span class="p">(</span><span class="nx">getTokenRequest</span><span class="p">,</span> <span class="p">(</span><span class="nx">err</span><span class="p">,</span> <span class="nx">response</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">jsonResponse</span> <span class="o">=</span> <span class="nx">response</span><span class="p">.</span><span class="nx">json</span><span class="p">(),</span>
        <span class="nx">newAccessToken</span> <span class="o">=</span> <span class="nx">jsonResponse</span><span class="p">.</span><span class="nx">access_token</span><span class="p">;</span>

    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">({</span> <span class="nx">err</span><span class="p">,</span> <span class="nx">jsonResponse</span><span class="p">,</span> <span class="nx">newAccessToken</span> <span class="p">})</span>

    <span class="nx">pm</span><span class="p">.</span><span class="nx">environment</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">'accessToken'</span><span class="p">,</span> <span class="nx">newAccessToken</span><span class="p">);</span>
    <span class="nx">pm</span><span class="p">.</span><span class="nx">variables</span><span class="p">.</span><span class="nx">set</span><span class="p">(</span><span class="s1">'accessToken'</span><span class="p">,</span> <span class="nx">newAccessToken</span><span class="p">);</span>
<span class="p">});</span></code></pre></figure>

<p>Which should be set on Pre-request Scripts tab:
<img src="assets/images/2018-09-29/Postman_5.png" alt="Set pre-request script" />
Let’s save all changes.</p>

<p>Now we must add a new request to our collection:
<img src="assets/images/2018-09-29/Postman_7.png" alt="Add a new request" />
<strong>This is very important.</strong> Without this step our
pre-request script will not be called:
<img src="assets/images/2018-09-29/Postman_8.png" alt="Save the new request" />
When creating the new request we should select “Inherit auth from parent”
as the authentication type.</p>

<p>Now if we send our test request we should get <code class="highlighter-rouge">200 OK</code> response:
<img src="assets/images/2018-09-29/Postman_9.png" alt="It works" /></p>

<h2 id="making-our-pre-request-script-work-with-multiple-environments">Making our pre-request script work with multiple environments</h2>

<p>Often we have to work with multiple environments like
development, staging (UAT) and production.
Each of these environments uses different URLs for services
and for OAuth authorization server. 
Not to mention that each environment will 
have its own set of client secrets (passwords).</p>

<p>Fortunately for us Postman has build in support for multiple environments.
Let’s start by creating a new environment with all necessary values
that are needed by our pre-request script:
<img src="assets/images/2018-09-29/Postman_10.png" alt="Create a new environment" /></p>

<p>Then we must modify our script to use values from the selected
environment:</p>

<figure class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="kd">function</span> <span class="nx">getvar</span><span class="p">(</span><span class="nx">variableName</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">value</span> <span class="o">=</span> <span class="nx">pm</span><span class="p">.</span><span class="nx">variables</span><span class="p">.</span><span class="nx">get</span><span class="p">(</span><span class="nx">variableName</span><span class="p">);</span>
    <span class="k">if</span> <span class="p">(</span><span class="o">!</span><span class="nx">value</span><span class="p">)</span> <span class="k">throw</span> <span class="k">new</span> <span class="nb">Error</span><span class="p">(</span>
        <span class="err">`</span><span class="nx">Variable</span> <span class="s1">'${variableName}'</span> <span class="nx">is</span> <span class="nx">not</span> <span class="nx">defined</span><span class="p">.</span> <span class="nx">Do</span> <span class="nx">you</span> <span class="nx">forget</span> <span class="nx">to</span> <span class="nx">select</span> <span class="nx">an</span> <span class="nx">environment</span><span class="p">?</span><span class="err">`</span><span class="p">);</span>
    <span class="k">return</span> <span class="nx">value</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">let</span> <span class="nx">tokenUrl</span> <span class="o">=</span> <span class="nx">getvar</span><span class="p">(</span><span class="s1">'tokenUrl'</span><span class="p">);</span>
<span class="kd">let</span> <span class="nx">clientId</span> <span class="o">=</span> <span class="nx">getvar</span><span class="p">(</span><span class="s1">'clientId'</span><span class="p">);</span>
<span class="kd">let</span> <span class="nx">clientSecret</span> <span class="o">=</span> <span class="nx">getvar</span><span class="p">(</span><span class="s1">'clientSecret'</span><span class="p">);</span>
<span class="kd">let</span> <span class="nx">scope</span> <span class="o">=</span> <span class="nx">getvar</span><span class="p">(</span><span class="s1">'scope'</span><span class="p">);</span> 

<span class="c1">// rest of the script is the same as before</span></code></pre></figure>

<p>And that is all. Now we must define all environments that
we need and we are ready to go:
<img src="assets/images/2018-09-29/Postman_11.png" alt="Sending request with environment set" /></p>

<h2 id="troubleshooting">Troubleshooting</h2>

<p>Select <code class="highlighter-rouge">View -&gt; Show Postman Console</code> to see all log statements
made by our pre-request script: 
<img src="assets/images/2018-09-29/Postman_12.png" alt="Postman Console" /></p>

<p>Also using traffic sniffer like <a href="https://www.telerik.com/fiddler">Fiddler</a>
or <a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project">ZAP</a>
to compare requests made by auth popup and pre-request script may be helpful:
<img src="assets/images/2018-09-29/zap.png" alt="ZAP" /></p>

<p>If you are going to use ZAP do not forget to set ZAP as a proxy in Postman settings.</p>


	  ]]></description>
	</item>

	<item>
	  <title>Avoid hidden coupling to interface implementation</title>
	  <link>//avoid-hidden-coupling-to-interface-implementation</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2018-09-21T02:00:00+02:00</pubDate>
	  <guid>//avoid-hidden-coupling-to-interface-implementation</guid>
	  <description><![CDATA[
	     <p>A few days ago I was reviewing a pull request at work and
one line of code catch my eye:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">var</span> <span class="n">@event</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">CupOfCoffeeReadyEvent</span><span class="p">(</span><span class="cm">/* ... */</span><span class="p">);</span>
<span class="n">_logger</span><span class="p">.</span><span class="nf">LogInformation</span><span class="p">(</span>
    <span class="s">"Publishing cup of coffee event: {@Event}."</span><span class="p">,</span> <span class="n">@event</span><span class="p">);</span> <span class="c1">// &lt;== this one
</span><span class="n">_mediator</span><span class="p">.</span><span class="nf">Publish</span><span class="p">(</span><span class="n">@event</span><span class="p">);</span></code></pre></figure>

<p>At my workplace we are using standard <code class="highlighter-rouge">ILogger</code> interface from 
<code class="highlighter-rouge">Microsoft.Extensions.Logging.Abstractions</code>
package. Also logged variable name starts with <code class="highlighter-rouge">@</code> (<code class="highlighter-rouge">@event</code>). 
And so I started to suspect that 
the log statement contains an error and instead it should be written as:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// {@Event} -&gt; {Event}
</span><span class="n">_logger</span><span class="p">.</span><span class="nf">LogInformation</span><span class="p">(</span>
    <span class="s">"Publishing cup of coffee event: {Event}."</span><span class="p">,</span> <span class="n">@event</span><span class="p">);</span></code></pre></figure>

<p>Without thinking any further I put a friendly comment, that 
this logging statement should be fixed.
After half an hour, instead of a fix I get the following response:</p>

<blockquote>
  <p>In this microservice we are using Serilog as third-party logging provider.</p>

  <p>In Serilog <code class="highlighter-rouge">@</code> is used as destructuring operator,
please see: 
https://github.com/serilog/serilog/wiki/Structured-Data#preserving-object-structure</p>

  <p>Basically this means that the argument will be logged in JSON form.</p>
</blockquote>

<p>So <code class="highlighter-rouge">@</code> character was put there on purpose. OK, fine.
But there still was something fishy about this code. 
On the one hand we are using <code class="highlighter-rouge">ILogger</code> from 
<code class="highlighter-rouge">Microsoft.Extensions.Logging.Abstractions</code> to decouple ourselves 
from any specific logging provider,
on the other hand we are using Serilog specific extensions.
This results in a false sense of security. 
We may think that since we are
using standard <code class="highlighter-rouge">ILogger</code>, changing logging provider to e.g.
Azure Web App Diagnostics would be as simple as changing <code class="highlighter-rouge">Startup</code> 
class of our application.
Unfortunately since we coupled ourselves with Serilog 
(by Serilog specific extensions to the log message template),
some of our log statements may not work with the new logging provider.</p>

<p>So what is the solution to this problem? We must choose whatever we
want to use Serilog specific features. If we want to use them, then 
we should not hide the fact that we are using Serilog. Fortunately for
us Serilog provides it’s own, ready to use <code class="highlighter-rouge">ILogger</code> interface.
And we should use that interface instead of standard one accross
the entire application.</p>

<p>On the other hand, if we expect that we may need to change logging
provider in the future, we should stick with 
<code class="highlighter-rouge">Microsoft.Extensions.Logging.Abstractions</code> <code class="highlighter-rouge">ILogger</code> and we should
use only the features that are described in 
<a href="https://docs.microsoft.com/en-us/aspnet/core/fundamentals/logging/?view=aspnetcore-2.1">the official documentation</a>. 
If our needs are not fully covered
by the standard <code class="highlighter-rouge">ILogger</code> 
e.g. we must log objects as JSON, then we must implement them
ourselves by e.g. creating wrappers around parameters:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">_logger</span><span class="p">.</span><span class="nf">LogInformation</span><span class="p">(</span>
    <span class="s">"Publishing cup of coffee {Event}."</span><span class="p">,</span> <span class="k">new</span> <span class="nf">LogAsJson</span><span class="p">(</span><span class="n">@event</span><span class="p">));</span></code></pre></figure>

<p>It is really interesting that a similar coupling happens when using
<code class="highlighter-rouge">IEnumerable&lt;T&gt;</code> interface as the return type of a method.
How many times have you seen a code similar to:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">void</span> <span class="nf">SomeMethod</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// IEnumerable&lt;User&gt;
</span>    <span class="n">var</span> <span class="n">users</span> <span class="p">=</span> <span class="n">userService</span><span class="p">.</span><span class="nf">FindAllUsers</span><span class="p">();</span>
    
    <span class="n">users</span>
        <span class="p">.</span><span class="nf">ToList</span><span class="p">()</span>
        <span class="p">.</span><span class="nf">ForEach</span><span class="p">(</span><span class="n">user</span> <span class="p">=&gt;</span> <span class="n">user</span><span class="p">.</span><span class="n">IsActive</span> <span class="p">=</span> <span class="k">false</span><span class="p">);</span>
    
    <span class="n">userService</span><span class="p">.</span><span class="nf">SaveAll</span><span class="p">(</span><span class="n">users</span><span class="p">.</span><span class="nf">ToArray</span><span class="p">());</span>
<span class="p">}</span>
<span class="k">class</span> <span class="nc">UserSerivce</span> <span class="p">{</span>
    <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">User</span><span class="p">&gt;</span> <span class="nf">FindAllUsers</span><span class="p">()</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">User</span><span class="p">&gt;</span> <span class="p">{</span>
            <span class="k">new</span> <span class="n">User</span> <span class="p">{</span> <span class="n">IsActive</span> <span class="p">=</span> <span class="k">true</span> <span class="p">},</span>
            <span class="k">new</span> <span class="n">User</span> <span class="p">{</span> <span class="n">IsActive</span> <span class="p">=</span> <span class="k">false</span> <span class="p">}</span>
        <span class="p">};</span>
    <span class="p">}</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">SaveAll</span><span class="p">(</span><span class="k">params</span> <span class="n">User</span><span class="p">[]</span> <span class="n">users</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">foreach</span> <span class="p">(</span><span class="n">var</span> <span class="n">user</span> <span class="k">in</span> <span class="n">users</span><span class="p">)</span> <span class="p">{</span>
            <span class="n">Console</span><span class="p">.</span><span class="nf">WriteLine</span><span class="p">(</span><span class="n">user</span><span class="p">.</span><span class="n">IsActive</span><span class="p">);</span>
        <span class="p">}</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">User</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">bool</span> <span class="n">IsActive</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Again we have here a bad case of hidden coupling to the interface implementation.
We are using <code class="highlighter-rouge">IEnumerable&lt;T&gt;</code>
interface but we are assuming that it is backed by
a collection for which multiple enumerations always
return the same elements. 
Our code will break 
when someone will change <code class="highlighter-rouge">FindAllUsers</code> implementation to
e.g.:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">User</span><span class="p">&gt;</span> <span class="nf">FindAllUsers</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">yield</span> <span class="k">return</span> <span class="k">new</span> <span class="n">User</span> <span class="p">{</span> <span class="n">IsActive</span> <span class="p">=</span> <span class="k">true</span> <span class="p">};</span>
    <span class="k">yield</span> <span class="k">return</span> <span class="k">new</span> <span class="n">User</span> <span class="p">{</span> <span class="n">IsActive</span> <span class="p">=</span> <span class="k">false</span> <span class="p">};</span>
<span class="p">}</span></code></pre></figure>

<p>The solution to this problem is honesty. If you have
a value of type <code class="highlighter-rouge">IEnumerable&lt;T&gt;</code>, tread it as 
a value of type <code class="highlighter-rouge">IEnumerable&lt;T&gt;</code>. Nothing more, nothing less.
Do not assume that multiple enumerations
will return the same elements. 
This is not guaranteed by that interface.</p>

<p>If you want to return a sequence of elements from a method with
this additional guarantee, then please use a more specific 
interface like <code class="highlighter-rouge">ICollection&lt;T&gt;</code> or <code class="highlighter-rouge">IReadOnlyList&lt;T&gt;</code> or 
maybe even something from <code class="highlighter-rouge">System.Collections.Immutable</code> package.</p>


	  ]]></description>
	</item>

	<item>
	  <title>Fluent Validation and complex dependencies between properties</title>
	  <link>//fluent-validation-and-complex-dependencies-between-properties</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2018-09-18T02:00:00+02:00</pubDate>
	  <guid>//fluent-validation-and-complex-dependencies-between-properties</guid>
	  <description><![CDATA[
	     <p><a href="https://fluentvalidation.net/">FluentValidation</a> is one of the
best validation libraries for .NET. I use it daily both at work
and in my personal pet projects. Still from time to time I
encounter situations where it is not obvious how 
I should use FluentValidation.
In this blog post I describe one such situation that I have to
deal with recently.</p>

<p>In short I had to validate a simple DTO:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">SampleRequestDto</span> <span class="p">{</span>
    <span class="k">public</span> <span class="n">AddressDto</span> <span class="n">Address</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="n">ContactInfoDto</span> <span class="n">ContactInfo</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">AddressDto</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">AddressLine1</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">AddressLine2</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">City</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">ZipCode</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">CountryIsoCode</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">ContactInfoDto</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">EmailAddress</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
    <span class="c1">// Phone number validation depends on CountryIsoCode.
</span>    <span class="k">public</span> <span class="kt">string</span> <span class="n">PhoneNumber</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>With a small twist that <code class="highlighter-rouge">ContactInfo.PhoneNumber</code> was 
validated using country dependent format and information
about country itself was stored in <code class="highlighter-rouge">Address.CountryIsoCode</code> field.</p>

<p>This is generally a good use-case for FluentValidation <code class="highlighter-rouge">Custom</code> rule:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="nf">RuleFor</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">Custom</span><span class="p">((</span><span class="n">dto</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="n">var</span> <span class="n">countryIsoCode</span> <span class="p">=</span> <span class="n">dto</span><span class="p">?.</span><span class="n">Address</span><span class="p">?.</span><span class="n">CountryIsoCode</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="nf">IsNullOrEmpty</span><span class="p">(</span><span class="n">countryIsoCode</span><span class="p">))</span> 
            <span class="k">return</span><span class="p">;</span>

        <span class="n">var</span> <span class="n">country</span> <span class="p">=</span> <span class="n">Countries</span><span class="p">.</span><span class="nf">FindCountryByIsoCode</span><span class="p">(</span><span class="n">countryIsoCode</span><span class="p">);</span>
        <span class="c1">// invalid country code - cannot validate phone number
</span>        <span class="k">if</span> <span class="p">(</span><span class="n">country</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="k">return</span><span class="p">;</span>

        <span class="n">var</span> <span class="n">phoneNumber</span> <span class="p">=</span> <span class="n">dto</span><span class="p">?.</span><span class="n">ContactInfo</span><span class="p">?.</span><span class="n">PhoneNumber</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="nf">IsNullOrWhiteSpace</span><span class="p">(</span><span class="n">phoneNumber</span><span class="p">))</span>
            <span class="k">return</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(!</span><span class="n">country</span><span class="p">.</span><span class="n">PhoneNumberFormat</span><span class="p">.</span><span class="nf">Matches</span><span class="p">(</span><span class="n">phoneNumber</span><span class="p">))</span> <span class="p">{</span>
            <span class="n">context</span><span class="p">.</span><span class="nf">AddFailure</span><span class="p">(</span><span class="k">new</span> <span class="nf">ValidationFailure</span><span class="p">(</span>
                <span class="err">$</span><span class="s">"ContactInfo.PhoneNumber"</span><span class="p">,</span> <span class="c1">// property name
</span>                <span class="err">$</span><span class="s">"'{phoneNumber}' is not a valid phone number in {country.Name}."</span><span class="p">));</span>
        <span class="p">}</span>
    <span class="p">});</span></code></pre></figure>

<p>Unfortunately in my case I also had a bunch of other country dependent 
values like VAT numbers scattered across many DTOs. And I needed
a more reusable and programmer friendly solution than <code class="highlighter-rouge">Custom</code> rule.</p>

<p>Ideally my validator definition should look like this:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">SampleRequestDtoValidator</span> <span class="p">:</span> <span class="n">AbstractValidator</span><span class="p">&lt;</span><span class="n">SampleRequestDto</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="k">public</span>  <span class="nf">SampleRequestDtoValidator</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">RuleFor</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Address</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">SetValidator</span><span class="p">(</span><span class="k">new</span> <span class="nf">AddressDtoValidator</span><span class="p">());</span>

        <span class="nf">RuleFor</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">ContactInfo</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">SetValidator</span><span class="p">(</span><span class="k">new</span> <span class="nf">ContactInfoDtoValidator</span><span class="p">());</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">AddressDtoValidator</span> <span class="p">:</span> <span class="n">AbstractValidator</span><span class="p">&lt;</span><span class="n">AddressDto</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="k">public</span> <span class="nf">AddressDtoValidator</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">RuleFor</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">CountryIsoCode</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">NotEmpty</span><span class="p">()</span>
            <span class="p">.</span><span class="nf">CountryIsoCode</span><span class="p">();</span> <span class="c1">// custom extension
</span>        <span class="c1">// other rules...
</span>    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">ContactInfoDtoValidator</span> <span class="p">:</span> <span class="n">AbstractValidator</span><span class="p">&lt;</span><span class="n">ContactInfoDto</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="k">public</span> <span class="nf">ContactInfoDtoValidator</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">RuleFor</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">PhoneNumber</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">NotEmpty</span><span class="p">()</span>
            <span class="p">.</span><span class="nf">MaximumLength</span><span class="p">(</span><span class="m">50</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">PhoneNumber</span><span class="p">();</span> <span class="c1">// custom extension
</span>        <span class="c1">// other rules...
</span>    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Creating property validators like <code class="highlighter-rouge">CountryIsoCode</code> using FluentValidation
is very simple. You just extend <code class="highlighter-rouge">PropertyValidator</code> class,
provide an error message template to the base class ctor and override
<code class="highlighter-rouge">IsValid</code> method. 
Additionally you may define an extension method 
to the <code class="highlighter-rouge">IRuleBuilder&lt;T,TProperty&gt;</code>
interface to make your validator behave like build-in ones.</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">CountryIsoCodeValidator</span> <span class="p">:</span> <span class="n">PropertyValidator</span> <span class="p">{</span>
    <span class="k">public</span> <span class="nf">CountryIsoCodeValidator</span><span class="p">()</span> 
        <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="s">"'{PropertyValue}' is not a valid country iso code."</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>

    <span class="k">protected</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">IsValid</span><span class="p">(</span><span class="n">PropertyValidatorContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">var</span> <span class="n">isoCode</span> <span class="p">=</span> <span class="p">(</span><span class="kt">string</span><span class="p">)</span> <span class="n">context</span><span class="p">.</span><span class="n">PropertyValue</span><span class="p">;</span>

        <span class="k">if</span> <span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="nf">IsNullOrEmpty</span><span class="p">(</span><span class="n">isoCode</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">Countries</span><span class="p">.</span><span class="nf">IsKnownIsoCode</span><span class="p">(</span><span class="n">isoCode</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">CountryIsoCodeValidatorExtension</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="n">IRuleBuilderOptions</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;</span> <span class="n">CountryIsoCode</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span>
        <span class="k">this</span> <span class="n">IRuleBuilder</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;</span> <span class="n">rule</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">rule</span><span class="p">.</span><span class="nf">SetValidator</span><span class="p">(</span><span class="k">new</span> <span class="nf">CountryIsoCodeValidator</span><span class="p">());</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><code class="highlighter-rouge">CountryCode</code> validator was easy, what about <code class="highlighter-rouge">PhoneNumber</code> validator?
Here the only challenge that we must solve 
is finding a way to pass country ISO code from <code class="highlighter-rouge">Address</code> to 
phone number validator.
To solve this problem I decided to use “advanced” FluentValidation
feature called “Root Context Data”. Basically this is a 
<code class="highlighter-rouge">IDictionary&lt;string, object&gt;</code> that can be prefilled with custom data
before validation starts and then is accessible to every validator
in validators tree.</p>

<p>Let’s take a look at an example from 
<a href="https://fluentvalidation.net/start#root-context-data">official documentation</a>:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">var</span> <span class="n">instanceToValidate</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Person</span><span class="p">();</span>

<span class="n">var</span> <span class="n">context</span> <span class="p">=</span> <span class="k">new</span> <span class="n">ValidationContext</span><span class="p">&lt;</span><span class="n">Person</span><span class="p">&gt;(</span><span class="n">person</span><span class="p">);</span>
<span class="n">context</span><span class="p">.</span><span class="n">RootContextData</span><span class="p">[</span><span class="s">"MyCustomData"</span><span class="p">]</span> <span class="p">=</span> <span class="s">"Test"</span><span class="p">;</span>

<span class="n">var</span> <span class="n">validator</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">PersonValidator</span><span class="p">();</span>
<span class="n">validator</span><span class="p">.</span><span class="nf">Validate</span><span class="p">(</span><span class="n">context</span><span class="p">);</span>

<span class="c1">// usage inside validator:
</span><span class="nf">RuleFor</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Surname</span><span class="p">).</span><span class="nf">Custom</span><span class="p">((</span><span class="n">x</span><span class="p">,</span> <span class="n">context</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
  <span class="k">if</span><span class="p">(</span><span class="n">context</span><span class="p">.</span><span class="n">ParentContext</span><span class="p">.</span><span class="n">RootContextData</span><span class="p">.</span><span class="nf">ContainsKey</span><span class="p">(</span><span class="s">"MyCustomData"</span><span class="p">))</span> <span class="p">{</span>
    <span class="n">context</span><span class="p">.</span><span class="nf">AddFailure</span><span class="p">(</span><span class="s">"My error message"</span><span class="p">);</span>
  <span class="p">}</span>
<span class="p">});</span></code></pre></figure>

<p>Looks very promising, and what’s better we can add values to <code class="highlighter-rouge">RootContextData</code>
straight inside top-level validators by overriding <code class="highlighter-rouge">PreValidate</code> method:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">SampleRequestDtoValidator</span> <span class="p">:</span> <span class="n">AbstractValidator</span><span class="p">&lt;</span><span class="n">SampleRequestDto</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="k">public</span>  <span class="nf">SampleRequestDtoValidator</span><span class="p">()</span> <span class="p">{</span>
        <span class="nf">RuleFor</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">Address</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">SetValidator</span><span class="p">(</span><span class="k">new</span> <span class="nf">AddressDtoValidator</span><span class="p">());</span>

        <span class="nf">RuleFor</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">ContactInfo</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">SetValidator</span><span class="p">(</span><span class="k">new</span> <span class="nf">ContactInfoDtoValidator</span><span class="p">());</span>
    <span class="p">}</span>

    <span class="k">protected</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">PreValidate</span><span class="p">(</span>
        <span class="n">ValidationContext</span><span class="p">&lt;</span><span class="n">SampleRequestDto</span><span class="p">&gt;</span> <span class="n">context</span><span class="p">,</span> <span class="n">ValidationResult</span> <span class="n">result</span><span class="p">)</span> 
    <span class="p">{</span>
        <span class="n">var</span> <span class="n">contextData</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ValidationContextData</span><span class="p">(</span>
            <span class="n">context</span><span class="p">.</span><span class="n">RootContextData</span><span class="p">);</span>

        <span class="n">contextData</span><span class="p">.</span><span class="n">CountryIsoCode</span> <span class="p">=</span> 
            <span class="n">context</span><span class="p">.</span><span class="n">InstanceToValidate</span><span class="p">?.</span><span class="n">Address</span><span class="p">?.</span><span class="n">CountryIsoCode</span><span class="p">;</span>

        <span class="k">return</span> <span class="k">true</span><span class="p">;</span> <span class="c1">// continue validation
</span>    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>To avoid dealing with <code class="highlighter-rouge">object</code>s I have also created a strongly typed
wrapper (<code class="highlighter-rouge">ValidationContextData</code> class) around <code class="highlighter-rouge">RootContextData</code>
dictionary.</p>

<p>IMPORTANT: To make validators reusable you should set <code class="highlighter-rouge">RootContextData</code> only
in top level validators. Validators used with <code class="highlighter-rouge">SetValidator</code>
method are not considered top level.</p>

<p>Now implementing <code class="highlighter-rouge">PhoneNumberValidator</code> is easy:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">PhoneNumberValidator</span> <span class="p">:</span> <span class="n">PropertyValidator</span> <span class="p">{</span>
    <span class="k">public</span> <span class="nf">PhoneNumberValidator</span><span class="p">()</span> 
        <span class="p">:</span> <span class="k">base</span><span class="p">(</span><span class="s">"'{PropertyValue}' is not a valid phone number in {Country}."</span><span class="p">)</span> <span class="p">{</span> <span class="p">}</span>

    <span class="k">protected</span> <span class="k">override</span> <span class="kt">bool</span> <span class="nf">IsValid</span><span class="p">(</span><span class="n">PropertyValidatorContext</span> <span class="n">context</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">var</span> <span class="n">phoneNumber</span> <span class="p">=</span> <span class="p">(</span><span class="kt">string</span><span class="p">)</span> <span class="n">context</span><span class="p">.</span><span class="n">PropertyValue</span><span class="p">;</span>
        <span class="k">if</span> <span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="nf">IsNullOrEmpty</span><span class="p">(</span><span class="n">phoneNumber</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">var</span> <span class="n">contextData</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ValidationContextData</span><span class="p">(</span>
            <span class="n">context</span><span class="p">.</span><span class="n">ParentContext</span><span class="p">.</span><span class="n">RootContextData</span><span class="p">);</span>

        <span class="n">var</span> <span class="n">country</span> <span class="p">=</span> <span class="nf">TryFindCountry</span><span class="p">(</span><span class="n">contextData</span><span class="p">.</span><span class="n">CountryIsoCode</span><span class="p">);</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">country</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
            <span class="c1">// without a country we cannot validate a phone number
</span>            <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="n">context</span><span class="p">.</span><span class="n">MessageFormatter</span><span class="p">.</span><span class="nf">AppendArgument</span><span class="p">(</span><span class="s">"Country"</span><span class="p">,</span> <span class="n">country</span><span class="p">.</span><span class="n">Name</span><span class="p">);</span>

        <span class="k">return</span> <span class="n">country</span><span class="p">.</span><span class="n">PhoneNumberFormat</span><span class="p">.</span><span class="nf">Matches</span><span class="p">(</span><span class="n">phoneNumber</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">private</span> <span class="n">Country</span> <span class="nf">TryFindCountry</span><span class="p">(</span><span class="kt">string</span> <span class="n">countryIsoCode</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="kt">string</span><span class="p">.</span><span class="nf">IsNullOrEmpty</span><span class="p">(</span><span class="n">countryIsoCode</span><span class="p">))</span> <span class="p">{</span>
            <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
        <span class="p">}</span>

        <span class="k">return</span> <span class="n">Countries</span><span class="p">.</span><span class="nf">FindCountryByIsoCode</span><span class="p">(</span><span class="n">countryIsoCode</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">PhoneNumberValidatorExtension</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="n">IRuleBuilderOptions</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;</span> <span class="n">PhoneNumber</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span>
        <span class="k">this</span> <span class="n">IRuleBuilder</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;</span> <span class="n">rule</span>
    <span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">rule</span><span class="p">.</span><span class="nf">SetValidator</span><span class="p">(</span><span class="k">new</span> <span class="nf">PhoneNumberValidator</span><span class="p">());</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>And we are done!</p>

<h4 id="unit-testing-validators">Unit-testing validators</h4>

<p>FluentValidation provides several extension methods that
make unit-testing easy, just take a look:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">using</span> <span class="nn">FluentValidation.TestHelper</span><span class="p">;</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">SampleRequestDtoValidatorTest</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">SampleRequestDtoValidator</span> <span class="n">_validator</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">SampleRequestDtoValidatorTest</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">_validator</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">SampleRequestDtoValidator</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">Fact</span><span class="p">]</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">Should_return_error_when_phone_number_is_invalid_and_countryIsoCode_is_set</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Arrange
</span>        <span class="n">var</span> <span class="n">invalidRequest</span> <span class="p">=</span> 
            <span class="n">SampleRequestDtoFixture</span><span class="p">.</span><span class="nf">CreateValidRequest</span><span class="p">();</span>
        <span class="n">invalidRequest</span><span class="p">.</span><span class="n">Address</span><span class="p">.</span><span class="n">CountryIsoCode</span> <span class="p">=</span> <span class="s">"PL"</span><span class="p">;</span>
        <span class="n">invalidRequest</span><span class="p">.</span><span class="n">ContactInfo</span><span class="p">.</span><span class="n">PhoneNumber</span> <span class="p">=</span> <span class="s">"+48 123"</span><span class="p">;</span>

        <span class="c1">// Assert
</span>        <span class="n">_validator</span>
            <span class="p">.</span><span class="nf">ShouldHaveValidationErrorFor</span><span class="p">(</span>
                <span class="n">x</span> <span class="p">=&gt;</span> <span class="n">x</span><span class="p">.</span><span class="n">ContactInfo</span><span class="p">.</span><span class="n">PhoneNumber</span><span class="p">,</span> <span class="n">invalidRequest</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">WithErrorMessage</span><span class="p">(</span>
                <span class="s">"'+48 123' is not a valid phone number in Poland."</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<h4 id="design-considerations">Design considerations</h4>

<p>Everything works right now, but there is still place for improvement.
For example what happens when a programmer forgets to
override <code class="highlighter-rouge">PreValidate</code> method and set all required properties?
Validation of certain properties will be silently skipped.
This is not good.
To minimize this problem I put additional checks inside <code class="highlighter-rouge">ValidationContextData</code>
class. They will throw an exception with a descriptive message if
validator tries to access a property that was not previously set.</p>

<p>In my application values like phone numbers are always validated against
country specific formats. But I can imaging situations where
sometimes we use country agnostic phone number validator and
sometimes 
we use country specific one. In such cases it would be good
to call the country agnostic validator just a <code class="highlighter-rouge">PhoneNumberValidator</code> and
the country specific validator a <code class="highlighter-rouge">CountryDependentPhoneNumberValidator</code>.</p>

<p>I have a mixed feelings about <code class="highlighter-rouge">ValidationContextData</code> class because
it is used by every country specific validator in my code. Maybe 
instead of introducing this common dependency every validator should
access <code class="highlighter-rouge">RootContextData</code> and check if the property is set itself?</p>

<p>Sample source code: <a href="https://github.com/marcin-chwedczuk/blog-fluent-validation-adventure">GitHub</a>.</p>


	  ]]></description>
	</item>

	<item>
	  <title>You can live without mocking frameworks</title>
	  <link>//you-can-live-without-your-mocking-framework</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2018-09-08T02:00:00+02:00</pubDate>
	  <guid>//you-can-live-without-your-mocking-framework</guid>
	  <description><![CDATA[
	     <p>For a long time I have been fan of mocking frameworks like 
<a href="https://github.com/Moq/moq4/wiki/Quickstart">Moq</a>
and <a href="http://nsubstitute.github.io">NSubstitute</a>.
These libraries seems indispensable while unit-testing.
They allow us to easily generate subs and mocks and assert that
certain interaction between components took place.</p>

<p>NOTE: If you do not remember difference between stub and mock
please read <a href="https://martinfowler.com/articles/mocksArentStubs.html">this Martin Fowler article</a>. 
In short mocks are used to test interactions between components 
(a method was called, a property was set) 
while stubs are used as dumb implementations of component dependencies 
(they usually either do nothing or provide some preset data).</p>

<p>But recently, after reading volume 1 of 
<a href="https://www.yegor256.com/elegant-objects.html">Elegant Objects</a>
which by the way I strongly recommend, I changed my mind.
In one of the chapters author presents the idea that every interface
should have an associated fake object. A fake object is a simple
but <em>working</em> implementation of an interface and resides in the same
source code file as the interface itself.
Fake objects serve two purposes. First, they are example implementations
of interfaces that show users how the interfaces should be implemented.
And second they can be used as stubs and mocks in unit-tests.</p>

<p>Of course this idea seemed a bit extreme to me, so I decided to go with
a bit more evolutionary approach.
I <strong>slowly</strong> replaced all mock object that I had in my unit-tests 
with fakes (I put all fakes in my unit test projects - but I am still thinking that maybe they deserve a project of their own). 
During this process all interaction testing assertions 
that are usually performed using mocking frameworks
were replaced by behaviour testing assertions on fake objects.</p>

<p>It will be the best to illustrate this process using an example.
Say we have a simple component <code class="highlighter-rouge">EventPublishingComponent</code> that
publishes two events (order is not important):</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">EventPublishingComponent</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">EventPublisher</span> <span class="n">_eventPublisher</span><span class="p">;</span>
    <span class="k">public</span> <span class="nf">EventPublishingComponent</span><span class="p">(</span><span class="n">EventPublisher</span> <span class="n">eventPublisher</span><span class="p">)</span>
        <span class="p">=&gt;</span> <span class="n">_eventPublisher</span> <span class="p">=</span> <span class="n">eventPublisher</span><span class="p">;</span>

    <span class="k">public</span> <span class="n">async</span> <span class="n">Task</span> <span class="nf">Publish</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">await</span> <span class="n">_eventPublisher</span><span class="p">.</span><span class="nf">Publish</span><span class="p">(</span><span class="k">new</span> <span class="nf">FirstEvent</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="m">3</span><span class="p">));</span>
        <span class="n">await</span> <span class="n">_eventPublisher</span><span class="p">.</span><span class="nf">Publish</span><span class="p">(</span>
          <span class="k">new</span> <span class="nf">SecondEvent</span><span class="p">(</span><span class="n">id</span><span class="p">:</span> <span class="s">"ZDKA9JOPCKXI7"</span><span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">FirstEvent</span> <span class="p">:</span> <span class="n">Event</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="nf">FirstEvent</span><span class="p">(</span><span class="kt">int</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">=&gt;</span> <span class="n">Id</span> <span class="p">=</span> <span class="n">id</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">SecondEvent</span> <span class="p">:</span> <span class="n">Event</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Id</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="nf">SecondEvent</span><span class="p">(</span><span class="kt">string</span> <span class="n">id</span><span class="p">)</span>
        <span class="p">=&gt;</span> <span class="n">Id</span> <span class="p">=</span> <span class="n">id</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">interface</span> <span class="n">EventPublisher</span> <span class="p">{</span>
    <span class="n">Task</span> <span class="nf">Publish</span><span class="p">(</span><span class="n">Event</span> <span class="n">@event</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">interface</span> <span class="n">Event</span> <span class="p">{</span> <span class="p">}</span></code></pre></figure>

<p>A “classic” unit test for this component using NSubstitute 
could look like this:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">EventPublishingComponentTest</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">EventPublisher</span> <span class="n">_eventPublisher</span><span class="p">;</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">EventPublishingComponent</span> <span class="n">_component</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">EventPublishingComponentTest</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">_eventPublisher</span> <span class="p">=</span> <span class="n">Substitute</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">EventPublisher</span><span class="p">&gt;();</span>
        <span class="n">_component</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">EventPublishingComponent</span><span class="p">(</span><span class="n">_eventPublisher</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">Fact</span><span class="p">]</span>
    <span class="k">public</span> <span class="n">async</span> <span class="n">Task</span> <span class="nf">Should_publish_FirstEvent</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Arrange
</span>        <span class="n">FirstEvent</span> <span class="n">firstEvent</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
        <span class="n">await</span> <span class="n">_eventPublisher</span>
            <span class="p">.</span><span class="nf">Publish</span><span class="p">(</span><span class="n">Arg</span><span class="p">.</span><span class="n">Do</span><span class="p">&lt;</span><span class="n">FirstEvent</span><span class="p">&gt;(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">firstEvent</span> <span class="p">=</span> <span class="n">e</span><span class="p">));</span>

        <span class="c1">// Act
</span>        <span class="n">await</span> <span class="n">_component</span><span class="p">.</span><span class="nf">Publish</span><span class="p">();</span>

        <span class="c1">// Assert
</span>        <span class="n">await</span> <span class="n">_eventPublisher</span><span class="p">.</span><span class="nf">Received</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">Publish</span><span class="p">(</span><span class="n">Arg</span><span class="p">.</span><span class="n">Any</span><span class="p">&lt;</span><span class="n">FirstEvent</span><span class="p">&gt;());</span>

        <span class="n">Check</span><span class="p">.</span><span class="nf">That</span><span class="p">(</span><span class="n">firstEvent</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">IsNotNull</span><span class="p">();</span>

        <span class="n">Check</span><span class="p">.</span><span class="nf">That</span><span class="p">(</span><span class="n">firstEvent</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">IsNotZero</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>I am sure you have seen a lot of tests like this. 
The key points are: Your create mocks and stubs using your
favourite mocking library in the test constructor or setup method.
In the arrange (given) part of the test you define mocks and stubs
behaviour using library specific syntax. Here e.g. we are capturing
argument passed to <code class="highlighter-rouge">Publish</code> method for later use:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">FirstEvent</span> <span class="n">firstEvent</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
<span class="n">await</span> <span class="n">_eventPublisher</span>
    <span class="p">.</span><span class="nf">Publish</span><span class="p">(</span><span class="n">Arg</span><span class="p">.</span><span class="n">Do</span><span class="p">&lt;</span><span class="n">FirstEvent</span><span class="p">&gt;(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">firstEvent</span> <span class="p">=</span> <span class="n">e</span><span class="p">));</span></code></pre></figure>

<p>In the assert (then) part of the test we use again library specific
syntax to check that a method on a mock 
was called with given set of arguments.</p>

<p>This approach is fine but it has some disadvantages:</p>

<ol>
  <li>
    <p>It makes your tests very brittle. For example if I add a new method
 on <code class="highlighter-rouge">EventPublisher</code> called 
 <code class="highlighter-rouge">PublishAll(events)</code> that allows me to publish all events at once and
 refactor <code class="highlighter-rouge">EventPublishingComponent</code> to use it
 then <code class="highlighter-rouge">EventPublishingComponent</code> tests would stop working.
 The main problem here is that my tests check internal interaction
 between components 
 (was method <code class="highlighter-rouge">Publish</code> called?) instead of checking external behaviour 
 of the system (was event published?).</p>
  </li>
  <li>
    <p>Mocking library is another tool that you must learn. 
 And please remember that most of the developers are not too eager to
 read documentation. Time presumably saved by using mocking library 
 will be lost on reading StackOverflow answers and on fighting with
 the library itself 
 (ever have a problem that your stub does not return intended value?).</p>
  </li>
  <li>
    <p>It makes your tests less readable. I must admit that 
 NSubstitute is a huge improvement over Moq in terms
 of readability but it still introduces a lot of visual noise in the test
 code. For example do see all 
 those <code class="highlighter-rouge">&lt;</code>, <code class="highlighter-rouge">&gt;</code>, <code class="highlighter-rouge">(</code> and <code class="highlighter-rouge">)</code> in the code below:</p>
  </li>
</ol>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">FirstEvent</span> <span class="n">firstEvent</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
<span class="n">await</span> <span class="n">_eventPublisher</span>
    <span class="p">.</span><span class="nf">Publish</span><span class="p">(</span><span class="n">Arg</span><span class="p">.</span><span class="n">Do</span><span class="p">&lt;</span><span class="n">FirstEvent</span><span class="p">&gt;(</span><span class="n">e</span> <span class="p">=&gt;</span> <span class="n">firstEvent</span> <span class="p">=</span> <span class="n">e</span><span class="p">));</span></code></pre></figure>

<p>Now let us see how our test can look like if we use fakes instead:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">EventPublishingComponentTest_UsingFakes</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">InMemoryEventPublisher</span> <span class="n">_eventPublisher</span><span class="p">;</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">EventPublishingComponent</span> <span class="n">_component</span><span class="p">;</span>

    <span class="k">public</span> <span class="nf">EventPublishingComponentTest_UsingFakes</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">_eventPublisher</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">InMemoryEventPublisher</span><span class="p">();</span>
        <span class="n">_component</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">EventPublishingComponent</span><span class="p">(</span><span class="n">_eventPublisher</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="p">[</span><span class="n">Fact</span><span class="p">]</span>
    <span class="k">public</span> <span class="n">async</span> <span class="n">Task</span> <span class="nf">Should_publish_FirstEvent</span><span class="p">()</span> <span class="p">{</span>
        <span class="c1">// Act
</span>        <span class="n">await</span> <span class="n">_component</span><span class="p">.</span><span class="nf">Publish</span><span class="p">();</span>

        <span class="c1">// Assert
</span>        <span class="n">var</span> <span class="n">firstEvent</span> <span class="p">=</span> <span class="n">_eventPublisher</span><span class="p">.</span><span class="n">PublishedEvents</span>
            <span class="p">.</span><span class="n">OfType</span><span class="p">&lt;</span><span class="n">FirstEvent</span><span class="p">&gt;()</span>
            <span class="p">.</span><span class="nf">SingleOrDefault</span><span class="p">();</span>

        <span class="n">Check</span><span class="p">.</span><span class="nf">That</span><span class="p">(</span><span class="n">firstEvent</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">IsNotNull</span><span class="p">();</span>

        <span class="n">Check</span><span class="p">.</span><span class="nf">That</span><span class="p">(</span><span class="n">firstEvent</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">IsNotZero</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>To make this test compile we also need to write a fake for 
<code class="highlighter-rouge">EventPublisher</code> interface. Please keep in mind that fake is a simple
but <strong>working</strong> implementation of the interface:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">InMemoryEventPublisher</span> <span class="p">:</span> <span class="n">EventPublisher</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Event</span><span class="p">&gt;</span> <span class="n">_publishedEvents</span> 
      <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">Event</span><span class="p">&gt;();</span>

    <span class="k">public</span> <span class="n">IReadOnlyList</span><span class="p">&lt;</span><span class="n">Event</span><span class="p">&gt;</span> <span class="n">PublishedEvents</span>
        <span class="p">=&gt;</span> <span class="n">_publishedEvents</span><span class="p">;</span>

    <span class="k">public</span> <span class="n">Task</span> <span class="nf">Publish</span><span class="p">(</span><span class="n">Event</span> <span class="n">@event</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">@event</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentNullException</span><span class="p">(</span><span class="nf">nameof</span><span class="p">(</span><span class="n">@event</span><span class="p">));</span>

        <span class="n">_publishedEvents</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">@event</span><span class="p">);</span>
        <span class="k">return</span> <span class="n">Task</span><span class="p">.</span><span class="n">CompletedTask</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>I am sure that after seeing both versions of the test 
you agree with me that both are quite short and readable,
yet the second version does not have the earlier mentioned disadvantages.
Now you may rightly say that with the second approach 
you are forced to create fakes for
almost all interfaces in your application. You are right, but
you actually want to create fakes. Here is why:</p>

<ol>
  <li>
    <p>Fakes are like TDD for your interface <strong>design</strong>. By creating a fake
 you actually check how difficult it is for a client 
 of your API to provide an implementation. A fake too big or 
 too difficult to
 implement is a sign that maybe your interface is doing too much.
 Also fakes can be treated as “reference implementations” of interfaces
 and as such they are part of your API documentation.</p>
  </li>
  <li>
    <p>Writing a fake is a one-time effort. After fake is written it can
 be reused across many tests. Compare this with subs and mocks that you
 need to setup every time you want to use them.</p>
  </li>
</ol>

<p>Now it is time for a more real world example. 
As you probably heard <em>Performance is a feature</em> but logging can 
also be a feature. Imagine an application where we must log
every failed login attempt. Since this is a business requirement
we want to code it as an acceptance test.
How difficult it can be to check that one method call was
performed:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">logger</span><span class="p">.</span><span class="nf">LogDebug</span><span class="p">(</span><span class="s">"User '{userName}' log into application."</span><span class="p">,</span> <span class="s">"root"</span><span class="p">);</span></code></pre></figure>

<p>In practice it can be more difficult than it seems especially if you use
notoriously hard to test <code class="highlighter-rouge">ILogger</code> from <code class="highlighter-rouge">Microsoft.Extensions.Logging.Abstractions</code> package.</p>

<p>Why is <code class="highlighter-rouge">ILogger</code> hard to test?</p>

<ol>
  <li>
    <p><code class="highlighter-rouge">ILogger</code> interface contains only three methods 
 (<a href="https://github.com/aspnet/Logging/blob/master/src/Microsoft.Extensions.Logging.Abstractions/ILogger.cs">source code here</a>)
 rest of its functionality is provided via extension methods.</p>
  </li>
  <li>
    <p>Extension methods that operate on <code class="highlighter-rouge">ILogger</code> often 
 create wrappers around original 
 arguments using classes like <code class="highlighter-rouge">FormattedLogValues</code>.
 Most of these wrapper classes does not 
 overload <code class="highlighter-rouge">Equals</code> and <code class="highlighter-rouge">GetHashCode</code> rendering
 argument matchers from mocking frameworks useless.</p>
  </li>
  <li>
    <p>No easy access to the logged message.
 Only method responsible for actual logging on <code class="highlighter-rouge">ILogger</code> interface
 is <code class="highlighter-rouge">Log</code>:</p>
  </li>
</ol>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">void</span> <span class="n">Log</span><span class="p">&lt;</span><span class="n">TState</span><span class="p">&gt;(</span>
  <span class="n">LogLevel</span> <span class="n">logLevel</span><span class="p">,</span> 
  <span class="n">EventId</span> <span class="n">eventId</span><span class="p">,</span> 
  <span class="n">TState</span> <span class="n">state</span><span class="p">,</span> 
  <span class="n">Exception</span> <span class="n">exception</span><span class="p">,</span> 
  <span class="n">Func</span><span class="p">&lt;</span><span class="n">TState</span><span class="p">,</span> <span class="n">Exception</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;</span> <span class="n">formatter</span><span class="p">);</span></code></pre></figure>

<p>To gain access to the logged message we must either dig 
into <code class="highlighter-rouge">state</code> argument
or call <code class="highlighter-rouge">formatter(state, exception)</code>.</p>

<p>All this causes that naive testing aproachs like this fail:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="na">[Fact]</span>
<span class="k">public</span> <span class="n">async</span> <span class="n">Task</span> <span class="nf">Naive_test</span><span class="p">()</span> <span class="p">{</span>
  <span class="n">var</span> <span class="n">logger</span> <span class="p">=</span> <span class="n">Substitute</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">ILogger</span><span class="p">&lt;</span><span class="n">SomeClass</span><span class="p">&gt;&gt;();</span>
      
  <span class="n">logger</span>
    <span class="p">.</span><span class="nf">LogDebug</span><span class="p">(</span><span class="s">"User '{userName}' log into application."</span><span class="p">,</span> <span class="s">"root"</span><span class="p">);</span>

  <span class="n">logger</span><span class="p">.</span><span class="nf">Received</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">LogDebug</span><span class="p">(</span><span class="s">"User '{userName}' log into application."</span><span class="p">,</span> <span class="s">"root"</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>And how they fail? With confusing error messages like this one:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">Error Message:
 NSubstitute.Exceptions.ReceivedCallsException : 
  Expected to receive a call matching:
  Log&lt;Object&gt;(Debug, 0, User 'root' log into application., &lt;null&gt;, Func&lt;Object, Exception, String&gt;)
Actually received no matching calls.
Received 1 non-matching call 
 (non-matching arguments indicated with '*' characters):
  Log&lt;Object&gt;(Debug, 0, *User 'root' log into application.*, &lt;null&gt;, Func&lt;Object, Exception, String&gt;)</code></pre></figure>

<p>Not very helpful, isn’t it?</p>

<p>If you really want to test <code class="highlighter-rouge">ILogger</code> using NSubstitute you must
use the following code:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">var</span> <span class="n">logger</span> <span class="p">=</span> <span class="n">Substitute</span><span class="p">.</span><span class="n">For</span><span class="p">&lt;</span><span class="n">ILogger</span><span class="p">&lt;</span><span class="n">SomeClass</span><span class="p">&gt;&gt;();</span>

<span class="n">dynamic</span> <span class="n">state</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>
<span class="n">Exception</span> <span class="n">exception</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span> 
<span class="n">Func</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">,</span> <span class="n">Exception</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;</span> <span class="n">formatter</span> <span class="p">=</span> <span class="k">null</span><span class="p">;</span>

<span class="n">logger</span><span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="n">LogLevel</span><span class="p">.</span><span class="n">Debug</span><span class="p">,</span> 
  <span class="n">Arg</span><span class="p">.</span><span class="n">Any</span><span class="p">&lt;</span><span class="n">EventId</span><span class="p">&gt;(),</span> 
  <span class="n">Arg</span><span class="p">.</span><span class="n">Do</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;(</span><span class="n">s</span> <span class="p">=&gt;</span> <span class="n">state</span> <span class="p">=</span> <span class="n">s</span><span class="p">),</span> 
  <span class="n">Arg</span><span class="p">.</span><span class="n">Do</span><span class="p">&lt;</span><span class="n">Exception</span><span class="p">&gt;(</span><span class="n">ex</span> <span class="p">=&gt;</span> <span class="n">exception</span> <span class="p">=</span> <span class="n">ex</span><span class="p">),</span> 
  <span class="n">Arg</span><span class="p">.</span><span class="n">Do</span><span class="p">&lt;</span><span class="n">Func</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">,</span> <span class="n">Exception</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;&gt;(</span><span class="n">f</span> <span class="p">=&gt;</span> <span class="n">formatter</span> <span class="p">=</span> <span class="n">f</span><span class="p">));</span>

<span class="n">logger</span>
  <span class="p">.</span><span class="nf">LogDebug</span><span class="p">(</span><span class="s">"User '{userName}' log into application."</span><span class="p">,</span> <span class="s">"root"</span><span class="p">);</span>

<span class="n">logger</span><span class="p">.</span><span class="nf">Received</span><span class="p">(</span><span class="m">1</span><span class="p">)</span>
  <span class="p">.</span><span class="nf">Log</span><span class="p">(</span><span class="n">LogLevel</span><span class="p">.</span><span class="n">Debug</span><span class="p">,</span> 
      <span class="n">Arg</span><span class="p">.</span><span class="n">Any</span><span class="p">&lt;</span><span class="n">EventId</span><span class="p">&gt;(),</span> 
      <span class="n">Arg</span><span class="p">.</span><span class="n">Any</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">&gt;(),</span> 
      <span class="n">Arg</span><span class="p">.</span><span class="n">Any</span><span class="p">&lt;</span><span class="n">Exception</span><span class="p">&gt;(),</span> 
      <span class="n">Arg</span><span class="p">.</span><span class="n">Any</span><span class="p">&lt;</span><span class="n">Func</span><span class="p">&lt;</span><span class="kt">object</span><span class="p">,</span> <span class="n">Exception</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;&gt;());</span>

<span class="n">Check</span><span class="p">.</span><span class="nf">That</span><span class="p">(</span><span class="nf">formatter</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">exception</span><span class="p">))</span>
    <span class="p">.</span><span class="nf">IsEqualIgnoringCase</span><span class="p">(</span><span class="s">"User 'root' log into application."</span><span class="p">);</span></code></pre></figure>

<p>Did I say something earlier about unreadable tests and a lot of 
visual noise caused by mocking frameworks? Now you can see it with your
own eyes!</p>

<p>Now it is time for our second approach using fakes. First we create
a fake logger:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">InMemoryListOfEntriesLogger</span> <span class="p">:</span> <span class="n">ILogger</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">LogEntry</span><span class="p">&gt;</span> <span class="n">_loggedEntries</span> 
      <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">LogEntry</span><span class="p">&gt;();</span>

    <span class="k">private</span> <span class="k">readonly</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">int</span><span class="p">&gt;</span> <span class="n">_bookmarks</span> 
      <span class="p">=</span> <span class="k">new</span> <span class="n">Dictionary</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">,</span> <span class="kt">int</span><span class="p">&gt;();</span>

    <span class="k">public</span> <span class="n">IReadOnlyList</span><span class="p">&lt;</span><span class="n">LogEntry</span><span class="p">&gt;</span> <span class="n">LoggedEntries</span> 
        <span class="p">=&gt;</span> <span class="n">_loggedEntries</span><span class="p">;</span>

    <span class="k">public</span> <span class="n">IDisposable</span> <span class="n">BeginScope</span><span class="p">&lt;</span><span class="n">TState</span><span class="p">&gt;(</span><span class="n">TState</span> <span class="n">state</span><span class="p">)</span> <span class="p">{</span>
        <span class="c1">// Notice that we do not have to implement
</span>        <span class="c1">// all methods for interfaces that are *not
</span>        <span class="c1">// part* of our application.
</span>        <span class="k">throw</span> <span class="k">new</span> <span class="nf">NotImplementedException</span><span class="p">();</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="kt">bool</span> <span class="nf">IsEnabled</span><span class="p">(</span><span class="n">LogLevel</span> <span class="n">logLevel</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">true</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">void</span> <span class="n">Log</span><span class="p">&lt;</span><span class="n">TState</span><span class="p">&gt;(</span>
        <span class="n">LogLevel</span> <span class="n">logLevel</span><span class="p">,</span> 
        <span class="n">EventId</span> <span class="n">eventId</span><span class="p">,</span> 
        <span class="n">TState</span> <span class="n">state</span><span class="p">,</span> 
        <span class="n">Exception</span> <span class="n">exception</span><span class="p">,</span> 
        <span class="n">Func</span><span class="p">&lt;</span><span class="n">TState</span><span class="p">,</span> <span class="n">Exception</span><span class="p">,</span> <span class="kt">string</span><span class="p">&gt;</span> <span class="n">formatter</span><span class="p">)</span> 
    <span class="p">{</span>
        <span class="n">_loggedEntries</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span>
          <span class="k">new</span> <span class="nf">LogEntry</span><span class="p">(</span>
            <span class="n">logLevel</span><span class="p">,</span> 
            <span class="nf">formatter</span><span class="p">(</span><span class="n">state</span><span class="p">,</span> <span class="n">exception</span><span class="p">),</span> 
            <span class="n">exception</span><span class="p">));</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">LogEntry</span> <span class="p">{</span>
  <span class="k">public</span> <span class="n">LogLevel</span> <span class="n">LogLevel</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
  <span class="k">public</span> <span class="kt">string</span> <span class="n">Message</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
  <span class="k">public</span> <span class="n">Exception</span> <span class="n">Exception</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

  <span class="k">public</span> <span class="nf">LogEntry</span><span class="p">(</span><span class="n">LogLevel</span> <span class="n">logLevel</span><span class="p">,</span> <span class="kt">string</span> <span class="n">message</span><span class="p">,</span> 
    <span class="n">Exception</span> <span class="n">ex</span> <span class="p">=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
      <span class="n">LogLevel</span> <span class="p">=</span> <span class="n">logLevel</span><span class="p">;</span>
      <span class="n">Message</span> <span class="p">=</span> <span class="n">message</span><span class="p">;</span>
      <span class="n">Exception</span> <span class="p">=</span> <span class="n">ex</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="k">public</span> <span class="k">override</span> <span class="kt">string</span> <span class="nf">ToString</span><span class="p">()</span>
      <span class="p">=&gt;</span> <span class="err">$</span><span class="s">"{LogLevel}: {Message}"</span> <span class="p">+</span> 
         <span class="p">(</span><span class="n">Exception</span> <span class="p">!=</span> <span class="k">null</span> 
            <span class="p">?</span> <span class="err">$</span><span class="s">" Exception: {Exception.GetType().Name}"</span> 
            <span class="p">:</span> <span class="s">""</span><span class="p">)</span> <span class="p">+</span>
         <span class="s">"."</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>Notice that we did not implement all methods of <code class="highlighter-rouge">ILogger</code> interface.
For external interfaces that are not under our control we should
implement just enough functionality in our fakes to make them usable.</p>

<p>Now it is time for writing actual test:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">var</span> <span class="n">logger</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">InMemoryListOfEntriesLogger</span><span class="p">();</span>

<span class="n">logger</span><span class="p">.</span><span class="nf">LogDebug</span><span class="p">(</span><span class="s">"User '{userName}' log into application."</span><span class="p">,</span> <span class="s">"root"</span><span class="p">);</span>

<span class="n">Check</span><span class="p">.</span><span class="nf">That</span><span class="p">(</span><span class="n">logger</span><span class="p">.</span><span class="n">LoggedEntries</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">HasElementThatMatches</span><span class="p">(</span><span class="n">x</span> <span class="p">=&gt;</span> 
        <span class="n">x</span><span class="p">.</span><span class="n">Level</span> <span class="p">==</span> <span class="n">LogLevel</span><span class="p">.</span><span class="n">Debug</span> <span class="p">&amp;&amp;</span>
        <span class="n">x</span><span class="p">.</span><span class="n">Message</span> <span class="p">==</span> <span class="s">"User 'root' log into application."</span><span class="p">);</span></code></pre></figure>

<p>Wow! Test is short, readable and simple. Exactly what I was looking for.</p>

<p>I hope that this blog post persuaded you to start using fakes in your
unit tests. At least you now know that you have a good alternative to
mocking frameworks.</p>

<p>Sample source code (with a bit more complicated example): 
<a href="https://github.com/marcin-chwedczuk/blog-fakes-vs-mocks">GitHub</a>.</p>


	  ]]></description>
	</item>

	<item>
	  <title>How NOT to use the repository pattern</title>
	  <link>//repository-pattern-my-way</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2018-07-08T02:00:00+02:00</pubDate>
	  <guid>//repository-pattern-my-way</guid>
	  <description><![CDATA[
	     <h3 id="generic-repository-pattern">Generic repository pattern</h3>

<p>First, to avoid misunderstandings, let me explain what I understand
by generic repository. Have your ever seen an interface like this:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">interface</span> <span class="n">IGenericRepository</span><span class="p">&lt;</span><span class="n">TEntity</span><span class="p">&gt;</span> 
    <span class="n">where</span> <span class="n">TEntity</span> <span class="p">:</span> <span class="k">class</span> 
<span class="err">{</span>
    <span class="nc">IEnumerable</span><span class="p">&lt;</span><span class="n">TEntity</span><span class="p">&gt;</span> <span class="nf">Get</span><span class="p">(</span>
        <span class="n">Expression</span><span class="p">&lt;</span><span class="n">Func</span><span class="p">&lt;</span><span class="n">TEntity</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;&gt;</span> <span class="n">filter</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
        <span class="n">Func</span><span class="p">&lt;</span><span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">TEntity</span><span class="p">&gt;,</span> <span class="n">IOrderedQueryable</span><span class="p">&lt;</span><span class="n">TEntity</span><span class="p">&gt;&gt;</span> <span class="n">orderBy</span> <span class="p">=</span> <span class="k">null</span><span class="p">,</span>
        <span class="kt">string</span> <span class="n">includeProperties</span> <span class="p">=</span> <span class="s">""</span><span class="p">);</span>
    <span class="n">TEntity</span> <span class="nf">GetById</span><span class="p">(</span><span class="kt">object</span> <span class="n">id</span><span class="p">);</span>

    <span class="k">void</span> <span class="nf">Insert</span><span class="p">(</span><span class="n">TEntity</span> <span class="n">entity</span><span class="p">);</span>

    <span class="k">void</span> <span class="nf">Update</span><span class="p">(</span><span class="n">TEntity</span> <span class="n">entityToUpdate</span><span class="p">);</span>

    <span class="k">void</span> <span class="nf">Delete</span><span class="p">(</span><span class="kt">object</span> <span class="n">id</span><span class="p">);</span>
    <span class="k">void</span> <span class="nf">Delete</span><span class="p">(</span><span class="n">TEntity</span> <span class="n">entityToDelete</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>Or maybe you saw it’s twin brother that have a slightly 
different variant of <code class="highlighter-rouge">Get</code> method:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">TEntity</span><span class="p">&gt;</span> <span class="nf">GetAll</span><span class="p">();</span></code></pre></figure>

<p>Inspiration for the first of these examples comes from 
<a href="https://docs.microsoft.com/en-us/aspnet/mvc/overview/older-versions/getting-started-with-ef-5-using-mvc-4/implementing-the-repository-and-unit-of-work-patterns-in-an-asp-net-mvc-application#implement-a-generic-repository-and-a-unit-of-work-class">official Microsoft documentation for ASP.NET MVC 4</a>.
As for the second example you can find countless number of blogs that
describe this variant of the repository pattern e.g.
<a href="http://www.tugberkugurlu.com/archive/generic-repository-pattern-entity-framework-asp-net-mvc-and-unit-testing-triangle">here</a>,
<a href="https://deviq.com/repository-pattern/">and here</a>,
<a href="https://www.codeproject.com/Articles/814768/CRUD-Operations-Using-the-Generic-Repository-Patte">and also here</a>
sometimes with slight variantions like returning <code class="highlighter-rouge">IEnumerable&lt;TEntity&gt;</code> instead of
<code class="highlighter-rouge">IQueryable&lt;TEntity&gt;</code>. 
And in the later case often with an additional method for generating
queries like:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="nf">FindAll</span><span class="p">(</span><span class="n">Expression</span><span class="p">&lt;</span><span class="n">Func</span><span class="p">&lt;</span><span class="n">T</span><span class="p">,</span> <span class="kt">bool</span><span class="p">&gt;&gt;</span> <span class="n">predicate</span><span class="p">);</span></code></pre></figure>

<p>So what is wrong with them you may ask? So far almost nothing,
not counting of course badly naming of the methods from Microsoft example(
they should be called <code class="highlighter-rouge">Find</code> and <code class="highlighter-rouge">FindAll</code> not <code class="highlighter-rouge">Get</code> and <code class="highlighter-rouge">GetAll</code>).</p>

<p>But “almost nothing” does not equal “nothing”. One problem that I find with
these interfaces is that they violate Interface Segregation Principle.
They expose full set of CRUD operations even for entities for which 
e.g. deleting does not make sense (for example when you deactivate users
instead of deleting them from DB;
also see <a href="http://udidahan.com/2009/09/01/dont-delete-just-dont/">Udi Dahan post about deleting data</a>).
But this problem can be easily solved by splitting this interface into three -
one for reading, one for updating and one for deleting entities.</p>

<p>The real problem that I have with these interfaces comes from their <em>improper</em>
usage. The original idea behind them is that they should be used as a base
interfaces for your custom repository interfaces, just like this:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">interface</span> <span class="n">IFooRepository</span> <span class="p">:</span> <span class="n">IGenericRepository</span><span class="p">&lt;</span><span class="n">Foo</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="n">Foo</span> <span class="nf">FindNewest</span><span class="p">();</span>
    <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Foo</span><span class="p">&gt;</span> <span class="nf">FindAllOutdated</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>

<p>And that your command handlers and services 
(in other words clients of your custom repositories) 
should decide what methods are
needed and should be put on your custom repository interfaces.</p>

<p>That is the theory. Unfortunately what I already saw a few times in my career 
instead is this:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// notice: this is NOT an abstract class
</span><span class="k">public</span> <span class="k">class</span> <span class="nc">GenericRepostiory</span><span class="p">&lt;</span><span class="n">TEntity</span><span class="p">&gt;</span> <span class="p">:</span> <span class="n">IGenericRepository</span><span class="p">&lt;</span><span class="n">TEntity</span><span class="p">&gt;</span> <span class="p">{</span>
    <span class="c1">// implementation details skiped
</span>
    <span class="k">public</span> <span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">TEntity</span><span class="p">&gt;</span> <span class="nf">GetAll</span><span class="p">()</span> <span class="p">{</span> <span class="cm">/* code */</span> <span class="p">}</span>
    <span class="k">public</span> <span class="n">TEntity</span> <span class="nf">GetById</span><span class="p">(</span><span class="kt">object</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* code */</span> <span class="p">}</span>

    <span class="k">public</span> <span class="k">void</span> <span class="nf">Insert</span><span class="p">(</span><span class="n">TEntity</span> <span class="n">entity</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* code */</span> <span class="p">}</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">Update</span><span class="p">(</span><span class="n">TEntity</span> <span class="n">entityToUpdate</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* code */</span> <span class="p">}</span>

    <span class="k">public</span> <span class="k">void</span> <span class="nf">Delete</span><span class="p">(</span><span class="kt">object</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* code */</span> <span class="p">}</span>
    <span class="k">public</span> <span class="k">void</span> <span class="nf">Delete</span><span class="p">(</span><span class="n">TEntity</span> <span class="n">entityToDelete</span><span class="p">)</span> <span class="p">{</span> <span class="cm">/* code */</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Someone has created a working implementation of <code class="highlighter-rouge">IGenericRepostory</code> interface.
What is worse this implementation is almost always registered in IoC container and
can be injected into your command handlers and
services like any other dependency:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">OrderService</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">IGenericRepository</span><span class="p">&lt;</span><span class="n">Order</span><span class="p">&gt;</span> <span class="n">_orderRepository</span><span class="p">;</span>

    <span class="c1">// ctor and other stuff...
</span>
    <span class="k">public</span> <span class="n">NewestOrderDto</span> <span class="nf">FindNewestOrderForCurrentUser</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">var</span> <span class="n">newestOrders</span> <span class="p">=</span> <span class="n">_orderRepository</span><span class="p">.</span><span class="nf">GetAll</span><span class="p">()</span>
            <span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="n">order</span> <span class="p">=&gt;</span> <span class="n">order</span><span class="p">.</span><span class="n">AssignedTo</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">_currentUser</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="n">order</span> <span class="p">=&gt;</span> <span class="n">order</span><span class="p">.</span><span class="n">State</span> <span class="p">!=</span> <span class="n">OrderState</span><span class="p">.</span><span class="n">Closed</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">OrderByDescending</span><span class="p">(</span><span class="n">order</span> <span class="p">=&gt;</span> <span class="n">order</span><span class="p">.</span><span class="n">CreationDate</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">Take</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">ToList</span><span class="p">();</span>

        <span class="k">return</span> <span class="n">_mapper</span><span class="p">.</span><span class="n">MapTo</span><span class="p">&lt;</span><span class="n">NewestOrderDto</span><span class="p">&gt;(</span><span class="n">newestOrders</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>This <em>looks</em> nice and clean but is not. I will tell you more about why
this is wrong later. Now I want to deal with one “solution” to the
<code class="highlighter-rouge">GenericRepository&lt;T&gt;</code> misinterpretation that 
I often hear from other developers. 
This solution sounds like this (dialog during code-review):</p>

<p>JIM SENIOR: Have you ever heard that
NHibernate <code class="highlighter-rouge">ISession</code> or Entity Framework <code class="highlighter-rouge">DbSet</code> <em>is a</em> repository?
Indeed what you just created is a tin wrapper over either 
<code class="highlighter-rouge">ISession</code> or <code class="highlighter-rouge">DbSet</code>.
Actually we can replace this <code class="highlighter-rouge">GenericRepository&lt;T&gt;</code> by e.g.
<code class="highlighter-rouge">DbSet</code> and get pretty must the same results.
The only service that <code class="highlighter-rouge">IGenericRepository&lt;T&gt;</code> provides is that it hides
most of the thirty methods that <code class="highlighter-rouge">DbSet</code> has. 
JONNY JUNIOR: Oh, indeed what you just said make sense.
I guess using generic repository
pattern here was a bit of overengineering. (Happily gets back to coding…)</p>

<p>For me using either <code class="highlighter-rouge">GenericRepository&lt;T&gt;</code> or raw <code class="highlighter-rouge">DbSet</code> is wrong most of the
time (one exception that I can accept is when you write 
the most CRUDest application ever, then don’t bother
and use <code class="highlighter-rouge">DbSet</code> in your services). And why? Due to the following reasons:</p>

<ul>
  <li>The only option to make sure that your LINQ queries will be properly translated
 to SQL is to test them against <strong>the same</strong> kind of database that you use 
 in production environment. But when your queries are scattered over methods 
 of your services it may be hard to create integration tests for them.
 For example look at the code:</li>
</ul>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">if</span> <span class="p">(</span><span class="cm">/* some complicated condition */</span><span class="p">)</span> <span class="p">{</span>
	<span class="k">if</span> <span class="p">(</span><span class="cm">/* some other complicated condition */</span><span class="p">)</span> <span class="p">{</span>
		 <span class="n">var</span> <span class="n">result</span> <span class="p">=</span> <span class="n">_orderRepository</span><span class="p">.</span><span class="nf">GetAll</span><span class="p">()</span>
			  <span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="n">order</span> <span class="p">=&gt;</span> <span class="n">order</span><span class="p">.</span><span class="n">AssignedTo</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">_currentUser</span><span class="p">.</span><span class="n">Id</span><span class="p">)</span>
			  <span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="n">order</span> <span class="p">=&gt;</span> <span class="n">order</span><span class="p">.</span><span class="n">State</span> <span class="p">!=</span> <span class="n">OrderState</span><span class="p">.</span><span class="n">Closed</span><span class="p">)</span>
			  <span class="p">.</span><span class="nf">OrderByDescending</span><span class="p">(</span><span class="n">order</span> <span class="p">=&gt;</span> <span class="n">order</span><span class="p">.</span><span class="n">CreationDate</span><span class="p">)</span>
			  <span class="p">.</span><span class="nf">Take</span><span class="p">(</span><span class="m">10</span><span class="p">)</span>
			  <span class="p">.</span><span class="nf">ToList</span><span class="p">();</span> 

		 <span class="k">return</span> <span class="n">_mapper</span><span class="p">.</span><span class="n">MapTo</span><span class="p">&lt;</span><span class="n">NewestOrderDto</span><span class="p">&gt;(</span><span class="n">newestOrders</span><span class="p">);</span>
	<span class="p">}</span>
	<span class="c1">// some code here
</span><span class="p">}</span>
<span class="p">//</span> <span class="n">more</span> <span class="n">code</span> <span class="n">here</span></code></pre></figure>

<p>To execute above query you must fulfill two if’s conditions. This will make
an integration test for the above query less readable and more fragile. 
Instead imagine that this query is encapsulated by a repository method.
In integration test you would just call that repo method and check the 
results - simple isn’t it?</p>

<ul>
  <li>
    <p>I am sure that you agree with me 
 that inline LINQ queries inside services 
 are not reusable and that they have a nasty tendency to
 duplicate themselves over the codebase. Even when a programmer decides to
 extract query to it’s own method, it will usually be a private method on 
 a particular service. Moving queries to repository 
 methods makes them automatically reusable
 across entire application.</p>
  </li>
  <li>
    <p>Inline LINQ queries are not named. Usually the only clue what a particular
 query does (without going deep it’s logic) is the name of the variable that
 holds query result. Unfortunately for us inventing a good variable names is a skill
 that only comes with the experience and since we have a lot of junior devs in our 
 industry we are faced with names like <code class="highlighter-rouge">result</code>, <code class="highlighter-rouge">ordersToProcess</code> or just <code class="highlighter-rouge">orders</code>.
 Wrapping the query inside a repo method will automatically give it a name. 
 Even if this name is not perfect we can refactor it later and all places 
 that call this method will benefit from our refactoring automatically!</p>
  </li>
  <li>
    <p>Sometimes for performance reasons we are forced to use raw SQL to get our
 data from DB. Do you really want to litter your business logic with low
 level technical stuff like <code class="highlighter-rouge">DbConnection</code>s, query parameters and <code class="highlighter-rouge">SqlException</code>s?
 Let’s hide this low level stuff inside a repository and let our business code 
 concentrate on business logic. Also see 
 <a href="http://principles-wiki.net/principles:single_level_of_abstraction">Single level of abstraction principle</a>.</p>
  </li>
</ul>

<p>So what is the solution you may ask? Get ready…</p>

<h3 id="what-we-need-is-the-specific-repository-pattern">What we need is the “specific” repository pattern</h3>

<p>We should start repository design by specifying it’s interface. 
The interface should contain only methods required by clients of 
the repository. In other words if nobody needs to delete entities of a given type
or it does not make sense from business point of view
we will not add <code class="highlighter-rouge">Delete</code> method to the interface.</p>

<p>If you are afraid that you will end up with different names for
basic CRUD operations like <code class="highlighter-rouge">Delete</code> on one repo and <code class="highlighter-rouge">Remove</code> on the other
you may create helper interfaces like <code class="highlighter-rouge">ICanDeleteEntity&lt;TEntity&gt;</code>,
<code class="highlighter-rouge">ICanUpdateEntity&lt;TEntity&gt;</code> etc. that will contain only methods for
specific usage like deleting, updating etc. 
Then the repository interface can inherit 
appropriate subset of them.</p>

<p>None of the methods on the repository interface should return <code class="highlighter-rouge">IQueryable&lt;T&gt;</code>
type.
Also make sure that the repository implementation does not 
return <code class="highlighter-rouge">IQueryable&lt;T&gt;</code> value hidden as <code class="highlighter-rouge">IEnumerable&lt;T&gt;</code> one. 
Always call <code class="highlighter-rouge">ToList()</code>
or <code class="highlighter-rouge">ToArray()</code> to materialize query results before returning them 
to the client.</p>

<p>When it comes to the repository implementation, the implementation is free
to inherit from <em>abstract</em> <code class="highlighter-rouge">GenericRepository&lt;TEntity&gt;</code> base class. 
Alternatively it may use <code class="highlighter-rouge">ISession</code> or <code class="highlighter-rouge">DbSet</code> directly if it is more convenient. 
No matter what approach you choose remember that “excessive” methods
like <code class="highlighter-rouge">Delete</code>
inherited from base class
may be hidden by the repository interface.</p>

<p>Please remember that your repository is NOT responsible for managing
database transactions. This concern is best managed using 
<a href="https://martinfowler.com/eaaCatalog/unitOfWork.html">Unit of Work pattern</a>.
This pattern is already implemented by both <code class="highlighter-rouge">ISession</code> and <code class="highlighter-rouge">DatabaseContext</code>
(think change tracking and dirty checking),
we only need a better interface over them:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">interface</span> <span class="n">IUnitOfWork</span> <span class="p">{</span>
    <span class="c1">// or just Begin()
</span>    <span class="k">void</span> <span class="nf">BeginTransaction</span><span class="p">();</span>

    <span class="k">void</span> <span class="nf">Commit</span><span class="p">();</span>
    <span class="k">void</span> <span class="nf">Rollback</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>

<p>For the most web applications it is enough to start transaction using <code class="highlighter-rouge">IUnitOfWork</code>
at the beginning of the HTTP request and either <code class="highlighter-rouge">Commit</code> or <code class="highlighter-rouge">Rollback</code> at
the end of the request. This can be done by using either an action filter
or a decorator around command handlers and/or services.</p>

<p>Example repository created using the above guidelines:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">interface</span> <span class="n">IOrderRepository</span> <span class="p">{</span>
	<span class="c1">// We do not need FindById so we do not included it
</span>	<span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Order</span><span class="p">&gt;</span> <span class="nf">FindActiveOrdersAssignedToUser</span><span class="p">(</span><span class="n">UserId</span> <span class="n">id</span><span class="p">);</span> 
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">OrderRepository</span> <span class="p">:</span> <span class="n">GenericRepository</span><span class="p">&lt;</span><span class="n">Order</span><span class="p">&gt;,</span> <span class="n">IOrderRepository</span> <span class="p">{</span>
    <span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Order</span><span class="p">&gt;</span> <span class="nf">FindActiveOrdersAssignedToUser</span><span class="p">(</span><span class="n">UserId</span> <span class="n">id</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="k">base</span><span class="p">.</span><span class="nf">FindAll</span><span class="p">()</span>
                <span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="n">order</span> <span class="p">=&gt;</span> <span class="n">order</span><span class="p">.</span><span class="n">AssignedTo</span><span class="p">.</span><span class="n">Id</span> <span class="p">==</span> <span class="n">id</span><span class="p">.</span><span class="n">Value</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="n">order</span> <span class="p">=&gt;</span> <span class="n">order</span><span class="p">.</span><span class="n">State</span> <span class="p">!=</span> <span class="n">OrderState</span><span class="p">.</span><span class="n">Closed</span><span class="p">)</span>
                <span class="p">.</span><span class="nf">ToList</span><span class="p">();</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>This should be obvious by now, but let’s not take chances.
Every method of our repositories should be covered by one or more
integration tests, which should use the same kind of DB that we use 
in production environment. Remember always use <em>integration</em> tests to
test your repositories.</p>

<h3 id="turbocharging-the-repository-pattern">Turbocharging the repository pattern</h3>

<p>There is no rose without thorns and presented above approach also has some
serious drawbacks. Some of them can be fixed by using a different
architecture than classic 3-layer arch.
Most common problems with “specific” repositories are as follows:</p>

<ul>
  <li>Repositories can over long periods of time accumulate 
 dozens and dozens of <code class="highlighter-rouge">Find*</code> methods. Often these methods will be very similar
 to each other. There are two ways to combat this unwanted grow. One is to use 
 a query object pattern. Basically you group several of these <code class="highlighter-rouge">Find*</code> methods together
 into one more general <code class="highlighter-rouge">Find</code> method. That method should accept an object that will
 represent a query criteria. For example:</li>
</ul>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">var</span> <span class="n">ordersToCancel</span> <span class="p">=</span> <span class="n">_orderRepository</span><span class="p">.</span><span class="nf">FindAllMatching</span><span class="p">(</span>
	<span class="c1">// Alternatively you may use the builder pattern
</span>	<span class="c1">// to create a criteria object.
</span>	<span class="k">new</span> <span class="n">OrderCriteria</span> <span class="p">{</span>
		<span class="n">StatusIsIn</span> <span class="p">=</span> <span class="k">new</span><span class="p">[]</span> <span class="p">{</span> <span class="n">OrderStatus</span><span class="p">.</span><span class="n">New</span><span class="p">,</span> <span class="n">OrderStatus</span><span class="p">.</span><span class="n">InProgres</span> <span class="p">},</span>
		<span class="n">OrderedItemsContainAll</span> <span class="p">=</span> <span class="k">new</span><span class="p">[]</span> <span class="p">{</span> <span class="n">searchedItem</span> <span class="p">},</span>
		<span class="n">CustomerIs</span> <span class="p">=</span> <span class="nf">GetCurrentCustomer</span><span class="p">()</span>
	<span class="p">});</span></code></pre></figure>

<p>To create a query from the criteria object we examine each search criteria and
build query step-by-step:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">IQueryable</span><span class="p">&lt;</span><span class="n">Order</span><span class="p">&gt;</span> <span class="n">q</span> <span class="p">=</span> <span class="k">base</span><span class="p">.</span><span class="nf">FindAll</span><span class="p">();</span>

<span class="k">if</span> <span class="p">(</span><span class="n">criteria</span><span class="p">.</span><span class="n">StatusIsIn</span> <span class="p">!=</span> <span class="k">null</span><span class="p">)</span> <span class="p">{</span>
	<span class="n">q</span> <span class="p">=</span> <span class="n">q</span><span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="n">o</span> <span class="p">=&gt;</span> <span class="n">criteria</span><span class="p">.</span><span class="n">StatusIsIn</span><span class="p">.</span><span class="nf">Contains</span><span class="p">(</span><span class="n">o</span><span class="p">.</span><span class="n">Status</span><span class="p">));</span>
<span class="p">}</span>

<span class="c1">// A long list of other conditions here..
</span>
<span class="k">return</span> <span class="n">q</span><span class="p">.</span><span class="nf">ToList</span><span class="p">();</span></code></pre></figure>

<p>A closely related yet different aproach is to use the query object pattern (see 
<a href="https://martinfowler.com/eaaCatalog/queryObject.html">this</a> and
<a href="https://lostechies.com/jimmybogard/2012/10/08/favor-query-objects-over-repositories">this</a>).</p>

<p>The second solution to this problem is more robust and reliable.
Usually too big repositories are accompanied by huge services and 
overgrown entities. You can slim down both your repos and services 
by using something that I call CQRS-light. It differs from full-blown
CQRS by using exactly the same database tables for both reads and writes.
When doing CQRS-light we can use the same ORM framework for both reading and
writing data and slowly migrate to real CQRS only in these parts of our
application that really need it (do recall this 80+ columns searchable grid that
generates 20+ inner join query that halts your DB server? - real CQRS can help here).</p>

<p>The diagram below presents typical architecture of CQRS-light application:
<img src="assets/images/2018-07-08/cqrs-light.svg" alt="CQRS-light architecture" /></p>

<p>The key principles of CQRS-light are:</p>

<ul>
  <li>
    <p>Split all user actions into two categories. In the first put all actions that
 can modify the state of the system like e.g. creating a new order in an e-commerce app.
 In the second<br />
 category put all actions that do not modify state of the system e.g. 
 viewing an order details. First category represents commands (writes), the second one
 queries (reads). Only commands can change state of the system.</p>
  </li>
  <li>
    <p>Query handlers do NOT use repositories to access data. They access DB 
 using whatever technology they want.
 Usual configurations include a single ORM on both read and write sides, 
 ORM for writes and micro-ORM like Dapper for reads or 
 using ORM for writes and raw SQL for reads.</p>
  </li>
  <li>
    <p>Command handlers can only use repositories to access and modify data. 
 Command handlers 
 should not call query handlers to fetch data from database. 
 If a command handler needs to execute 
 a complex query and this query can be answered by a query handler
 you should duplicate this query logic and put it
 in both query handler and in a repository method
 (read and write sides must be separated).</p>
  </li>
  <li>
    <p>Query handlers are tested only using integration tests.
 For command handlers you will have unit and optionally integration tests.
 Repositories will be tested using integration tests.</p>
  </li>
</ul>

<p>CQRS even in the “light” version is a huge topic and deserves a blog post of it’s own.
<a href="https://github.com/jbogard/MediatR">MediatR</a> library is a good starting point
if you want to find out more about CQRS-light approach.</p>

<p>Let us return to the subject of the “specific” repository pattern drawbacks. 
The second drawback that I want to mention is unwanted migration of the business
logic into query definitions. For example even this simple query:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Order</span><span class="p">&gt;</span> <span class="nf">FindActiveOrders</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">base</span><span class="p">.</span><span class="nf">FindAll</span><span class="p">()</span>
          <span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="n">order</span> <span class="p">=&gt;</span> <span class="n">order</span><span class="p">.</span><span class="n">State</span> <span class="p">!=</span> <span class="n">OrderState</span><span class="p">.</span><span class="n">Closed</span> 
                       <span class="p">&amp;&amp;</span> <span class="n">order</span><span class="p">.</span><span class="n">State</span> <span class="p">!=</span> <span class="n">OrderState</span><span class="p">.</span><span class="n">Canceled</span><span class="p">)</span>
          <span class="p">.</span><span class="nf">ToList</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>

<p>contains a piece of business logic that describes what 
it means for an order to be active.
Usually ORM’s prevent us from encapsulating such pieces of logic
into a separate properties like <code class="highlighter-rouge">IsActive</code>.</p>

<p>What we need here is the specification pattern.
You can find pretty decent overview of the specification pattern
<a href="https://enterprisecraftsmanship.com/2016/02/08/specification-pattern-c-implementation/">here</a>.
Our query method when we use the specification pattern should look similar to:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">Order</span><span class="p">&gt;</span> <span class="nf">FindActiveOrders</span><span class="p">()</span> <span class="p">{</span>
  <span class="k">return</span> <span class="k">base</span><span class="p">.</span><span class="nf">FindBySpec</span><span class="p">(</span><span class="k">new</span> <span class="nf">ActiveOrders</span><span class="p">())</span>
          <span class="p">.</span><span class="nf">ToList</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>


	  ]]></description>
	</item>

	<item>
	  <title>Devoxx Poland 2018</title>
	  <link>//devoxx-poland-2018</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2018-06-25T02:00:00+02:00</pubDate>
	  <guid>//devoxx-poland-2018</guid>
	  <description><![CDATA[
	     <p>[Photo above shows Mr. Jakub Nabrdalik during his presentation about TDD 
in main conference room.]</p>

<h3 id="about-conference">About conference</h3>

<p>Thanks to my employer <a href="https://cybervadis.com/">CyberVadis</a> I was able to
attend Devoxx Poland 2018 conference. The conference took place in
Cracow (Poland) and lasted three days (20 - 22 June).</p>

<p>Overall my experience with the conference was very good.
Things that I particularly liked were: good coffee, tasty muffins and
beautiful and very comfortable venue (<a href="http://www.icekrakow.pl/">Cracow ICE</a>).</p>

<p>Things that organisers could have done better: on the first day of the 
conference it was difficult to find the right rooms (especially room no. 5). 
Rooms should be marked in a more outstanding way. Quality of
food served during lunches was
only mediocre, I expected something better. Conference offered a lot of
presentation still the number of presentation on advanced topics were limited.
I expected to see more advanced stuff there.</p>

<p>Conference keynote presentation was amazing. 
The speaker Mr. Brian Christian told us about application of
theoretical computer science stuff to everyday problems.
Presentation was based on Mr. Brian book 
<a href="http://a.co/dYsQtCb">Algorithms to Live By</a>.
I already ordered my own copy ;)</p>

<h3 id="my-notes-from-presentations">My notes from presentations</h3>

<p>Below you can find digitalized version of my notes that I took during
presentations. Remember that they are my <strong>personal</strong> notes mostly created for
my colleagues that couldn’t attend the conference. Use them at your own risk.</p>

<h4 id="state-or-events-which-shall-i-keep-by-jakub-pilimon">State or events? Which shall I keep? by Jakub Pilimon</h4>

<ul>
  <li>You can find most of the topics addressed by Mr. Jakub in his blog
 post 
 <a href="https://spring.io/blog/2018/04/11/event-storming-and-spring-with-a-splash-of-ddd">Event Storming and Spring with a Splash of DDD</a>.</li>
  <li>ORM’s can introduce 
 <a href="https://en.wikipedia.org/wiki/No_Silver_Bullet">accidental complexity</a> into
 our applications. Example: loading a list of child
 objects when we only need
 to check number of objects (we are just calling <code class="highlighter-rouge">.size()</code> on the list)
 can cause performance bottlenecks when we are using ORM to persist
 our aggregates.</li>
  <li>Persisting aggregate state as a list of events is not only simpler
 but also much more aligned with DDD design.</li>
  <li>You should prefer returning domain events from aggregate instead of
 publishing them (no more <code class="highlighter-rouge">EventPublisher</code>s in aggregates). For example:</li>
</ul>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyAggregate</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">final</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">DomainEvent</span><span class="o">&gt;</span> <span class="n">pendingEvents</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
    <span class="kd">public</span> <span class="n">List</span><span class="o">&lt;</span><span class="n">DomainEvent</span><span class="o">&gt;</span> <span class="n">getPendingEvents</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">pendingEvents</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">flushEvents</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">pendingEvents</span><span class="o">.</span><span class="na">clear</span><span class="o">();</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="n">performOperation</span><span class="o">()</span> <span class="o">{</span>
        <span class="c1">// do some stuff</span>
        <span class="n">NameChangedEvent</span> <span class="n">event</span> <span class="o">=</span> 
           <span class="k">new</span> <span class="n">NameChangedEvent</span><span class="o">(</span><span class="s">"old-name"</span><span class="o">,</span> <span class="s">"new-name"</span><span class="o">);</span>

        <span class="n">pendingEvents</span><span class="o">.</span><span class="na">add</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
        <span class="n">applyEvent</span><span class="o">(</span><span class="n">event</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="c1">// ...</span>
<span class="o">}</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MyAggregateRepository</span> <span class="o">{</span>
    <span class="kd">public</span> <span class="n">MyAggregate</span> <span class="n">load</span><span class="o">(</span><span class="n">UUID</span> <span class="n">id</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">DomainEvents</span><span class="o">&gt;</span> <span class="n">events</span> <span class="o">=</span> <span class="n">eventStore</span><span class="o">.</span><span class="na">loadEventsById</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
        <span class="n">MyAggregate</span> <span class="n">aggr</span> <span class="o">=</span> <span class="n">MyAggregate</span><span class="o">.</span><span class="na">recreateFrom</span><span class="o">(</span><span class="n">id</span><span class="o">,</span> <span class="n">events</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">aggr</span><span class="o">;</span>
    <span class="o">}</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="n">save</span><span class="o">(</span><span class="n">MyAggregate</span> <span class="n">aggr</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">eventStore</span><span class="o">.</span><span class="na">appendEvents</span><span class="o">(</span><span class="n">aggr</span><span class="o">.</span><span class="na">getId</span><span class="o">(),</span> <span class="n">aggr</span><span class="o">.</span><span class="na">getPendingEvents</span><span class="o">());</span>
        <span class="n">aggr</span><span class="o">.</span><span class="na">flushEvents</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>

<span class="c1">// later usage:</span>
<span class="n">var</span> <span class="n">aggr</span> <span class="o">=</span> <span class="n">repo</span><span class="o">.</span><span class="na">load</span><span class="o">(</span><span class="n">id</span><span class="o">);</span>
<span class="n">aggr</span><span class="o">.</span><span class="na">performOperation</span><span class="o">();</span>
<span class="n">repo</span><span class="o">.</span><span class="na">save</span><span class="o">(</span><span class="n">aggr</span><span class="o">);</span></code></pre></figure>

<p>This method of returning events from aggregate root is nothing new.
Variations of this approach appeared as early as in 2013, <a href="https://blog.jayway.com/2013/06/20/dont-publish-domain-events-return-them/">for example here</a>.</p>

<ul>
  <li>
    <p>(My question after talk) You should not confuse domain events used
 to store aggregate state from integration events. Generally it is a
 bad practice to publish to other systems events used to persist aggregate.
 Mostly because you may expose state that should be private to aggregate.</p>
  </li>
  <li>
    <p>(My question after talk) How to deal with GDPR when using immutable
 event store? You should try to keep sensitive data outside of domain events.
 Later I checked that this approach was described <a href="https://twitter.com/mathiasverraes/status/927484596396199937?lang=en">here</a>.</p>
  </li>
</ul>

<p>As an alternative approach you may use encryption as described <a href="https://www.michielrook.nl/2017/11/forget-me-please-event-sourcing-gdpr/">here</a>.
But for some reason I find this solution ugly.</p>

<ul>
  <li>(Someone else’s question) It is fine to use SQL databases to store domain events (at least at the
 beginning). So if you want to start your adventure with event sourcing
 use your old tried SQL db!</li>
</ul>

<p>Overall it was a good presentation but mostly directed at the
beginners.</p>

<p>You can find Jakub Pilimon blog and twitter here:</p>

<ul>
  <li><a href="https://pillopl.github.io/">Blog</a></li>
  <li><a href="https://twitter.com/JakubPilimon">Twitter</a></li>
</ul>

<h4 id="from-availability-and-reliability-to-chaos-engineering-why-breaking-things-should-be-practised-by-adrian-hornsby">From availability and reliability to chaos engineering. Why breaking things should be practised by Adrian Hornsby</h4>

<ul>
  <li>Jesse Robbins is one of the fathers of Chaos Engineering 
 (see <a href="https://www.youtube.com/watch?v=zoz0ZjfrQ9s">this</a> video from 2011).</li>
  <li>Generally we break things in production to build confidence that
 we can quickly fix real problems.</li>
</ul>

<p>Introducing Chaos Engineering into organisation:</p>

<ul>
  <li>Start small. Only break things in production that you are sure are 
 able to survive your “experiments”.</li>
  <li>First make your application resilient then test that resiliency.
 Do NOT do Chaos Engineering experiments in production that you are sure
 will kill your app.</li>
  <li>Test not only infrastructure but also people. If say Bob
 solves 90% of problems on production, check what will happen if other
 team members must solve such problems without Bob.</li>
</ul>

<p>My note: I cannot resist myself from calling this technique a “bus monkey”.</p>

<ul>
  <li>Remember: <strong>Chaos doesn’t cause problems it reveals them</strong></li>
  <li>Areas to test: people, applications, network and data, infrastructure</li>
</ul>

<p>Increasing resiliency:</p>

<ul>
  <li>Availability is measured in “nines”, e.g. four nines is 99.99%, 
 six nines is 99.9999% of time on which application works.</li>
  <li>four-nines is an industry standard (as of 2018)</li>
  <li>Easiest way to increase availability is to create multiple copies of
 the least reliable resources. If for example you have a single 
 server that has 90% of 
 availability, having two such servers working in parallel 
 will create a system with availability of 99%.</li>
  <li>When you are hosting your apps in the cloud remember to use multiple 
 availability zones (AWS lingo).</li>
  <li>Use auto-scaling.</li>
  <li>Follow infrastructure as code approach to achieve testable infrastructure.</li>
  <li>Your infrastructure should be immutable. Never update servers always
 create new instances and remove old one.</li>
  <li>Practice rolling deployments. After a fresh deploy of an application
 do NOT kill old servers immediately. Allow them to say for a while as
 a standby - just in case when your new app version will not work they
 will allow you to quickly rollback your changes.</li>
  <li>Never put all your databases on the same server. Use sharding to spread
 data across many databases.</li>
  <li>Prefer messaging to HTTP requests, message queues are more resilient.
 Send commands instead of issuing HTTP requests.</li>
  <li>When using HTTP remember to use circuit breaker library.
 Use exponential backoff algorithm.</li>
  <li>Remember about DNS (DNS failover, smart load balancing).</li>
  <li>Transient state is a state that is constantly changing, like
 webpage view counters or ad clicks counters. Do not put transient 
 state into database, 
 instead use specialized solutions like Redis to keep it.</li>
  <li>Use async UI, do not wait for operation to finish, display notification
 to the user when operation succeeds or fails. See: 
 <a href="https://medium.com/@sophie_paxtonUX/stop-getting-in-my-way-non-blocking-ux-5cbbfe0f0158">Stop Getting In My Way! — Non-blocking UX</a></li>
</ul>

<p>Chaos Engineering in Practice:</p>

<ul>
  <li>Chaos Engineering is like a fire drills. You are doing it so that
 people will be prepared for a real fire and will not panic.</li>
  <li>Without exercises people will get scary when dealing with real issues
 on production.</li>
  <li>How to start? Start by defining <em>steady state</em> of your application.
 In other words define when you assume that your application is working.
 For example when you have an online shop, you may assume that your 
 application is working when people click “Buy” button a certain number of 
 times per hour. This will be a steady state of your application that
 you will monitor during chaos engineering experiments to make sure
 that application is still working.</li>
  <li>Generally you should use business metric to define steady state.
 Measure things that bring you money!</li>
  <li>Define experiments. What if our DB server stops working?
 What if we have a huge spike in traffic?</li>
  <li>Only try to break things that you are 100% sure should not break
 (otherwise make your application resilient first).</li>
  <li>During chaos experiments always have an emergency stop button so that
 you can stop your experiment at any time.</li>
  <li>Start small! (yeah again, looks like this is very important)</li>
  <li>Experiment with canary deployments e.g. run experiments on 1% of total
 traffic</li>
  <li>Quantify results. How much time elapsed from the failure to detection of 
 that failure? How much time did it take to fix it?
 Is our monitoring working properly? Does notification (pager duty) system
 works correctly?</li>
  <li>Never blame a single person, instead concentrate on things that 
 you can improve.</li>
</ul>

<p>General tips:</p>

<ul>
  <li>During post mortems use Rule of 5 Why. 
 Why it broke? Because of X. Why X happened? Because of Y.
 Why Y happened? … (repeat 5 times)</li>
  <li>Be patient.</li>
  <li>Be aware of cultural blocks (especially among business people).
 Generally do not tell business people that you want to 
 break your application.
 Remember chaos reveals problems not causes them.</li>
</ul>

<p>Overall this was a very good presentation with a bit of AWS advertisement.</p>

<p>You can find Adrian Hornsby twitter here:</p>

<ul>
  <li><a href="https://twitter.com/adhorn">Twitter</a></li>
</ul>

<h4 id="through-the-valley-of-darkness-the-road-to-microservices-by-dominik-boszko">Through the valley of darkness, the road to microservices by Dominik Boszko</h4>

<ul>
  <li>Ask yourself if you get any of the benefits that
 microservice architecture promised you.</li>
  <li>Signs that you are working with distributed monolith:
    <ul>
      <li>Change in one microservice propagates to others
e.g. I return additional field from some REST endpoint in service A,
 but may application will start working only when I recompile service B.</li>
      <li>There is too much communication going on between teams.</li>
      <li>Change in service A that is managed by my team requires approval from
some other team</li>
    </ul>
  </li>
  <li>When working with microservices Don’t Repeat Yourself rule is considered
 harmfull. Microservices should be as independent from each other as possible.</li>
  <li>Avoid coupling between microservices. Do NOT create libraries with shared
 REST DTO’s or events that will be used by many services.
 Instead introduce contracts (use tools like Swagger). 
 Each service should contain it’s own copy of consumed DTO’s and events.
 These DTO’s should contain only the fields that the service needs.</li>
  <li>Be wary of <code class="highlighter-rouge">Core</code>s, <code class="highlighter-rouge">Platform</code>s, <code class="highlighter-rouge">Common</code>s etc. libraries that are used
 by every microservice. Microservices should be independent of each other.
 In the best case scenario you will only share security and logging related code.</li>
  <li>Shared libraries are bad because of transitive dependencies.
 For example team A adds a dependency on SuperXmlParser-v2.0 to the core library.
 This breaks service B maintained by team B that is using SuperXmlParser-v1.0 library.</li>
  <li>When using microservice architecture role of software architect changes.
 Architect no longer can enforce his decisions on teams. Instead teams are
 self organizing and cross functional and they ultimately decide on the design 
 and architecture of the services that they own.</li>
  <li>Software architect should concentrate on high level concerns like security,
 integration with other applications and best practices. Think BIG PICTURE!</li>
  <li>Software architects should strive to avoid micromanagement (especially when they
 have only experience with monolithic application development).</li>
  <li>Do not be afraid to use different technologies and architectural styles for
 different microservices (this is one of the selling points of the
 microservice architecture after all).</li>
  <li>Teams should be aligned with bounded context. Teams should have a deep
 knowledge of their domains. Therefore teams are best equipped to make
 architectural decisions. This is the best usage of the top talent that
 you have hired.</li>
  <li>Avoid nanoservices (service that does the job of a single method).</li>
  <li>Do not rush into microservices. Think if you really needs benefits that
 this approach can offer you. Keep in mind additional complexity that
 comes with this approach.</li>
</ul>

<p>This was one of the best presentations that I have seen on Devoxx.
It was based on personal experiences of Mr. Dominik. Good Job!</p>

<h4 id="how-to-impress-your-boss-and-your-customer-in-a-modern-software-development-company-by-wojciech-seliga">How to impress your boss and your customer in a modern software development company by Wojciech Seliga</h4>

<ul>
  <li>Modern software house is decentralized. People communicate with each other.
 Programmers talk to the client. Client can decide whom you should give a rise!</li>
  <li>A few more attributes of modern software company: short feedback loops,
 constant improvement (thank to feedback), autonomous teams, decentralized
 decision making, individual impact (every one feels that his job is important
 and that this person contributes significantly to the success of company).</li>
  <li>In other words: Customer becomes the new boss.</li>
  <li>How to impress your new boss? Deliver great stuff!</li>
  <li>Check out <a href="http://a.co/93Pp6BM">How Google Works</a> book.
 It uses term <em>Smart creatives</em> to define modern knowledge workers.
 Smart creatives are not only tech but also business savvy.
 They are open, passionate persons that strive to learn something new
 every day. (My note: this sounds like some old school hackers to me).</li>
  <li>Smart creatives like to work on interesting problems.
 They also like to work with interesting people. They often
 have interesting and colorful lives.</li>
  <li>Negativity destroys people. It also destroys people’s brains - so please
 don’t be negative.</li>
  <li>Check out <a href="https://pragprog.com/book/ahptl/pragmatic-thinking-and-learning">Pragmatic Thinking and Learning</a> book</li>
  <li>(My note: more motivational $#@!, I have nothing against it but I think this is
 not based on any scientific studies. It is just pop-psychology stuff 
 so believe it or not). Success is 10% talent, 90% hard work.
 Hard work beats talent when talent fails to work hard.</li>
  <li>Anyone who stops learning is already OLD (my note: I should better learn something
 from this presentation).</li>
  <li>Growth mindset. Prise for effort not for results (my note: more pop-psychology).</li>
</ul>

<p>Questions for job interview that can test if person has growth mindset
and is a good candidate to become smart creative:</p>

<ul>
  <li>What have you learned in your current job?</li>
  <li>How do you decide what to learn?</li>
  <li>What did you learn last month?</li>
  <li>What do you do to stay up to date with tech?</li>
  <li>What trends in technology did you miss?</li>
  <li>What challenges do you expect at your new job?</li>
  <li>How do you measure yourself and your progress?</li>
</ul>

<p>Who is a senior developer?</p>

<ul>
  <li>Primary role of a senior developer is to teach and mentor others.</li>
  <li>Senior developer should be a great example to others.</li>
  <li>Seniors should strive to build better environment for developers
 (no blaming each other, better dev processes, better and more friendly
code review etc.)</li>
  <li>Being a senior developer is not about doing the same things as mid but
 faster.</li>
</ul>

<p>More job interview questions:</p>

<ul>
  <li>What could you teach me in 5 minutes?</li>
  <li>What do you do now differently than in the last 5 years?</li>
  <li>How did you impact other people?</li>
</ul>

<p>Back to main topic again:</p>

<ul>
  <li>Be the weakest person in the room (so that you will learn quickly).</li>
  <li>Being the best person in the room is bad for your professional development.
 You may not learn as much as you can.</li>
  <li>1 year in a fast-paced environment is often better than 5+ years of experience
 in an average company.</li>
</ul>

<p>More job interview questions:</p>

<ul>
  <li>What is your best professional achievement?</li>
  <li>What is your top strength?</li>
  <li>What is your weakest point as a professional software developer?</li>
  <li>What are you doing about it?</li>
  <li>Why did you choose software development as your career?</li>
  <li>What are you passionate about?</li>
</ul>

<p>Back to main topic again:</p>

<ul>
  <li>Developers should be ready to take responsibility for the product they build.</li>
  <li>Developers that are already responsible may take ownership of their product.</li>
  <li>Passion is very important for smart creatives. Passion gives you intrinsic 
 motivation. Curiosity will force you to learn new things. Desire to change
 the words will make it happen.</li>
  <li>Modern software house is sliced vertically. Every team owns parts of the product
 and can do support, maintenance and  development. 
 Also each team can talk directly with the client and make it’s own
 decisions.</li>
</ul>

<p>Overall it was an interesting and good presentation but I have a feeling
that I just missed the point.</p>

<p>Mr. Wojciech <a href="https://twitter.com/wseliga?lang=en">Twitter</a>.</p>

<h4 id="docs-in-the-self-documenting-world-by-wojtek-erbetowski">Docs in the self-documenting world by Wojtek Erbetowski</h4>

<p>(my note: I was late so I missed a lot of interesting stuff here)</p>

<ul>
  <li>Apply UX techniques like <a href="https://en.wikipedia.org/wiki/Persona_(user_experience)">personas</a> and <a href="https://boagworld.com/usability/customer-journey-mapping/">user journey mapping</a> to the documentation.</li>
  <li>Do not put code snippets into documentation. Instead link to a real 
 test or program source code. Especially linking to tests source code is
 advised, this way documentation will always will be up to date.</li>
  <li>A lot of tools like <a href="http://mrhaki.blogspot.com/2014/04/awesome-asciidoc-include-partial-parts.html">AsciiDoc</a> can already do this.</li>
  <li>Writing a documentation should be a pleasure for developers.</li>
  <li>Example: library of React components was created as a React application.
 For each component a short description, real working component, example source code
 usage and a list of available properties is displayed.</li>
  <li>This library is actually generated for the source code of the components. 
 So it doesn’t need to be maintained by developers and stays always up to date.</li>
  <li>Always think for whom you are creating the documentation.</li>
</ul>

<h4 id="improving-your-test-driven-development-in-45-minutes-by-jakub-nabrdalik">Improving your Test Driven Development in 45 minutes by Jakub Nabrdalik</h4>

<ul>
  <li>Interesting article <a href="https://codurance.com/2015/05/12/does-tdd-lead-to-good-design/">Does TDD really lead to good design?</a></li>
</ul>

<p>Common problems with tests:</p>

<ul>
  <li>Too low level tests:
    <ul>
      <li>We have test for every single class in our project.</li>
      <li>Tests knows too much about code that they are testing.
Even minor refactorings of class API result in broken tests.</li>
    </ul>
  </li>
  <li>Too high level tests:
    <ul>
      <li>We only have integration tests.</li>
      <li>Tests are slow. Generally speaking integration tests that use even in memory
DB like H2 are too slow for TDD cycle (people are losing flow).</li>
    </ul>
  </li>
  <li>To have effective TDD cycle we should been able 
 to run a single unit test in less than 1 second.</li>
</ul>

<p>The solution:</p>

<ul>
  <li>Group your code into modules. Module API changes more slowly than
 class API. Test only module public API.</li>
  <li>A single module contains all application layers e.g. REST controllers,
 services, command handlers, repositories, database access etc.
 In other words modules are vertical slices of functionality.</li>
  <li>Module should be like a microservice.</li>
  <li>Integration tests are slow. Use integration tests only to test
 crucial paths through your application. Tests things that bring you
 money.</li>
  <li>It is OK to have many assertions in a single integration test.</li>
  <li>Module should expose a <code class="highlighter-rouge">ModuleConfiguration</code> class that can create a
 ready to use module that uses fakes to interact with other modules and IO.</li>
  <li>Prefer fakes to mocks and stubs. Use in memory repositories. Avoid doing IO
 at all costs in unit tests.</li>
  <li>Test only behaviour of the module using its public API.</li>
  <li>Use mocks only for interaction with other modules.</li>
  <li>Checkout this repo <a href="https://github.com/olivergierke/sos">https://github.com/olivergierke/sos</a></li>
</ul>

<p>Towards better tests:</p>

<ul>
  <li>Use business names (ubiquitous language) in the tests (and tests names too).</li>
  <li>Hide unnecessary information from test code (you should only show information
 that are relevant for this particular test).</li>
  <li>For each module create utility classes that provide real-like test data.</li>
  <li>Create a DSL for your tests.</li>
  <li>Prefer code to frameworks like Cucumber (business people don’t use it anyway).</li>
  <li>Spock is a very good testing framework for Java.</li>
  <li>You may use shared immutable (read only) DB with test data to test 
 e.g. repositories - this way you can speed up your integration tests.</li>
</ul>

<p>Mr. Jakub Nabrdalik twitter and blog:</p>

<ul>
  <li><a href="https://twitter.com/jnabrdalik?lang=en">Twitter</a></li>
  <li><a href="http://blog.solidcraft.eu/">Blog</a></li>
</ul>

<p>If you want to learn more about Mr. Jakub way of doing modules
please see his <a href="https://github.com/jakubnabrdalik/hentai">demo project</a> on GitHub.</p>

<h4 id="modules-or-microservices-by-sander-mak">Modules or Microservices? by Sander Mak</h4>

<p>For this presentation I will not provide notes. Instead I am going to 
express my views on arguments used by Mr. Sander.</p>

<p>Mr. Sander believes that developing applications using microservice
architecture is much more difficult than developing a monolithic software.
Also Mr. Sander believes that microservice architecture moves so called
“wall of unmaintainability” further from us (we may add more features to
the application before it becomes unmaintainable in therms of cost).
I fully agree with these both statements.</p>

<p>Now the things that I disagree with. Mr. Sander proposes a modular architecture
(monolith split into modules) as a silver bullet that will allow us to reap
most of the benefits of microservices will still preserving simplicity of
development. Unfortunately in his presentation some disadvantages of this
approach were not mentioned, like:</p>

<ul>
  <li>Slow build and testing. Slow deploy. (It is still a monolith just with a better
 code organization.)</li>
  <li>A minor error in a single unimportant module 
 can break entire application.
 For example large numbers of unclosed files,
 memory leaks or stackoverflow exceptions can break (depending
 on used tech stack) even entire application.</li>
  <li>Implicit shared state between modules like current working directory, PID etc.</li>
  <li>A modular application will usually use single database technology and
 a single database server (possibly with read replicas). 
 As writes will be server by a single server instance this may cause 
 severe performance problems in the future.</li>
  <li>Entire application must be written in the same technology (JVM, .NET, node.js).</li>
  <li>Usually in monolithic applications people have a kind of Core or Platform 
 (or Commons or whatever) library that contains utils and shared components.
 This kind of libraries have a tendency to grow uncontrollably 
 and over time they become difficult to change
 (because any change to them requires a lot of refactoring in several modules).
 Also quality of these libraries is often substandard (they are usually not actively
 maintained after they provide functionality needed by their authors - 
 if it works don’t change it approach).</li>
</ul>

<p>I must admit that nowadays it is much more difficult to develop microservices
vs monolith. But I believe this is caused mostly by lack of good 
frameworks and tools. For example I can imagine that in the future
we will have some standard API for logging and monitoring offered by
all relevant cloud providers. From my point of view Spring Boot framework
looks very promising. Also I believe that we have only just started doing 
cloud computing
(it still a very young and immature technology) and we should see a lot of
improvements in the area of distributed system development.</p>

<p>To sum up: using modules is always a good idea. Depending on your
requirements sometimes you will want to build a modular monolith, sometimes
a bunch of microservices. Context is always the king.</p>

<h3 id="buzz">Buzz</h3>

<ul>
  <li>GraphQL</li>
  <li>Chaos Engineering</li>
  <li>A/B Testing</li>
  <li>Canary releases</li>
  <li>Infrastructure as Code</li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>Ray tracing a torus</title>
	  <link>//ray-tracing-torus</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2018-05-06T02:00:00+02:00</pubDate>
	  <guid>//ray-tracing-torus</guid>
	  <description><![CDATA[
	     <p>In this blog post I will show you how to ray trace a torus.
I will assume that you already know how to ray trace simple shapes
like spheres and cubes. I will also assume some basic familiarity
with shading and ray tracing in general.</p>

<h3 id="obtaining-torus-equation">Obtaining torus equation</h3>

<p>Before we start I must introduce some terminology.
I will use <script type="math/tex">R</script> to denote torus major radius 
(the distance from the center of the tube to the center of the torus),
and <script type="math/tex">r</script> to denote torus minor radius
(the radius of the tube). 
<img src="assets/images/2018-05-06/torusrR.png" alt="Torus geometry" /></p>

<p>Let us consider torus <script type="math/tex">T</script> centered at point 
<script type="math/tex">(0,0,0)</script> with radiuses <script type="math/tex">R</script> and <script type="math/tex">r</script>.
Torus <script type="math/tex">T</script> can be defined as a set of points for which
certain function <script type="math/tex">F</script> returns zero:</p>

<script type="math/tex; mode=display">T = \{ p \in \mathbb{R}^3 \mid F(p) = 0 \}</script>

<p>Our task will be to find a suitable definition of function <script type="math/tex">F</script>
that properly describes torus <script type="math/tex">T</script>.</p>

<p>We will start by looking at the intersection of torus <script type="math/tex">T</script> with <script type="math/tex">XY</script> plane:
<img src="assets/images/2018-05-06/torus-def.svg" alt="Torus-XY plane intersection" />
Every point <script type="math/tex">P=(x,y)</script> on the circumference of the 
right circle satisfies equation:</p>

<script type="math/tex; mode=display">(x - R)^2 + y^2 = r^2</script>

<p>Now imagine that we are taking some point <script type="math/tex">P</script> on the circumference
and we are rotating it around
<script type="math/tex">Y</script> axis. 
<img src="assets/images/2018-05-06/torus-def2b.svg" alt="Rotating point around Y axis" />
This way point <script type="math/tex">P</script> becomes a set of points in 3D space:</p>

<script type="math/tex; mode=display">P=(x,y,0) \Rightarrow \{(x',y,z') \in \mathbb{R}^3 | x'^2 + z'^2 = x^2 \}</script>

<p>Torus can be obtained by rotating all points on the circumference
of the circle. In
other words points <script type="math/tex">(x',y,z')</script> on the surface of a torus satisfy equations:</p>

<script type="math/tex; mode=display">\begin{cases}
(x - R)^2 + y^2 = r^2 \\
x'^2 + z'^2 = x^2 
\end{cases}</script>

<p>This equations can be simplified by removal of <script type="math/tex">x</script> variable into:</p>

<script type="math/tex; mode=display">(x'^2 + y^2 + z'^2)^2 - 2 (R^2 + r^2) (x'^2 + y^2 + z'^2) + 4 R^2 y^2 + (R^2 - r^2)^2 = 0</script>

<p>And this is exactly what we were looking for, a suitable definition
for our function <script type="math/tex">F</script>. 
After a bit of renaming (<script type="math/tex">x' \rightarrow x</script>, <script type="math/tex">z' \rightarrow z</script>) 
we can write our final equation:</p>

<script type="math/tex; mode=display">F(x,y,z) = (x^2 + y^2 + z^2)^2 - 2 (R^2 + r^2) (x^2 + y^2 + z^2) + 4 R^2 y^2 + (R^2 - r^2)^2</script>

<h3 id="solving-torus-equation">Solving torus equation</h3>

<p>Given ray definition:</p>

<script type="math/tex; mode=display">r(t) = o + \vec{d} * t</script>

<script type="math/tex; mode=display">o = \begin{bmatrix}o_x\\o_y\\o_z\end{bmatrix}, \;
\vec{d} = \begin{bmatrix}d_x\\d_y\\d_z\end{bmatrix}</script>

<p>where <script type="math/tex">o</script> is the ray origin (starting point) 
and <script type="math/tex">d</script> is a unit vector (<script type="math/tex">\left\lVert d \right\rVert = 1</script>) that
represents the ray direction,
we will try to find all positive (<script type="math/tex">t > 0</script>)
solutions to the equation:</p>

<script type="math/tex; mode=display">F(r(t)) = 0,\; t > 0</script>

<p>Notice that for a particular ray this equation can have
0, 1, 2, 3 or 4 solutions:
<img src="assets/images/2018-05-06/torus-sol4.svg" alt="Visual illustration of number of the solutions" /></p>

<p>We will start by substituting <script type="math/tex">x, y, z</script> variables
by <script type="math/tex">r(t)</script> point components 
in the formula of function <script type="math/tex">F(x,y,z)</script>:</p>

<script type="math/tex; mode=display">r(t) = \begin{bmatrix}r_x\\r_y\\r_z\end{bmatrix}</script>

<script type="math/tex; mode=display">F(r_x,r_y,r_z) = (r_x^2 + r_y^2 + r_z^2)^2 - 2 (R^2 + r^2) (r_x^2 + r_y^2 + r_z^2) + 4 R^2 r_y^2 + (R^2 - r^2)^2</script>

<p>And then we expand them to their full definition:</p>

<script type="math/tex; mode=display">r_x = o_x + d_x*t \\
r_y = o_y + d_y*t \\
r_z = o_z + d_z*t \\</script>

<p>After long and tedious calculations and a lot of grouping and 
simplifications we finally get:</p>

<script type="math/tex; mode=display">F(r(t)) = c_4 t^4 + c_3 t^3 + c_2 t^2 + c_1 t + c_0 = 0</script>

<p>where</p>

<script type="math/tex; mode=display">\begin{cases}
c_4 = (d_x^2 + d_y^2 + d_z^2)^2 \\
c_3 = 4 (d_x^2 + d_y^2 + d_z^2) (o_x d_x + o_y d_y + o_z d_z) \\
c_2 = 2 (d_x^2 + d_y^2 + d_z^2) (o_x^2 + o_y^2 + o_z^2 - (r^2 + R^2)) + 4 (o_x d_x + o_y d_y + o_z d_z)^2 + 4 R^2 d_y^2 \\
c_1 = 4 (o_x^2 + o_y^2 + o_z^2 - (r^2 + R^2)) (o_x d_x + o_y d_y + o_z d_z) + 8 R^2 o_y d_y \\
c_0 = (o_x^2 + o_y^2 + o_z^2 - (r^2 + R^2))^2 - 4 R^2 (r^2 - o_y^2)
\end{cases}</script>

<p>Since our equation is just a polynomial of 4th degree, we may use 
one of the standard algorithms to solve it. 
In my demo application I used algorithm from 
<a href="http://a.co/abkZKRO">Graphic Gems</a> book, freely available at
<a href="https://github.com/erich666/GraphicsGems/blob/master/gems/Roots3And4.c">GitHub</a>.
But you are free to use any other algorithm. In particular 
<a href="http://www.nrbook.com/a/bookcpdf.php">Numerical Recipes in C</a> 
book is a good source of numerical algorithms.</p>

<p>TIP: Unfortunately <code class="highlighter-rouge">Roots3And4.c</code> file from Graphic Gems (called <code class="highlighter-rouge">solver.js</code> 
in my demo app) is sparsely 
documented. If you want to know how finding roots of 4th
degree polynomial actually works please
read section from Wikipedia about 
<a href="https://en.wikipedia.org/wiki/Quartic_function#Ferrari's_solution">Ferrari method</a>,
but use second definition of the <em>resolvent cubic</em> described in <a href="https://en.wikipedia.org/wiki/Resolvent_cubic#Second_definition">this Wikipedia article</a>.
With a bit of effort you should be able to follow and understand source
code of the solver then.</p>

<h3 id="practical-considerations">Practical considerations</h3>

<ol>
  <li>
    <p>Currently we can only render tori centered at point <script type="math/tex">(0,0,0)</script> and laying
 on <script type="math/tex">XZ</script> plane. To obtain tori located at arbitrary points and/or in arbitrary
 positions,
 we must apply matrix transformations to the <em>ray</em>
 just before computing intersections with the torus surface.
 For example from the viewer point of view
 the results of the following operations are the same:
 translating ray by vector <script type="math/tex">(0,2,0)</script>,
 translating torus by vector <script type="math/tex">(0,-2,0)</script>.
 In my demo app this transformation is done in <code class="highlighter-rouge">RayTracer.js#rotationEnd</code>
 method. For more details please see <em>Ray Tracing from the Ground Up</em> book.</p>
  </li>
  <li>
    <p>Due to limited accuracy of the floating point computations
 artifacts may be seen when we use huge numerical values for torus radiuses.
 For the best results we should keep <script type="math/tex">% <![CDATA[
R,r < 10 %]]></script>.
 If you need huge tori in your scenes please use
 ray transformation technique described in point (1) to scale 
 small tori as needed.</p>
  </li>
  <li>
    <p>From performance point of view rendering a torus by solving its equation
 is slow. Rendering may be speed up considerably if we manage to avoid
 solving the equation altogether e.g. by using 
 <a href="https://en.wikipedia.org/wiki/Triangle_mesh">triangle meshes</a>.</p>
  </li>
</ol>

<h4 id="source-code">Source code</h4>

<p>As a part of preparations to write this post I created a
simple demo app that ray traces a torus:
<img src="assets/images/2018-05-06/demo-app-thumbnail.png" alt="Demo application" /></p>

<p>Source code can be downloaded from
<a href="https://github.com/marcin-chwedczuk/ray_tracing_torus_js">this GitHub repository</a>.</p>

<p>Application is written in JavaScript.
To run demo app execute:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">$ cd path/to/ray_tracing_torus_js/repo
$ npm install
$ bower install
$ gulp serve</code></pre></figure>

<p><code class="highlighter-rouge">npm install</code> command may take a while to finish, so please be patient.
Also notice that you have to had both <code class="highlighter-rouge">bower</code> and <code class="highlighter-rouge">gulp</code> installed
on you local machine to make this work. 
You can install them by executing:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">$ sudo npm install --global gulp-cli
$ sudo npm install --global bower</code></pre></figure>

<h4 id="references">References</h4>

<ul>
  <li>Ray Tracing from the Ground Up, Kevin Suffern, <a href="http://a.co/c5YAorf">Buy on Amazon</a></li>
  <li>Wikipedia, <a href="https://en.wikipedia.org/wiki/Torus">Torus entry</a></li>
  <li><a href="https://github.com/erich666/GraphicsGems/blob/master/gems/Roots3And4.c">Roots3And4.c from Graphic Gems</a></li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>.NET Core, HttpClient, Proxy and localhost</title>
	  <link>//dotnet-core-http-client-proxy-and-localhost</link>
	  <author>marcin-chwedczuk</author>
	  <pubDate>2018-05-03T02:00:00+02:00</pubDate>
	  <guid>//dotnet-core-http-client-proxy-and-localhost</guid>
	  <description><![CDATA[
	     <p>Recently I wanted to spy network traffic between a <code class="highlighter-rouge">HttpClient</code> and
a REST service. This task turned out to be more difficult than I
though.</p>

<p>My first challenge was to force <code class="highlighter-rouge">HttpClient</code> to use a proxy.
After a bit of googling I have found 
the following code:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">using</span> <span class="nn">System.Net</span><span class="p">;</span>
<span class="k">using</span> <span class="nn">System.Net.Http</span><span class="p">;</span>

<span class="n">var</span> <span class="n">builder</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ConfigurationBuilder</span><span class="p">()</span>
	 <span class="p">.</span><span class="nf">SetBasePath</span><span class="p">(</span><span class="n">Directory</span><span class="p">.</span><span class="nf">GetCurrentDirectory</span><span class="p">())</span>
	 <span class="p">.</span><span class="nf">AddJsonFile</span><span class="p">(</span><span class="s">"appsettings.json"</span><span class="p">);</span>
<span class="n">var</span> <span class="n">configuration</span> <span class="p">=</span> <span class="n">builder</span><span class="p">.</span><span class="nf">Build</span><span class="p">();</span>

<span class="n">var</span> <span class="n">webProxy</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">WebProxy</span><span class="p">(</span>
	 <span class="k">new</span> <span class="nf">Uri</span><span class="p">(</span><span class="n">configuration</span><span class="p">[</span><span class="s">"ProxyUri"</span><span class="p">]),</span> 
	 <span class="n">BypassOnLocal</span><span class="p">:</span> <span class="k">false</span><span class="p">);</span>

<span class="n">var</span> <span class="n">proxyHttpClientHandler</span> <span class="p">=</span> <span class="k">new</span> <span class="n">HttpClientHandler</span> <span class="p">{</span>
	 <span class="n">Proxy</span> <span class="p">=</span> <span class="n">webProxy</span><span class="p">,</span>
	 <span class="n">UseProxy</span> <span class="p">=</span> <span class="k">true</span><span class="p">,</span>
<span class="p">};</span>

<span class="n">var</span> <span class="n">httpClient</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">HttpClient</span><span class="p">(</span><span class="n">proxyHttpClientHandler</span><span class="p">)</span> <span class="p">{</span>
	 <span class="n">BaseAddress</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Uri</span><span class="p">(</span><span class="n">configuration</span><span class="p">[</span><span class="s">"RestServiceUri"</span><span class="p">])</span>
<span class="p">};</span></code></pre></figure>

<p>Unfortunately my REST service was exposed on <code class="highlighter-rouge">localhost</code>
and later I found out that proxies are not used for local requests:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="err">/*</span><span class="w"> </span><span class="err">appsettings.json</span><span class="w"> </span><span class="err">*/</span><span class="w">
</span><span class="p">{</span><span class="w">
    </span><span class="nt">"RestServiceUri"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:5001/api"</span><span class="p">,</span><span class="w">
    </span><span class="nt">"ProxyUri"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:8080"</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<p>OK, no problem I though,
let’s just add another DNS alias to localhost - 
just to fool <code class="highlighter-rouge">Uri</code> class to think 
that we are accessing some other machine.
This can be done by modifying <code class="highlighter-rouge">hosts</code> file, which
on my Ubuntu machine is located in <code class="highlighter-rouge">/etc</code> directory:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">127.0.0.1   localhost
127.0.0.2   mymachine</code></pre></figure>

<p>Then I had to change my <code class="highlighter-rouge">appsettings.json</code> file:</p>

<figure class="highlight"><pre><code class="language-json" data-lang="json"><span class="err">/*</span><span class="w"> </span><span class="err">appsettings.json</span><span class="w"> </span><span class="err">*/</span><span class="w">
</span><span class="p">{</span><span class="w">
    </span><span class="nt">"RestServiceUri"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://mymachine:5001/api"</span><span class="p">,</span><span class="w">
    </span><span class="nt">"ProxyUri"</span><span class="p">:</span><span class="w"> </span><span class="s2">"http://localhost:8080"</span><span class="w">
</span><span class="p">}</span></code></pre></figure>

<p>And my REST service configuration so that it will listen for
incoming connections on all interfaces:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="n">IWebHost</span> <span class="nf">BuildWebHost</span><span class="p">(</span><span class="kt">string</span><span class="p">[]</span> <span class="n">args</span><span class="p">)</span> <span class="p">=&gt;</span>
	<span class="n">WebHost</span><span class="p">.</span><span class="nf">CreateDefaultBuilder</span><span class="p">(</span><span class="n">args</span><span class="p">)</span>
		 <span class="p">.</span><span class="n">UseStartup</span><span class="p">&lt;</span><span class="n">Startup</span><span class="p">&gt;()</span>
		 <span class="p">.</span><span class="nf">UseUrls</span><span class="p">(</span><span class="s">"http://0.0.0.0:5001"</span><span class="p">)</span>
		 <span class="p">.</span><span class="nf">Build</span><span class="p">();</span></code></pre></figure>

<p>After all these preparations I was able to intercept traffic
using <a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project">ZAP Proxy</a>:
<img src="assets/images/2018-05-03/zap_1.png" alt="Intercepted traffix" /></p>

<p>But was this all necessary? Turns out that not really.
You may use your vanilla <code class="highlighter-rouge">HttpClient</code>:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">var</span> <span class="n">restServiceUri</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">Uri</span><span class="p">(</span><span class="n">configuration</span><span class="p">[</span><span class="s">"RestServiceUri"</span><span class="p">]);</span>
<span class="n">var</span> <span class="n">httpClient</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">HttpClient</span><span class="p">()</span> <span class="p">{</span>
    <span class="n">BaseAddress</span> <span class="p">=</span> <span class="n">restServiceUri</span>
<span class="p">};</span></code></pre></figure>

<p>And then just set <code class="highlighter-rouge">http_proxy</code> environmental variable to get
exactly the same behaviour (without any need to modify <code class="highlighter-rouge">hosts</code>, or
to force REST service to listen on all interfaces).
Just run in Bash:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">http_proxy=http://localhost:8080 dotnet run</code></pre></figure>

<p>Since I don’t have any machine with Windows/MacOS I cannot
confirm that it works on all OS’es, but at least it works
on my Ubuntu.</p>


	  ]]></description>
	</item>


</channel>
</rss>
