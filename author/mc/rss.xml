<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>marcin-chwedczuk.github.io/</title>
   
   <link></link>
   <description>A place where I share my thoughts about programming.</description>
   <language>en-uk</language>
   <managingEditor> </managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>WIP Ultimate guide to Scala's match expression</title>
	  <link>//ultimate-guide-to-scalas-match-expression</link>
	  <author></author>
	  <pubDate>2019-09-18T02:00:01+02:00</pubDate>
	  <guid>//ultimate-guide-to-scalas-match-expression</guid>
	  <description><![CDATA[
	     <p><strong>WORK IN PROGRESS</strong></p>

<p>Scala <code class="highlighter-rouge">match</code> expression is a very powerful tool.
In hands of an experienced programmer it can be used to
create concise and easy to understand code,
yet novice programmers are often intimidated by it.
In this blog post I will describe how <code class="highlighter-rouge">match</code> expression
work. We will start with the basics and end up with extractors.
After reading this post you will know how <code class="highlighter-rouge">case List(a, b, c)</code>
works and you should be able to write your own extractors.</p>

<h4 id="pattern-matching-values">Pattern matching values</h4>

<p><code class="highlighter-rouge">match</code> expression can be used (just like Java’s <code class="highlighter-rouge">switch</code>)
as a more robust <code class="highlighter-rouge">if</code> statement replacement.
For example we can write:</p>

<figure class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">val</span> <span class="n">command</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="n">fetchNextCommand</span><span class="o">()</span>

<span class="n">command</span> <span class="k">match</span> <span class="o">{</span>
  <span class="k">case</span> <span class="s">"ls"</span> <span class="k">=&gt;</span> <span class="n">printDirectoryContents</span><span class="o">()</span>
  <span class="k">case</span> <span class="s">"ps"</span> <span class="k">=&gt;</span> <span class="n">printProcesses</span><span class="o">()</span>
  <span class="k">case</span> <span class="s">"exit"</span> <span class="k">=&gt;</span> <span class="n">exitShell</span><span class="o">()</span>
<span class="o">}</span></code></pre></figure>

<p><code class="highlighter-rouge">match</code> expression, in opposite to Java’s <code class="highlighter-rouge">switch</code> is not
limited to strings, Enums and numeric types, but can also match
booleans, floating point numbers (although this makes little sense)
and <code class="highlighter-rouge">null</code>. We can also mix multiple types in a single <code class="highlighter-rouge">match</code>
expression:</p>

<figure class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">val</span> <span class="n">x</span><span class="k">:</span> <span class="kt">Any</span> <span class="o">=</span> <span class="mf">3.1415</span>

<span class="n">x</span> <span class="k">match</span> <span class="o">{</span>
  <span class="k">case</span> <span class="kc">true</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">"it's true"</span><span class="o">)</span>
  <span class="k">case</span> <span class="mi">3</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">"integer 3"</span><span class="o">)</span>
  <span class="k">case</span> <span class="mf">3.1415</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">"pi approximation"</span><span class="o">)</span>
  <span class="k">case</span> <span class="kc">null</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">"null"</span><span class="o">)</span>
  <span class="k">case</span> <span class="s">"foo"</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">"this 'foo' again!"</span><span class="o">)</span>
  <span class="k">case</span> <span class="sc">'a'</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">"character 'a'"</span><span class="o">)</span>
<span class="o">}</span>
<span class="c1">// Prints:
</span><span class="o">//</span> <span class="n">pi</span> <span class="n">approximation</span></code></pre></figure>

<p>When we match an Enum value we are not required to
provide cases for all possible values of the Enum:</p>

<figure class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">object</span> <span class="nc">Color</span> <span class="k">extends</span> <span class="nc">Enumeration</span> <span class="o">{</span>
  <span class="k">type</span> <span class="kt">Color</span> <span class="o">=</span> <span class="nc">Value</span>
  <span class="k">val</span> <span class="nc">White</span><span class="o">,</span> <span class="nc">Red</span><span class="o">,</span> <span class="nc">Green</span><span class="o">,</span> <span class="nc">Blue</span><span class="o">,</span> <span class="nc">Black</span> <span class="k">=</span> <span class="nc">Value</span>
<span class="o">}</span>

<span class="k">val</span> <span class="n">skyColor</span> <span class="k">=</span> <span class="nc">Color</span><span class="o">.</span><span class="nc">Blue</span>

<span class="k">val</span> <span class="n">weatherWildGuess</span> <span class="k">=</span> <span class="n">skyColor</span> <span class="k">match</span> <span class="o">{</span>
  <span class="k">case</span> <span class="nc">Color</span><span class="o">.</span><span class="nc">White</span> <span class="k">=&gt;</span> <span class="s">"snow?"</span>
  <span class="k">case</span> <span class="nc">Color</span><span class="o">.</span><span class="nc">Blue</span> <span class="k">=&gt;</span> <span class="s">"rain?"</span>
  <span class="k">case</span> <span class="nc">Color</span><span class="o">.</span><span class="nc">Black</span> <span class="k">=&gt;</span> <span class="s">"a volcano eruption?"</span>
<span class="o">}</span>

<span class="n">println</span><span class="o">(</span><span class="n">weatherWildGuess</span><span class="o">)</span>
<span class="c1">// Prints:
</span><span class="o">//</span> <span class="n">rain</span><span class="o">?</span></code></pre></figure>

<p>When a value cannot be matched with any of the <code class="highlighter-rouge">case</code> clauses
a <code class="highlighter-rouge">scala.MatchError</code> runtime exception is thrown.
A special “catch all” case can be
provided to handle all previously unmatched values 
(Scala’s <code class="highlighter-rouge">case _</code> is a counterpart to Java’s <code class="highlighter-rouge">switch</code> <code class="highlighter-rouge">default</code> label):</p>

<figure class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">val</span> <span class="n">weatherWildGuess</span> <span class="k">=</span> <span class="n">skyColor</span> <span class="k">match</span> <span class="o">{</span>
  <span class="k">case</span> <span class="nc">Color</span><span class="o">.</span><span class="nc">White</span> <span class="k">=&gt;</span> <span class="s">"snow?"</span>
  <span class="k">case</span> <span class="nc">Color</span><span class="o">.</span><span class="nc">Blue</span> <span class="k">=&gt;</span> <span class="s">"rain?"</span>
  <span class="k">case</span> <span class="nc">Color</span><span class="o">.</span><span class="nc">Black</span> <span class="k">=&gt;</span> <span class="s">"a volcano eruption?"</span>
  <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="s">"I don't know"</span>
<span class="o">}</span></code></pre></figure>

<p>“catch all” case should be the last one. 
Patterns are matched from top to bottom and the procedure
stops on the first matching <code class="highlighter-rouge">case</code> clause.</p>

<p>Sometimes we want to access the value matched by “catch all” case.
This is very simple we just need to replace wildcard pattern (<code class="highlighter-rouge">_</code>)
with a variable name:</p>

<figure class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">val</span> <span class="n">weatherWildGuess</span> <span class="k">=</span> <span class="n">skyColor</span> <span class="k">match</span> <span class="o">{</span>
  <span class="k">case</span> <span class="nc">Color</span><span class="o">.</span><span class="nc">White</span> <span class="k">=&gt;</span> <span class="s">"snow?"</span>
  <span class="k">case</span> <span class="nc">Color</span><span class="o">.</span><span class="nc">Blue</span> <span class="k">=&gt;</span> <span class="s">"rain?"</span>
  <span class="k">case</span> <span class="nc">Color</span><span class="o">.</span><span class="nc">Black</span> <span class="k">=&gt;</span> <span class="s">"a volcano eruption?"</span>
  <span class="k">case</span> <span class="n">unknownColor</span> <span class="k">=&gt;</span> <span class="k">throw</span> <span class="k">new</span> <span class="nc">IllegalArgumentException</span><span class="o">(</span>
      <span class="n">s</span><span class="s">"Cannot guess weather for sky color: "</span> <span class="o">+</span> <span class="n">unknownColor</span><span class="o">)</span>
<span class="o">}</span></code></pre></figure>

<p>Often it is required to execute the same code for multiple values.
With <code class="highlighter-rouge">match</code> this can be done using <code class="highlighter-rouge">|</code> operator:</p>

<figure class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="n">answer</span><span class="o">.</span><span class="n">toLowerCase</span> <span class="k">match</span> <span class="o">{</span>
  <span class="k">case</span> <span class="s">"y"</span> <span class="o">|</span> <span class="s">"yes"</span> <span class="o">|</span> <span class="s">"ok"</span> <span class="o">|</span> <span class="s">"proceed"</span> <span class="k">=&gt;</span>
    <span class="n">executeOperation</span><span class="o">()</span>
  <span class="k">case</span> <span class="s">"n"</span> <span class="o">|</span> <span class="s">"no"</span> <span class="o">|</span> <span class="s">"abort"</span> <span class="k">=&gt;</span>
    <span class="n">abortOperation</span><span class="o">()</span>
  <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span>
    <span class="n">askAgain</span><span class="o">()</span>
<span class="o">}</span></code></pre></figure>

<p><code class="highlighter-rouge">match</code> can also be used to match against <code class="highlighter-rouge">null</code>:</p>

<figure class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">val</span> <span class="n">nullableValue</span><span class="k">:</span> <span class="kt">String</span> <span class="o">=</span> <span class="kc">null</span> 

<span class="k">val</span> <span class="n">option</span> <span class="k">=</span> <span class="n">nullableValue</span> <span class="k">match</span> <span class="o">{</span>
  <span class="k">case</span> <span class="kc">null</span> <span class="k">=&gt;</span> <span class="nc">None</span>
  <span class="k">case</span> <span class="n">s</span> <span class="k">=&gt;</span> <span class="nc">Some</span><span class="o">(</span><span class="n">s</span><span class="o">)</span>
<span class="o">}</span>

<span class="n">println</span><span class="o">(</span><span class="n">option</span><span class="o">)</span></code></pre></figure>

<p>Matching against Double <code class="highlighter-rouge">NaN</code> value is more problematic, since
<code class="highlighter-rouge">NaN == NaN</code> must always return <code class="highlighter-rouge">false</code> according to IEEE 754
Standard. To match against <code class="highlighter-rouge">NaN</code> we need to use a pattern guard:</p>

<figure class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">val</span> <span class="n">d</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="nc">Double</span><span class="o">.</span><span class="nc">NaN</span>

<span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="n">d</span> <span class="k">match</span> <span class="o">{</span>
  <span class="k">case</span> <span class="nc">Double</span><span class="o">.</span><span class="nc">PositiveInfinity</span> <span class="k">=&gt;</span> <span class="s">"+∞"</span>

  <span class="c1">// WRONG way to match NaN
</span>  <span class="k">case</span> <span class="nc">Double</span><span class="o">.</span><span class="nc">NaN</span> <span class="k">=&gt;</span> <span class="s">"this does not work"</span>
  <span class="c1">// RIGHT way to match NaN
</span>  <span class="k">case</span> <span class="n">value</span> <span class="k">if</span> <span class="n">value</span><span class="o">.</span><span class="n">isNaN</span> <span class="k">=&gt;</span> <span class="s">"NaN"</span>

  <span class="c1">// catch-all
</span>  <span class="k">case</span> <span class="n">value</span> <span class="k">=&gt;</span> <span class="n">value</span><span class="o">.</span><span class="n">toString</span>
<span class="o">}</span>

<span class="n">println</span><span class="o">(</span><span class="n">result</span><span class="o">)</span></code></pre></figure>

<p>We will return to pattern guards later.</p>

<h4 id="pattern-matching-types">Pattern matching types</h4>

<p>Besides matching values <code class="highlighter-rouge">match</code> can also perform <code class="highlighter-rouge">instanceof</code> tests:</p>

<figure class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">val</span> <span class="n">something</span><span class="k">:</span> <span class="kt">Any</span> <span class="o">=</span> <span class="k">new</span> <span class="n">java</span><span class="o">.</span><span class="n">util</span><span class="o">.</span><span class="nc">Random</span><span class="o">()</span>

<span class="n">something</span> <span class="k">match</span> <span class="o">{</span>
  <span class="k">case</span> <span class="k">_:</span> <span class="kt">String</span> <span class="o">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">"a string!"</span><span class="o">)</span>
  <span class="k">case</span> <span class="k">_:</span> <span class="kt">Int</span> <span class="o">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">"an int!"</span><span class="o">)</span>
  <span class="k">case</span> <span class="k">_:</span> <span class="kt">java.util.Random</span> <span class="o">=&gt;</span>
    <span class="n">println</span><span class="o">(</span><span class="s">"A Random instance!"</span><span class="o">)</span>
  <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="n">println</span><span class="o">(</span><span class="s">"type unknown!"</span><span class="o">)</span>
<span class="o">}</span></code></pre></figure>

<p>As usual on JVM <code class="highlighter-rouge">instanceof</code> tests will not work with
parametrized types 
(while <code class="highlighter-rouge">class List&lt;T&gt;</code> is a generic type, 
<code class="highlighter-rouge">List&lt;T&gt;</code> usage like <code class="highlighter-rouge">List&lt;String&gt;</code> is
called a parametetrized type). 
<a href="https://en.wikipedia.org/wiki/Generics_in_Java#Problems_with_type_erasure">Type erasure</a>
is here to blame:</p>

<figure class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="c1">// DO NOT WORK
</span><span class="k">val</span> <span class="n">x</span><span class="k">:</span> <span class="kt">Any</span> <span class="o">=</span> <span class="nc">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">](</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">)</span>

<span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="n">x</span> <span class="k">match</span> <span class="o">{</span>
  <span class="k">case</span> <span class="k">_:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=&gt;</span> <span class="s">"string list"</span> <span class="c1">// unreachable code warning
</span>  <span class="k">case</span> <span class="k">_:</span> <span class="kt">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">]</span> <span class="k">=&gt;</span> <span class="s">"int list"</span> <span class="c1">// unreachable code warning
</span><span class="o">}</span>

<span class="n">println</span><span class="o">(</span><span class="n">result</span><span class="o">)</span>
<span class="c1">// Prints:
</span><span class="o">//</span> <span class="n">string</span> <span class="n">list</span> <span class="o">(</span><span class="n">sic</span><span class="o">!)</span></code></pre></figure>

<p>But not all is lost, we can still preform type tests
on generic types using wildcards (Scala <code class="highlighter-rouge">_</code> is a conterpart of Java <code class="highlighter-rouge">?</code>,
consider Scala’s <code class="highlighter-rouge">List[_]</code> and Java’s <code class="highlighter-rouge">List&lt;?&gt;</code>):</p>

<figure class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">val</span> <span class="n">x</span><span class="k">:</span> <span class="kt">Any</span> <span class="o">=</span> <span class="nc">List</span><span class="o">[</span><span class="kt">Int</span><span class="o">](</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">,</span><span class="mi">3</span><span class="o">)</span>

<span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="n">x</span> <span class="k">match</span> <span class="o">{</span>
  <span class="k">case</span> <span class="k">_:</span> <span class="kt">Map</span><span class="o">[</span><span class="k">_</span>, <span class="k">_</span><span class="o">]</span> <span class="k">=&gt;</span> <span class="s">"a map"</span>
  <span class="k">case</span> <span class="k">_:</span> <span class="kt">List</span><span class="o">[</span><span class="k">_</span><span class="o">]</span> <span class="k">=&gt;</span> <span class="s">"a list"</span>
  <span class="k">case</span> <span class="k">_:</span> <span class="kt">java.util.List</span><span class="o">[</span><span class="k">_</span><span class="o">]</span> <span class="k">=&gt;</span> <span class="s">"a java's list"</span>
<span class="o">}</span>

<span class="n">println</span><span class="o">(</span><span class="n">result</span><span class="o">)</span>
<span class="c1">// Prints:
</span><span class="o">//</span> <span class="n">a</span> <span class="n">list</span></code></pre></figure>

<p>So far we where not interested in the actual value of the variable,
but only in it’s type and so we just discarded the value using <code class="highlighter-rouge">case _: Type</code>
clause.
But nothing prevents us from assigning the already type checked
value to a variable of the target type:</p>

<figure class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="n">x</span> <span class="k">match</span> <span class="o">{</span>
  <span class="k">case</span> <span class="n">map</span><span class="k">:</span> <span class="kt">Map</span><span class="o">[</span><span class="k">_</span>, <span class="k">_</span><span class="o">]</span> <span class="k">=&gt;</span> <span class="n">map</span><span class="o">.</span><span class="n">size</span> <span class="o">*</span> <span class="mi">2</span>
  <span class="k">case</span> <span class="n">list</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="k">_</span><span class="o">]</span> <span class="k">=&gt;</span> <span class="n">list</span><span class="o">.</span><span class="n">size</span>
  <span class="k">case</span> <span class="n">jlist</span><span class="k">:</span> <span class="kt">java.util.List</span><span class="o">[</span><span class="k">_</span><span class="o">]</span> <span class="k">=&gt;</span> <span class="n">jlist</span><span class="o">.</span><span class="n">size</span>
  <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="mi">0</span>
<span class="o">}</span></code></pre></figure>

<p>Actually every <code class="highlighter-rouge">case</code> clause creates it’s own lexical scope.
This means that we can reuse variable names across different <code class="highlighter-rouge">case</code>es:</p>

<figure class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="n">x</span> <span class="k">match</span> <span class="o">{</span>
  <span class="k">case</span> <span class="n">list</span><span class="k">:</span> <span class="kt">java.util.List</span><span class="o">[</span><span class="k">_</span><span class="o">]</span> <span class="k">=&gt;</span>
    <span class="k">val</span> <span class="n">tmp</span> <span class="k">=</span> <span class="mi">10</span>
    <span class="n">list</span><span class="o">.</span><span class="n">size</span> <span class="o">+</span> <span class="n">tmp</span>

  <span class="k">case</span> <span class="n">list</span><span class="k">:</span> <span class="kt">List</span><span class="o">[</span><span class="k">_</span><span class="o">]</span> <span class="k">=&gt;</span>
    <span class="k">val</span> <span class="n">tmp</span> <span class="k">=</span> <span class="mi">1</span>
    <span class="n">list</span><span class="o">.</span><span class="n">size</span> <span class="o">+</span> <span class="n">tmp</span>
<span class="o">}</span></code></pre></figure>

<p>Pipe operator can be used with type checks too, but the
resulting code isn’t very readable:</p>

<figure class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="n">x</span> <span class="k">match</span> <span class="o">{</span>
  <span class="k">case</span> <span class="k">_:</span><span class="kt">Short</span> <span class="kt">|</span> <span class="k">_</span><span class="kt">:Int</span> <span class="kt">|</span> <span class="k">_</span><span class="kt">:Long</span> <span class="o">=&gt;</span>
    <span class="n">println</span><span class="o">(</span><span class="s">"a number!"</span><span class="o">)</span>
<span class="o">}</span></code></pre></figure>

<p>If we want to use the value matched by this
pattern we need to use a pattern binder:</p>

<figure class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="n">x</span> <span class="k">match</span> <span class="o">{</span>
  <span class="k">case</span> <span class="n">num</span><span class="o">@(</span><span class="k">_:</span><span class="kt">Short</span> <span class="kt">|</span> <span class="k">_</span><span class="kt">:Int</span> <span class="kt">|</span> <span class="k">_</span><span class="kt">:Long</span><span class="o">)</span> <span class="k">=&gt;</span>
    <span class="n">println</span><span class="o">(</span><span class="n">num</span><span class="o">.</span><span class="n">asInstanceOf</span><span class="o">[</span><span class="kt">Number</span><span class="o">].</span><span class="n">doubleValue</span><span class="o">())</span>
<span class="o">}</span></code></pre></figure>

<p>Pattern binders allow us to assign a value
that matches a <em>subpattern</em> to a variable.
In the extreme case this <em>subpattern</em> can be the entire
pattern, as it is in our case. We will return to
the pattern binders later.</p>

<h4 id="pattern-guards">Pattern guards</h4>

<p>When pattern matching values, we often need to preform
some additional checks e.g. say we want to match all odd
or even integers. We can use pattern guards for this purpose:</p>

<figure class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">for</span> <span class="o">(</span><span class="n">i</span> <span class="k">&lt;-</span> <span class="mi">1</span> <span class="n">to</span> <span class="mi">10</span><span class="o">)</span> <span class="o">{</span>
  <span class="n">i</span> <span class="k">match</span> <span class="o">{</span>
    <span class="k">case</span> <span class="n">i</span> <span class="k">if</span> <span class="o">(</span><span class="n">i</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">0</span><span class="o">)</span> <span class="k">=&gt;</span>
      <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">"$i is even"</span><span class="o">)</span>
    <span class="k">case</span> <span class="n">i</span> <span class="k">if</span> <span class="o">(</span><span class="n">i</span><span class="o">%</span><span class="mi">2</span> <span class="o">==</span> <span class="mi">1</span><span class="o">)</span> <span class="k">=&gt;</span>
      <span class="n">println</span><span class="o">(</span><span class="n">s</span><span class="s">"$i is odd"</span><span class="o">)</span>
  <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>Since pattern guards use predicates (expressions that
return either <code class="highlighter-rouge">true</code> or <code class="highlighter-rouge">false</code>) they are very flexible.
We can express both value and type checks using only
pattern guards:</p>

<figure class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">val</span> <span class="n">x</span><span class="k">:</span> <span class="kt">Any</span> <span class="o">=</span> <span class="mi">3</span>
<span class="n">x</span> <span class="k">match</span> <span class="o">{</span>
  <span class="k">case</span> <span class="k">_</span> <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="s">"foo"</span> <span class="k">=&gt;</span>
    <span class="s">"it's this 'foo' again!"</span>
  <span class="k">case</span> <span class="k">_</span> <span class="k">if</span> <span class="n">x</span> <span class="o">==</span> <span class="mi">3</span> <span class="k">=&gt;</span>
    <span class="s">"it's three!"</span>
<span class="o">}</span>

<span class="k">val</span> <span class="n">t</span><span class="k">:</span> <span class="kt">Any</span> <span class="o">=</span> <span class="s">"foo"</span>
<span class="n">t</span> <span class="k">match</span> <span class="o">{</span>
  <span class="k">case</span> <span class="n">tmp</span> <span class="k">if</span> <span class="n">tmp</span><span class="o">.</span><span class="n">isInstanceOf</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span> <span class="k">=&gt;</span>
    <span class="k">val</span> <span class="n">ss</span> <span class="k">=</span> <span class="n">tmp</span><span class="o">.</span><span class="n">asInstanceOf</span><span class="o">[</span><span class="kt">String</span><span class="o">]</span>
    <span class="n">println</span><span class="o">(</span><span class="s">"it's a string: "</span> <span class="o">+</span> <span class="n">ss</span><span class="o">)</span>
<span class="o">}</span></code></pre></figure>

<p>The problem with pattern guards is that they are
imperative. We should try to avoid them
as much as possible. Later we will learn about
extractors, that roughly speaking do the same
job as guards but in a more declarative way.</p>

<p>TODO:</p>

<p>Extractors:</p>
<ul>
  <li>Boolean extractors (IsOdd, IsEven)
    <ul>
      <li>Can I use variable alias?</li>
    </ul>
  </li>
  <li>Single value extractors (String -&gt; Integer)</li>
  <li>Multiple (fixed) value extractors (JavaList)
    <ul>
      <li>Discards with <code class="highlighter-rouge">_</code></li>
    </ul>
  </li>
  <li>Extractor nesting (JavaList + EmptyList)
    <ul>
      <li>Example with monadic for - how the code looks like</li>
    </ul>
  </li>
  <li>Multiple seq value extractors JavaList2
    <ul>
      <li><code class="highlighter-rouge">foo @ _*</code> binding</li>
    </ul>
  </li>
  <li>Variable aliases</li>
</ul>

<p>Extractor real-world usage:</p>
<ul>
  <li>Case class alias (extractor)</li>
  <li>Matching tuples</li>
  <li>Matching Lists (extractor)</li>
  <li>Regex extractors</li>
</ul>

<p>Trouble shooting:</p>
<ul>
  <li>https://stackoverflow.com/a/6173342/1779504 <code class="highlighter-rouge">foo</code></li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>Floating point numbers and Unit Testing</title>
	  <link>//doubles-and-unit-testing</link>
	  <author></author>
	  <pubDate>2019-09-18T02:00:01+02:00</pubDate>
	  <guid>//doubles-and-unit-testing</guid>
	  <description><![CDATA[
	     <p>Floating point numbers are inherently imprecise.
This can be problematic when we try to unit test
numerical algorithms.
Let’s see this on an example
(JVM/Scala, ScalaTest used as a testing framework):</p>

<figure class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="s">"squaring should work"</span> <span class="n">in</span> <span class="o">{</span>
    <span class="k">val</span> <span class="n">d</span> <span class="k">=</span> <span class="mf">0.6168705534069904</span>

    <span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="n">d</span><span class="o">*</span><span class="n">d</span>

    <span class="n">result</span> <span class="n">should</span> <span class="n">be</span><span class="o">(</span><span class="mf">0.3805292796606466</span><span class="o">)</span>
<span class="o">}</span></code></pre></figure>

<p>This test works just fine… until someone decides to
do a “harmless refactoring” and replaces <code class="highlighter-rouge">d*d</code> by <code class="highlighter-rouge">Math.pow(d, 2)</code>:</p>

<figure class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="s">"squaring should work"</span> <span class="n">in</span> <span class="o">{</span>
    <span class="k">val</span> <span class="n">d</span> <span class="k">=</span> <span class="mf">0.6168705534069904</span>

    <span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="nc">Math</span><span class="o">.</span><span class="n">pow</span><span class="o">(</span><span class="n">d</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span>

    <span class="n">result</span> <span class="n">should</span> <span class="n">be</span><span class="o">(</span><span class="mf">0.3805292796606466</span><span class="o">)</span>
<span class="o">}</span></code></pre></figure>

<p>Now the test fails with the following message:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">0.38052927966064654 was not equal to 0.3805292796606466</code></pre></figure>

<p>The expected and the actual values differ by ~5.6E-17.
Doubles offer precision of about 15 significant digits in a result.
All the other digits after 15th digit are just noise that should be
ignored.</p>

<p>To make our unit-test more robust we have two strategies.
The first strategy is to know the precision that is guaranteed by the algorithm
that we are using, and to round the result to that
precision before returning it to the client:</p>

<figure class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">def</span> <span class="n">square</span><span class="o">(</span><span class="n">d</span><span class="k">:</span> <span class="kt">Double</span><span class="o">)</span><span class="k">:</span> <span class="kt">Double</span> <span class="o">=</span> <span class="o">{</span>
    <span class="k">val</span> <span class="n">d2</span> <span class="k">=</span> <span class="nc">Math</span><span class="o">.</span><span class="n">pow</span><span class="o">(</span><span class="n">d</span><span class="o">,</span> <span class="mi">2</span><span class="o">)</span>
    <span class="c1">// Precision from org.apache.commons:commons-math3:3.6.1
</span>    <span class="k">return</span> <span class="nc">Precision</span><span class="o">.</span><span class="n">round</span><span class="o">(</span><span class="n">d2</span><span class="o">,</span> <span class="mi">8</span><span class="o">)</span>
<span class="o">}</span>

<span class="s">"squaring should work"</span> <span class="n">in</span> <span class="o">{</span>
    <span class="k">val</span> <span class="n">d</span> <span class="k">=</span> <span class="mf">0.6168705534069904</span>

    <span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="n">square</span><span class="o">(</span><span class="n">d</span><span class="o">)</span>

    <span class="n">result</span> <span class="n">should</span> <span class="n">be</span><span class="o">(</span><span class="mf">0.38052928</span><span class="o">)</span> <span class="c1">// rounded
</span><span class="o">}</span></code></pre></figure>

<p>The second strategy is to use assertions intended to work
with floating point numbers. Again to use them correctly we need to
be aware of the precision of our algorithm:</p>

<figure class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="s">"squaring should work"</span> <span class="n">in</span> <span class="o">{</span>
    <span class="k">val</span> <span class="n">d</span> <span class="k">=</span> <span class="mf">0.6168705534069904</span>

    <span class="k">val</span> <span class="n">result</span> <span class="k">=</span> <span class="n">d</span><span class="o">*</span><span class="n">d</span>

    <span class="n">result</span> <span class="n">should</span> <span class="n">be</span><span class="o">(</span><span class="mf">0.3805292796606466</span> <span class="o">+-</span> <span class="mf">0.000000005</span><span class="o">)</span>
<span class="o">}</span></code></pre></figure>

<p>In this case it is good to define the precision
as a global constant (or as a constant per algorithm).</p>

<p>Personally I prefer the first strategy, but with
either of them our tests will be more robust and
refactoring-friendly.</p>

<h4 id="troubles-with-nan">Troubles with NaN</h4>

<p>Totally different set of problems are connected to <code class="highlighter-rouge">NaN</code> values.
On JVM operator <code class="highlighter-rouge">==</code> and <code class="highlighter-rouge">equals</code> behave 
inconsistently when comparing <code class="highlighter-rouge">NaN</code>s:</p>

<figure class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="s">"Jvm's Double"</span> <span class="n">should</span> <span class="o">{</span>
    <span class="s">"follow JVM spec"</span> <span class="n">in</span> <span class="o">{</span>
        <span class="k">val</span> <span class="n">nan</span> <span class="k">=</span> <span class="nc">Double</span><span class="o">.</span><span class="nc">NaN</span><span class="o">;</span>

        <span class="c1">// Required by IEEE 754 Standard
</span>        <span class="o">(</span><span class="n">nan</span> <span class="o">==</span> <span class="n">nan</span><span class="o">)</span> <span class="n">should</span> <span class="n">be</span><span class="o">(</span><span class="kc">false</span><span class="o">)</span>

        <span class="c1">// Required by JVM Object#equals contract:
</span>        <span class="c1">// "for any non-null reference value x,
</span>        <span class="c1">//  x.equals(x) should return true"
</span>        <span class="n">nan</span><span class="o">.</span><span class="n">equals</span><span class="o">(</span><span class="n">nan</span><span class="o">)</span> <span class="n">should</span> <span class="n">be</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>Unit testing frameworks often do not help here much.
For example the following test:</p>

<figure class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="s">"how to check that a value is NaN?"</span> <span class="n">in</span> <span class="o">{</span>
    <span class="k">val</span> <span class="n">nan</span> <span class="k">=</span> <span class="nc">Double</span><span class="o">.</span><span class="nc">NaN</span><span class="o">;</span>
    <span class="n">nan</span> <span class="n">should</span> <span class="n">be</span><span class="o">(</span><span class="n">nan</span><span class="o">)</span>
<span class="o">}</span></code></pre></figure>

<p>will fail with a rather unhelpful message:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">NaN was not equal to NaN</code></pre></figure>

<p>According to ScalaTest guidelines we should use <code class="highlighter-rouge">Double#isNaN</code>
to check if a value is <code class="highlighter-rouge">NaN</code>:</p>

<figure class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="s">"how to check that a value is NaN?"</span> <span class="n">in</span> <span class="o">{</span>
    <span class="k">val</span> <span class="n">nan</span> <span class="k">=</span> <span class="nc">Double</span><span class="o">.</span><span class="nc">NaN</span><span class="o">;</span>
    <span class="n">nan</span><span class="o">.</span><span class="n">isNaN</span> <span class="n">should</span> <span class="n">be</span><span class="o">(</span><span class="kc">true</span><span class="o">)</span>
<span class="o">}</span></code></pre></figure>

<p>We experience similar troubles when we try to
compare case classes containing double fields with <code class="highlighter-rouge">NaN</code> values:</p>

<figure class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">case</span> <span class="k">class</span> <span class="nc">CaseClass</span><span class="o">(</span><span class="n">d1</span><span class="k">:</span> <span class="kt">Double</span><span class="o">,</span>
                     <span class="n">d2</span><span class="k">:</span> <span class="kt">Double</span><span class="o">)</span>

<span class="c1">// In test code:
</span><span class="k">val</span> <span class="n">inf</span> <span class="k">=</span> <span class="nc">Double</span><span class="o">.</span><span class="nc">PositiveInfinity</span>
<span class="k">val</span> <span class="n">nan</span> <span class="k">=</span> <span class="nc">Double</span><span class="o">.</span><span class="nc">NaN</span>

<span class="nc">CaseClass</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">)</span> <span class="n">shouldBe</span><span class="o">(</span><span class="nc">CaseClass</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span><span class="mi">2</span><span class="o">))</span>
<span class="nc">CaseClass</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="o">+</span><span class="mf">0.0</span><span class="o">)</span> <span class="n">shouldBe</span><span class="o">(</span><span class="nc">CaseClass</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="o">-</span><span class="mf">0.0</span><span class="o">))</span>
<span class="nc">CaseClass</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">inf</span><span class="o">)</span> <span class="n">shouldBe</span><span class="o">(</span><span class="nc">CaseClass</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">inf</span><span class="o">))</span>

<span class="c1">// fails: CaseData(1.0,NaN) was not equal to CaseData(1.0,NaN)
</span><span class="nc">CaseClass</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">nan</span><span class="o">)</span> <span class="n">shouldBe</span><span class="o">(</span><span class="nc">CaseClass</span><span class="o">(</span><span class="mi">1</span><span class="o">,</span> <span class="n">nan</span><span class="o">))</span></code></pre></figure>

<p>I do not have a good solution for this problem.
We can either create a custom assertion for a given case class ourselves,
define a custom equality using 
<a href="http://www.scalactic.org/user_guide/CustomEquality">Scalactic</a>
or we can use <code class="highlighter-rouge">Option[Double]</code> and
somehow map <code class="highlighter-rouge">NaN</code>s to <code class="highlighter-rouge">Option</code>s <code class="highlighter-rouge">None</code>.
None of the solutions is great.</p>

<p>The last thing to remember is that we cannot <code class="highlighter-rouge">match</code> <code class="highlighter-rouge">NaN</code> values:</p>

<figure class="highlight"><pre><code class="language-scala" data-lang="scala"><span class="k">val</span> <span class="n">x</span> <span class="k">=</span> <span class="nc">Double</span><span class="o">.</span><span class="nc">NaN</span>

<span class="c1">// will fail
</span><span class="n">x</span> <span class="k">match</span> <span class="o">{</span>
    <span class="k">case</span> <span class="nc">Double</span><span class="o">.</span><span class="nc">NaN</span> <span class="k">=&gt;</span> <span class="n">doStuff</span><span class="o">()</span>
    <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="n">fail</span><span class="o">(</span><span class="s">"NaN not matched!"</span><span class="o">)</span>
<span class="o">}</span>

<span class="c1">// how to do it properly
</span><span class="n">x</span> <span class="k">match</span> <span class="o">{</span>
    <span class="k">case</span> <span class="n">value</span><span class="nd">@_</span> <span class="k">if</span> <span class="n">value</span><span class="o">.</span><span class="n">isNaN</span> <span class="k">=&gt;</span> <span class="n">doStuff</span><span class="o">()</span>
    <span class="k">case</span> <span class="k">_</span> <span class="k">=&gt;</span> <span class="n">fail</span><span class="o">(</span><span class="s">"NaN not matched!"</span><span class="o">)</span>
<span class="o">}</span></code></pre></figure>


	  ]]></description>
	</item>

	<item>
	  <title>Odroid GO Review</title>
	  <link>//odroid-go-review</link>
	  <author></author>
	  <pubDate>2019-04-14T02:00:01+02:00</pubDate>
	  <guid>//odroid-go-review</guid>
	  <description><![CDATA[
	     <blockquote>
  <p>A Master Programmer passed a novice programmer one day.</p>

  <p>The Master noted the novice’s preoccupation with a hand-held computer game.</p>

  <p>“Excuse me,” he said, “may I examine it?”</p>

  <p>The novice bolted to attention and handed the device to the Master. “I see that the device claims to have three levels of play: Easy, Medium, and Hard,” said the Master. “Yet every such device has another level of play, where the device seeks not to conquer the human, nor to be conquered by the human.”</p>

  <p>“Pray, Great Master,” implored the novice, “how does one find this mysterious setting?”</p>

  <p>The Master dropped the device to the ground and crushed it with his heel. Suddenly the novice was enlightened.</p>

  <p>Excerpt from <a href="http://www.mit.edu/~xela/tao.html">Tao of Programming</a></p>
</blockquote>

<p>Be warned, the device that I am going to present is both
addictive and may cause your programming skills to deteriorate.
Use with moderation!</p>

<p>So 3, 2, 1… Ladies and Gentlemen, here it is Odroid GO:
<img src="assets/images/2019-04-14/go1.jpg" alt="Odroid GO" />
Game console for geeks and nerds. Out of the box (I mean after
you assemble it) it supports all popular ROM’s. In practice I found
that GameBoy Color roms work the best. NES roms often caused
the emulator to hang and GameBoy roms are eh… without colors.
All in all I managed to run on Odroid GO all popular games 
from my childhood, like
Super Mario Bross Delux and Croc without any troubles.</p>

<p>One minor problem that this console has and I find annoying
is how game state saving works.
Usually game builtin SAVE option will not work with the emulator,
instead Odroid GO provides its own way of saving games.
Basically when you finished playing a game you must press
MENU button and only then turn off the device, otherwise
your game progress will be lost. This was a little bit annoying
in the beginning but I quickly get used to it.</p>

<p>One great aspect of this console is its price. I bought mine
for about 200PLN which for this kind of device (multi-color screen,
Arduino like CPU, battery included)
should be considered a very good deal.</p>

<p>Odroid GO stores roms and game states on a microSD card that
is not included in the kit. 
You can buy one e.g. Kingston micro SDHC 16GB
for about 15PLN so this should not be a problem.
Also remember that you will need an
<em>SD card reader</em> to upload firmware and roms to the microSD card.
Maybe your laptop already has one? If not you will need to buy or
borrow one.</p>

<p>By now it should be clear that Odroid GO comes as <a href="https://wiki.odroid.com/odroid_go/go_assembling">a DIY kit</a>.
In other to assemble it correctly you will need to go through the
<a href="https://wiki.odroid.com/odroid_go/go_assembling">official guide</a>.
Also watch <a href="https://www.youtube.com/watch?v=6wwHmgX5U3w">this video</a>
before you start assembling.</p>

<p>During the assembly you will need a few tools:</p>

<ul>
  <li>A small screwdriver for “cross” screws.
 If you own a precision screwdriver set you should be fine.</li>
  <li>An utility knife (box cutter) to remove buttons from the frame.</li>
  <li>[OPTIONAL] A latex gloves to avoid leaving greasy marks
 on the screen while putting it into the frame.</li>
</ul>

<p>The assembly takes about half an hour to complete.
Once you are done
you will have to format your SD card and copy firmware and roms
there.
All these steps are described with much detail in the
official guide.</p>

<p>For me the most difficult step was connecting the screen to the
main board. The socket is very delicate and you must be
extra careful not to damage it.
<img src="assets/images/2019-04-14/go2.jpg" alt="Screen mainboard connection" />
Also remember that after you close a lock on the socket it will
be very hard to open the lock again.
You should strive to connect the screen during the first try.
This may sound difficult but believe me it is not.
I am sure you will be fine!</p>

<p>After using Odroid GO for some time, I must admit that it
is quite comfortable to use. Is is not too heavy and
quite pleasant to handle. The battery suffice for at least
eight hours of playing Super Mario Bros.</p>

<p>Final verdict: If you are a fan of old school games
definitely buy this device. You will not be disappointed!</p>


	  ]]></description>
	</item>

	<item>
	  <title>Kensington Orbit Trackball review</title>
	  <link>//kensington-orbit-trackball-review</link>
	  <author></author>
	  <pubDate>2019-04-14T02:00:00+02:00</pubDate>
	  <guid>//kensington-orbit-trackball-review</guid>
	  <description><![CDATA[
	     <p>Since about three months I use 
<a href="https://www.kensington.com/p/products/control/trackballs/orbit-trackball-with-scroll-ring/">Kensington Orbit Trackball</a>
as my only pointing device.
This is my very first trackball, I bought it for about 180PLN.</p>

<p><img src="assets/images/2019-04-14/t1.jpg" alt="Kensington Orbit Trackball" /></p>

<p>Kensington Orbit Trackball is a “stationary device”,
good for a PC or for a laptop with docking station, but not
very mobile.
The device by itself takes more space than a mouse, but since
it does not require any movements, you end up with a huge desk space savings.
In my case I ended up needing only about one third of
the space that I needed for my mouse.</p>

<p>It took me about two weeks to get used to it.
In the beginning all my movements were clumsy and
my fingers got tired really quickly just from clicking right and
left buttons.
Yet the biggest challenge for me was the middle-click.
On Kensington it is performed by pressing simultaneously left
and right buttons. After a few presses like this my fingers literally
hurt.
Fortunately for me the pain and discomfort lasted
only few days. After that my hands developed necessary muscles
and using my trackball become bearable.
Still I needed about two weeks more to get to the point when
using my trackball was actually comfortable.
When it comes to movement precision I still have troubles
with selecting text fragments and 
drawing is definitively out of the question right now.</p>

<p>I use Kensington trackball only
at home, at work I still use a mouse.
This may explain the long time it took me to get used to it.
On the other hand it may be too painful and uncomfortable
to start using trackball for 8+ hours a day.
So maybe starting small is not a bad strategy…</p>

<p>Instead of a scroll wheel Kensington offers a huge
scroll ring located around the ball, which
is very pleasant to use.
In case of my Kensington the ring did not rotate
smoothly during first few days of using it, but after that
I had no problems with it.</p>

<p>Kensington provides drivers for Windows and macOS,
but not for Linux (shame on you Kensington).
One of the downsides of this
is that the middle click that caused me so much discomfort
does not work out of the box with Linux.
Fortunately this is 
<a href="https://oliversmith.io/technology/2016/01/03/Enabling-middle-click-for-kensington-trackball-on-ubuntu-linux/">easy to fix</a>,
just add to your <code class="highlighter-rouge">~/.profile</code>:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">xinput <span class="se">\</span>
  <span class="nt">--set-prop</span> <span class="se">\</span>
  <span class="nt">--type</span><span class="o">=</span>int <span class="se">\</span>
  <span class="nt">--format</span><span class="o">=</span>8 <span class="se">\</span>
  <span class="s2">"Primax Kensington Eagle Trackball"</span> <span class="se">\</span>
  <span class="s2">"Evdev Middle Button Emulation"</span> <span class="se">\</span>
  1</code></pre></figure>

<p>The downside of this solution is that you must reexecute this command
every time you unplug and plug your trackball again.</p>

<p>The other thing that surprised me is that this device
requires regular cleaning. In my case about once a week.
The cleaning is not too difficult, you just need to push the ball out 
using a pencil or your pinky finger and remove dust and dirt.
You can find a lot of tutorials how to do this properly on the internet.</p>

<p><img src="assets/images/2019-04-14/t2.jpg" alt="Cleaning" /></p>

<p>If you will ever want to open this trackball e.g. to do some
more serious cleaning, please remember that there is 
a hidden screw:
<img src="assets/images/2019-04-14/t3.jpg" alt="Cleaning" />
I removed a piece of rubber that hid the screw using
box cutter knife.
It is really a shame that nowadays manufacturers use
tricks like that to stop users from
repairing their products.</p>

<p>The last thing that I want to mention is price.
In my opinion this product is a bit overpriced.
This is really sad considering how few people are using trackballs.
I think that these devices would be much more popular if they
where cheaper.</p>

<p>Time to sum up.
All in all Kensington Orbit Trackball turned out to be a good
purchase. It took me some time to get use to it, but now I like it very much
and I do not plan to return to a mouse anytime soon.</p>


	  ]]></description>
	</item>

	<item>
	  <title>Reduce cognitive load for readers of your code</title>
	  <link>//reduce-cognitive-load</link>
	  <author></author>
	  <pubDate>2019-03-05T01:00:00+01:00</pubDate>
	  <guid>//reduce-cognitive-load</guid>
	  <description><![CDATA[
	     <p>Recently I was reviewing a piece of code that was performing
some computation on file sizes. The author of that code
followed good programming practices and created a separate
type for representing file sizes:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">struct</span> <span class="nc">FileSize</span> <span class="p">{</span>
   <span class="k">public</span> <span class="k">static</span> <span class="n">FileSize</span> <span class="nf">FromBytes</span><span class="p">(</span><span class="kt">ulong</span> <span class="n">bytes</span><span class="p">)</span>
       <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">FileSize</span><span class="p">(</span><span class="n">bytes</span><span class="p">);</span>
   <span class="c1">// Other factory methods...</span>
   
   <span class="k">private</span> <span class="kt">ulong</span> <span class="n">_bytes</span><span class="p">;</span>
   <span class="k">public</span> <span class="kt">ulong</span> <span class="n">TotalBytes</span>
       <span class="p">=&gt;</span> <span class="n">_bytes</span><span class="p">;</span>
   
   <span class="k">public</span> <span class="nf">FileSize</span><span class="p">(</span><span class="kt">ulong</span> <span class="n">bytes</span><span class="p">)</span> <span class="p">{</span>
       <span class="n">_bytes</span> <span class="p">=</span> <span class="n">bytes</span><span class="p">;</span>
   <span class="p">}</span>
   <span class="c1">// Other stuff, equatable, comparable, blah...</span>
   
   <span class="k">public</span> <span class="k">override</span> <span class="kt">string</span> <span class="nf">ToString</span><span class="p">()</span>
       <span class="p">=&gt;</span> <span class="s">$"</span><span class="p">{</span><span class="n">_bytes</span><span class="p">:</span><span class="err">##</span><span class="p">,</span><span class="err">#</span><span class="n">B</span><span class="p">}</span><span class="s">"</span><span class="p">;</span>
   
   <span class="k">public</span> <span class="k">static</span> <span class="n">FileSize</span> <span class="k">operator</span><span class="p">+(</span><span class="n">FileSize</span> <span class="n">left</span><span class="p">,</span> <span class="n">FileSize</span> <span class="n">right</span><span class="p">)</span>
       <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">FileSize</span><span class="p">(</span><span class="k">checked</span><span class="p">(</span><span class="n">left</span><span class="p">.</span><span class="n">_bytes</span> <span class="p">+</span> <span class="n">right</span><span class="p">.</span><span class="n">_bytes</span><span class="p">));</span>
   <span class="c1">// Other operators...</span>
<span class="p">}</span></code></pre></figure>

<p>Yet when it came to computing a total size of set of files I saw
code like this:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">totalSize</span> <span class="p">=</span> <span class="n">fileSizes</span><span class="p">.</span><span class="nf">Aggregate</span><span class="p">((</span><span class="n">acc</span><span class="p">,</span> <span class="n">curr</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">acc</span> <span class="p">+</span> <span class="n">curr</span><span class="p">);</span></code></pre></figure>

<p>What is wrong with this code?
It forces readers to concentrate on irrelevant details like how
to sum a list of <code class="highlighter-rouge">FileSize</code>s. As a programmer, reading a lot
of code I would prefer to see something like:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">totalSize</span> <span class="p">=</span> <span class="n">fileSizes</span><span class="p">.</span><span class="nf">Sum</span><span class="p">();</span></code></pre></figure>

<p>Which is shorter, easier to read and allows me to concentrate
on the actual business problem that I try to solve.</p>

<p>As an another example, imagine what would happen if people
started writing:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">listOfNumbers</span> <span class="p">=</span> <span class="n">Enumerable</span><span class="p">.</span><span class="nf">Range</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">10</span><span class="p">)</span>
	<span class="p">.</span><span class="nf">Aggregate</span><span class="p">(</span><span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;(),</span> <span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="n">el</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">{</span>
		<span class="n">list</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">el</span><span class="p">);</span>
		<span class="k">return</span> <span class="n">list</span><span class="p">;</span>
	<span class="p">});</span></code></pre></figure>

<p>instead of:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">listOfNumbers</span> <span class="p">=</span> <span class="n">Enumerable</span><span class="p">.</span><span class="nf">Range</span><span class="p">(</span><span class="m">0</span><span class="p">,</span> <span class="m">10</span><span class="p">)</span>
	<span class="p">.</span><span class="nf">ToList</span><span class="p">();</span></code></pre></figure>

<p>I hope that you agree with me that it would not be nice…</p>

<p>The general rule that is violated by both these examples
is called <em>Single level of abstraction principle</em>, you can read
more about it 
<a href="http://principles-wiki.net/principles:single_level_of_abstraction">here</a>.
In short it states that, all statements of a method should belong
to the same level of abstraction.
In other words we should not mix low and high level operations
in a single method. In our example <code class="highlighter-rouge">Aggregate</code> and details how
to use it are low level, computing a total size of set of files is
on the other hand a high level one.</p>

<p>Fortunately for us, we may quickly add appropriate <code class="highlighter-rouge">Sum</code> method
to our program:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="k">class</span> <span class="nc">EnumerableOfFileSize</span> <span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="n">FileSize</span> <span class="nf">Sum</span><span class="p">(</span><span class="k">this</span> <span class="n">IEnumerable</span><span class="p">&lt;</span><span class="n">FileSize</span><span class="p">&gt;</span> <span class="n">sizes</span><span class="p">)</span>
      <span class="p">=&gt;</span> <span class="n">sizes</span><span class="p">.</span><span class="nf">Aggregate</span><span class="p">(</span><span class="n">FileSize</span><span class="p">.</span><span class="nf">FromBytes</span><span class="p">(</span><span class="m">0</span><span class="p">),</span> 
                         <span class="p">(</span><span class="n">total</span><span class="p">,</span> <span class="n">curr</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">total</span> <span class="p">+</span> <span class="n">curr</span><span class="p">);</span>

    <span class="cm">/* Or in more imperative style:
    public static FileSize Sum(this IEnumerable&lt;FileSize&gt; sizes) {
        ulong total = 0;

        foreach (var size in sizes) {
            total = checked(total + size.TotalBytes);
        }

        return new FileSize(total);
    }
    */</span>
<span class="p">}</span></code></pre></figure>

<p>After this change we achieved code that is easy to read and
also hides irrelevant details. Yay!</p>


	  ]]></description>
	</item>

	<item>
	  <title>Why using PESEL as a password is a very bad idea</title>
	  <link>//why-using-pesel-as-a-password-is-a-very-bad-idea</link>
	  <author></author>
	  <pubDate>2019-02-25T01:00:00+01:00</pubDate>
	  <guid>//why-using-pesel-as-a-password-is-a-very-bad-idea</guid>
	  <description><![CDATA[
	     <p>I am sure, none of you, my dear readers would use a PESEL number
as a password or an encryption key.
Still, as unbelievable as it may sounds, recently 
I was talking with my friend on a topic of computer security and
he told me a horror story about a certain company doing exactly that.
Such practice is highly insecure and in this post I going to
prove that. Namely we will create an encrypted 7zip archive with
a random PESEL as a password and then we will crack it using
<a href="https://github.com/magnumripper/JohnTheRipper">John the Ripper</a>.</p>

<p>DISCLAIMER: All information is provided for educational purposes only.
Accessing data that does not belong to you is in most
cases illegal. Always check your local laws and your company policy
before using tools presented in this blog post.</p>

<h3 id="wtf-is-pesel">WTF is PESEL?</h3>

<p>First, let me explain for non-Polish readers what is
a <a href="https://en.wikipedia.org/wiki/PESEL">PESEL number</a>.
Basically it is an identification number similar to 
US Social Security number (SSN).
Every Polish citizen is assigned one unique PESEL number at birth.</p>

<p>But more important to us here is, that 
PESEL numbers have a very well defined structure:
<img src="assets/images/2019-02-25/pesel.svg" alt="PESEL number structure" />
First six digits of a PESEL number represent a date of birth
in <code class="highlighter-rouge">YYMMDD</code> format. Of course such a simple format does not allow us
to represent birth dates after year 1999. 
So there is a small twist, by adding twenty to the month number
we signify that the year is <code class="highlighter-rouge">20YY</code> not <code class="highlighter-rouge">19YY</code>.
For example if a person was born on 25th March 2029 we encode it
in PESEL as <code class="highlighter-rouge">292325XXXXX</code>.</p>

<p>The other interesting property of a PESEL number is that one before last
digit is used to encode person gender. Males are assigned
only odd digits, females only even digits.</p>

<p>The last digit of a PESEL is a checksum that can be easily computed
using other digits.</p>

<h3 id="so-how-many-pesels-are-there">So how many PESELs are there?</h3>

<p>Let’s assume that we intercepted a message encrypted by a PESEL
number. We know that the recipient of the message is male,
with age between twenty and sixty five.
How much PESELs we must brute force in the worst case scenario?</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">(65 - 20 + 1) * 356 * 10^3 * 5 = 83_950_000</code></pre></figure>

<p>How many six character 
passwords are there consisting of small letters and numbers?</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">(10 + 26)^6 = 2_176_782_336</code></pre></figure>

<p>Do you consider a six character password safe? Of course not!
Yet the number of possible six character passwords dwarfs
the number of possible PESELs.</p>

<p>What is worse, is that it is usually not too difficult to find out person
<em>year</em> of birth, thus reducing number of possible PESELs even more.</p>

<h3 id="demo-time">Demo time</h3>

<p>To demonstrate how weak protection PESEL passwords provide,
we will first create an encrypted <code class="highlighter-rouge">7z</code> archive and then
we will try to crack it using John the Ripper.</p>

<p>All provided instructions are for Ubuntu, but there should
be no problems with running modified versions of
these commands on macOS or Windows.</p>

<p>First we need to install <a href="https://www.7-zip.org/download.html">7-zip</a>:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="nb">sudo </span>apt-get install p7zip-full p7zip-rar</code></pre></figure>

<p>Then we can create an encrypted archive:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">7z a <span class="nt">-m0</span><span class="o">=</span>lzma2 <span class="nt">-mx</span><span class="o">=</span>9 <span class="nt">-p29032502498</span> secret.7z secret.txt </code></pre></figure>

<p>with <code class="highlighter-rouge">29032502498</code> PESEL as a password.</p>

<p>Just to make sure that the archive is indeed encrypted,
we execute:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="nv">$ </span>7z l <span class="nt">-slt</span> secret.7z

<span class="o">(</span>... skipped ...<span class="o">)</span>
Encrypted <span class="o">=</span> +
Method <span class="o">=</span> LZMA2:16 7zAES:19
Block <span class="o">=</span> 0</code></pre></figure>

<p><code class="highlighter-rouge">7zAES:19</code> visible in the command output means that the archive 
is encrypted with AES-256 algorithm.</p>

<h3 id="meet-john">Meet John</h3>

<p>To install John the Ripper we must follow instructions
<a href="https://github.com/magnumripper/JohnTheRipper/blob/bleeding-jumbo/doc/INSTALL-UBUNTU">from the official repository</a>.
I compiled John without OpenCL and REXGEN support, YMMV though.</p>

<p>To allow John to crack <code class="highlighter-rouge">7z</code> file, first we must extract a hash from
it:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">./john/run/7z2john.pl secret.7z <span class="o">&gt;</span> secret.7z.hash</code></pre></figure>

<p>To make this Perl script work, I had to install this library:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="nb">sudo </span>apt-get install libcompress-raw-lzma-perl</code></pre></figure>

<p>Then I generated a suitable list of PESEL numbers
(people aged 20-65, males) using
<a href="https://github.com/marcin-chwedczuk/blog-pesel-password-bad-idea/blob/master/peselgen/Program.cs">this short program</a>
that I wrote.
The generated file <code class="highlighter-rouge">pesels.txt</code> is about 1GB big and
consist of 82 185 000 PESEL numbers.
We are going to use it as a John the Ripper wordlist.</p>

<p>Now we can start cracking:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell">./john/run/john <span class="nt">--wordlist</span><span class="o">=</span>pesels.txt secret.7z.hash

<span class="c"># Found passwords are saved in john.pot file</span>
<span class="nb">cat</span> ./john/run/john.pot</code></pre></figure>

<p>I performed two test. First I tried to crack a small
340B archive that you can find <a href="https://github.com/marcin-chwedczuk/blog-pesel-password-bad-idea/blob/master/secret.7z">here</a>.
On it I achieved speed of about 100 checked PESELs per second,
this means that cracking it, could take in the worst case scenario:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">82 185 000 / 100 / 3600 / 24 ~ 10 days</code></pre></figure>

<p>And all this on my four years old i7-4771 CPU, using John without GPU support.
Imagine how fast it would work on a high end Amazon EC2 instance…</p>

<p>Then I performed a second test, trying to crack 3MB archive
containing a PDF file. There I achieved speed of about 50 PESELs per second.
Not bad either (20 days in the worst case scenario).</p>

<p>But you don’t have to believe me here. Grab the
<a href="https://github.com/marcin-chwedczuk/blog-pesel-password-bad-idea/blob/master/secret.7z">test archive</a> and try to crack it yourself!
I encrypted it with a random PESEL generated using <a href="https://bogus-z-polska.pl/generatory/all.html">Bogus</a> site. Good luck!</p>

<p>As we can see archives protected by PESEL numbers can be easily cracked.</p>

<h3 id="conclusion">Conclusion</h3>

<ul>
  <li>Do NOT use PESEL numbers neither as passwords nor as encryption keys.</li>
  <li>Do USE <a href="https://www.gnupg.org/">GPG</a> if you want to send other person
 some secret data using email.</li>
</ul>

<h3 id="references">References</h3>

<ul>
  <li><a href="https://askubuntu.com/a/928301">https://askubuntu.com/a/928301</a></li>
  <li><a href="https://sourceforge.net/p/p7zip/patches/25/#3da5">https://sourceforge.net/p/p7zip/patches/25/#3da5</a></li>
  <li><a href="https://github.com/magnumripper/JohnTheRipper/blob/bleeding-jumbo/doc/INSTALL-UBUNTU">https://github.com/magnumripper/JohnTheRipper/blob/bleeding-jumbo/doc/INSTALL-UBUNTU</a></li>
  <li><a href="https://www.openwall.com/john/doc/">https://www.openwall.com/john/doc/</a></li>
  <li><a href="https://github.com/koboi137/john/blob/master/7z2john.pl#L32">https://github.com/koboi137/john/blob/master/7z2john.pl#L32</a></li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>FluentAssertions and code formatting</title>
	  <link>//fluent-assertions-and-code-formatting</link>
	  <author></author>
	  <pubDate>2019-02-10T01:00:00+01:00</pubDate>
	  <guid>//fluent-assertions-and-code-formatting</guid>
	  <description><![CDATA[
	     <p>Recently I was playing with
<a href="https://fluentassertions.com/">FluentAssertions</a>
library.
I was really amazed by the beautiful error messages generated by FluentAssertions.
For example, for this failing test:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="na">[Fact]</span>
<span class="k">public</span> <span class="k">void</span> <span class="nf">add_returns_sum_of_its_arguments</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Arrange</span>
    <span class="kt">var</span> <span class="n">service</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ServiceA</span><span class="p">();</span>
    
    <span class="c1">// Assert</span>
    <span class="n">service</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">).</span><span class="nf">Should</span><span class="p">().</span><span class="nf">Be</span><span class="p">(</span><span class="m">3</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>FluentAssertions generates a message:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">Outcome: Failed
Error Message:
Expected service.Add(1, 2) to be 3, but found 42.</code></pre></figure>

<p>Unfortunatelly my joy did not last long.
When I added an explanation to an assertion and
broke the line because it got too long:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="na">[Fact]</span>
<span class="k">public</span> <span class="k">void</span> <span class="nf">add_returns_sum_of_its_arguments</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Arrange</span>
    <span class="kt">var</span> <span class="n">service</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ServiceA</span><span class="p">();</span>

    <span class="c1">// Assert</span>
    <span class="n">service</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">Should</span><span class="p">().</span><span class="nf">Be</span><span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="n">because</span><span class="p">:</span> <span class="s">"three is sum of one and two"</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>FluentAssertions reproted just:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">Outcome: Failed
Error Message:
Expected value to be 3 because three is sum of one and two,
    but found 42.</code></pre></figure>

<p>It turns out, in order to have these fancy error messages,
we must place <code class="highlighter-rouge">.Should()</code> on the same line as the
tested expression:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="na">[Fact]</span>
<span class="k">public</span> <span class="k">void</span> <span class="nf">add_returns_sum_of_arguments</span><span class="p">()</span> <span class="p">{</span>
    <span class="c1">// Arrange</span>
    <span class="kt">var</span> <span class="n">service</span> <span class="p">=</span> <span class="k">new</span> <span class="nf">ServiceA</span><span class="p">();</span>

    <span class="c1">// Assert</span>
    <span class="n">service</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">)</span><span class="cm">/*abra cadabra*/</span><span class="p">.</span><span class="nf">Should</span><span class="p">()</span>
        <span class="p">.</span><span class="nf">Be</span><span class="p">(</span><span class="m">3</span><span class="p">,</span> <span class="n">because</span><span class="p">:</span> <span class="s">"three is sum of one and two"</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>The above test generates a message:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">Outcome: Failed
Error Message:
Expected service.Add(1, 2)/*abra cadabra*/ to be 3 because three
   is sum of one and two, but found 42.</code></pre></figure>

<p>Notice that comment was also include in the message.</p>

<p>This behavior of FluentAssertions really suprised me.
Why the way we format our code have influence over
the readability of error messages?</p>

<p>Anyway this is how FluentAssertions works,
moreover this behaviour is described 
(with short explanation how it works) on the <em>first</em> page
of <a href="https://fluentassertions.com/documentation/#subject-identification">the official documentation</a>.
If only I have spend ten minutes reading the friendly docs instead of
skimming it…</p>

<p>From now on I will follow “Read The Friendly Manual” (RTFM) advice!!!</p>


	  ]]></description>
	</item>

	<item>
	  <title>Spy JVM network traffic with Owasp ZAP proxy</title>
	  <link>//spy-jvm-network-traffic-with-owasp-zap</link>
	  <author></author>
	  <pubDate>2019-01-24T01:00:00+01:00</pubDate>
	  <guid>//spy-jvm-network-traffic-with-owasp-zap</guid>
	  <description><![CDATA[
	     <p>We start by downloading <a href="https://www.owasp.org/index.php/OWASP_Zed_Attack_Proxy_Project">Owasp ZAP proxy</a>:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="nv">$ </span><span class="c"># Download and unpack...</span>
<span class="nv">$ </span>curl <span class="nt">-O</span> <span class="nt">-J</span> <span class="nt">-L</span> https://github.com/zaproxy/zaproxy/releases/download/2.7.0/ZAP_2.7.0_Linux.tar.gz
<span class="nv">$ </span><span class="nb">tar </span>xvzf ZAP_2.7.0_Linux.tar.gz

<span class="nv">$ </span><span class="c"># Run ZAP proxy...</span>
<span class="nv">$ </span>./ZAP_2.7.0/zap.sh  </code></pre></figure>

<p>By default ZAP listens on <code class="highlighter-rouge">localhost:8080</code>. You can change default address
and port by going into Tools -&gt; Options -&gt; Local Proxies tab:
<img src="assets/images/2019-01-25/zap_options.png" alt="ZAP Local Proxies tab" /></p>

<p>To test that network traffic interception works, 
we will use a simple Java app:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
    <span class="n">CloseableHttpClient</span> <span class="n">client</span> <span class="o">=</span> <span class="n">HttpClientBuilder</span><span class="o">.</span><span class="na">create</span><span class="o">()</span>
            <span class="o">.</span><span class="na">useSystemProperties</span><span class="o">()</span>
            <span class="o">.</span><span class="na">build</span><span class="o">();</span>
    <span class="k">try</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">status</span> <span class="o">=</span> <span class="n">client</span>
            <span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">HttpGet</span><span class="o">(</span><span class="s">"http://httpstat.us/200"</span><span class="o">))</span>
            <span class="o">.</span><span class="na">getStatusLine</span><span class="o">()</span>
            <span class="o">.</span><span class="na">toString</span><span class="o">();</span>

        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">status</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">finally</span> <span class="o">{</span>
        <span class="n">client</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>There are few things to notice:</p>

<ul>
  <li>We use Apache HttpClient to perform http requests.</li>
  <li>By default Apache HttpClient do not use proxy servers,
 even if you set ZAP as a system wide proxy. We will deal
 with this problem later. For now we will use <code class="highlighter-rouge">useSystemProperties()</code> method
 on <code class="highlighter-rouge">HttpClientBuilder</code> class that will enable proxy support.</li>
  <li>Right now we will concentrate on intercepting HTTP traffic.
 I will show you how to deal with HTTPS connections later.</li>
</ul>

<p>If we, now, run our application, we will notice that ZAP did not
intercept any traffic:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="nv">$ </span>java <span class="nt">-jar</span> ./build/libs/zapproxydemo-1.0-SNAPSHOT.jar 
HTTP/1.1 200 OK</code></pre></figure>

<p>Indeed right now our application does not know that it should use
a proxy server. We may force it to use a proxy via JVM command line
parameters:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="nv">$ </span>java <span class="nt">-Dhttp</span>.proxyHost<span class="o">=</span>127.0.0.1 <span class="se">\</span>
 <span class="nt">-Dhttp</span>.proxyPort<span class="o">=</span>8080 <span class="se">\</span>
 <span class="nt">-Dhttps</span>.proxyHost<span class="o">=</span>127.0.0.1 <span class="se">\</span>
 <span class="nt">-Dhttps</span>.proxyPort<span class="o">=</span>8080 <span class="se">\</span>
 <span class="nt">-jar</span> ./build/libs/zapproxydemo-1.0-SNAPSHOT.jar </code></pre></figure>

<p>or by dynamicaly setting system properties in code:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="n">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"http.proxyHost"</span><span class="o">,</span> <span class="s">"127.0.0.1"</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"http.proxyPort"</span><span class="o">,</span> <span class="s">"8080"</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"https.proxyHost"</span><span class="o">,</span> <span class="s">"127.0.0.1"</span><span class="o">);</span>
<span class="n">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"https.proxyPort"</span><span class="o">,</span> <span class="s">"8080"</span><span class="o">);</span></code></pre></figure>

<p>Whatever method you use, if you run the application again,
you should be able to see now a single intercepted request in ZAP:
<img src="assets/images/2019-01-25/intercepted_request.png" alt="Intercepted request in ZAP" />
You can remove previously recorded requests in ZAP by pressing <code class="highlighter-rouge">Ctrl+N</code>.</p>

<h4 id="intercepting-traffic-from-proxy-unfriendly-apps">Intercepting traffic from proxy unfriendly apps</h4>

<p>As I mentioned previously, Apache HttpClient ignores
proxy settings by default.
If we create our <code class="highlighter-rouge">HttpClient</code> using <code class="highlighter-rouge">create()</code> method:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
    <span class="n">CloseableHttpClient</span> <span class="n">client</span> <span class="o">=</span> <span class="n">HttpClientBuilder</span><span class="o">.</span><span class="na">create</span><span class="o">()</span>
            <span class="o">.</span><span class="na">build</span><span class="o">();</span>

    <span class="k">try</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">status</span> <span class="o">=</span> <span class="n">client</span>
            <span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">HttpGet</span><span class="o">(</span><span class="s">"http://httpstat.us/200"</span><span class="o">))</span>
            <span class="o">.</span><span class="na">getStatusLine</span><span class="o">()</span>
            <span class="o">.</span><span class="na">toString</span><span class="o">();</span>

        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">status</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">finally</span> <span class="o">{</span>
        <span class="n">client</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p><code class="highlighter-rouge">HttpClient</code> will ignore proxy settings no matter how we set them.</p>

<p>For dealing with cases like this, we may use
<a href="https://github.com/rofl0r/proxychains-ng/tree/v4.13">proxychains-ng</a>.
This project is a new reincarnation of old
<a href="https://github.com/haad/proxychains">proxychains</a> util which is no
longer maintained.
Please be aware of this difference. On my system <code class="highlighter-rouge">apt-get install proxychains</code>
installs <code class="highlighter-rouge">proxychains</code> and not <code class="highlighter-rouge">proxychains-ng</code> that we need here.
To install <code class="highlighter-rouge">proxychains-ng</code> I needed to download sources from GitHub
and compile them myself:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="nv">$ </span><span class="c"># Checkout tag v4.13</span>
<span class="nv">$ </span>git clone <span class="nt">--branch</span> v4.13 git@github.com:rofl0r/proxychains-ng.git

<span class="nv">$ </span><span class="nb">cd </span>proxychains-ng
<span class="nv">$ </span>./configure
<span class="nv">$ </span><span class="c"># If there are no errors from configure script</span>
<span class="nv">$ </span>make
<span class="nv">$ </span>./proxychains4 <span class="nt">--help</span>

Usage:  ./proxychains4 <span class="nt">-q</span> <span class="nt">-f</span> config_file program_name <span class="o">[</span>arguments]
    <span class="nt">-q</span> makes proxychains quiet - this overrides the config setting
    <span class="nt">-f</span> allows one to manually specify a configfile to use
    <span class="k">for </span>example : proxychains telnet somehost.com
More <span class="nb">help </span><span class="k">in </span>README file

<span class="nv">$ </span><span class="c"># Install system wide...</span>
<span class="nv">$ </span><span class="nb">sudo </span>make install</code></pre></figure>

<p>We also need to change default <code class="highlighter-rouge">proxychains-ng</code> configuration:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="nb">sudo </span>vim /etc/proxychains.conf

<span class="c"># Comment out line:</span>
<span class="c"># proxy_dns</span>

<span class="c"># Change ProxyList to:</span>
<span class="o">[</span>ProxyList]
http 127.0.0.1 8080</code></pre></figure>

<p>Now if we run our application using <code class="highlighter-rouge">proxychains</code>:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="nv">$ </span>proxychains4 java <span class="nt">-jar</span> ./build/libs/zapproxydemo-1.0-SNAPSHOT.jar 
<span class="o">[</span>proxychains] config file found: /etc/proxychains.conf
<span class="o">[</span>proxychains] preloading /usr/local/lib/libproxychains4.so
<span class="o">[</span>proxychains] DLL init: proxychains-ng 4.13-git-10-g1198857
<span class="o">[</span>proxychains] Strict chain  ...  127.0.0.1:8080  ...  23.99.0.12:80  ...  OK
HTTP/1.1 200 OK</code></pre></figure>

<p>We will be able to intercept traffic using ZAP.</p>

<p>One of the limitations of proxychains is that it may not work for
subprocesses. If you app launches other applications they may
not be proxied at all.</p>

<h4 id="intercepting-https-traffic">Intercepting HTTPS traffic</h4>

<p>So far, so good, but what will happen if we try to intercept
HTTPS traffic from a new, more secure, example:</p>

<figure class="highlight"><pre><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">IOException</span> <span class="o">{</span>
    <span class="n">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"http.proxyHost"</span><span class="o">,</span> <span class="s">"127.0.0.1"</span><span class="o">);</span>
    <span class="n">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"http.proxyPort"</span><span class="o">,</span> <span class="s">"8080"</span><span class="o">);</span>
    <span class="n">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"https.proxyHost"</span><span class="o">,</span> <span class="s">"127.0.0.1"</span><span class="o">);</span>
    <span class="n">System</span><span class="o">.</span><span class="na">setProperty</span><span class="o">(</span><span class="s">"https.proxyPort"</span><span class="o">,</span> <span class="s">"8080"</span><span class="o">);</span>

    <span class="n">CloseableHttpClient</span> <span class="n">client</span> <span class="o">=</span> <span class="n">HttpClientBuilder</span><span class="o">.</span><span class="na">create</span><span class="o">()</span>
            <span class="o">.</span><span class="na">useSystemProperties</span><span class="o">()</span>
            <span class="o">.</span><span class="na">build</span><span class="o">();</span>

    <span class="n">String</span> <span class="n">url</span> <span class="o">=</span> <span class="s">"https://www.random.org/integers/?num=12&amp;min=1&amp;max=100&amp;col=3&amp;base=10&amp;format=plain&amp;rnd=new"</span><span class="o">;</span>

    <span class="k">try</span> <span class="o">{</span>
        <span class="n">HttpEntity</span> <span class="n">entity</span> <span class="o">=</span> <span class="n">client</span>
            <span class="o">.</span><span class="na">execute</span><span class="o">(</span><span class="k">new</span> <span class="n">HttpGet</span><span class="o">(</span><span class="n">url</span><span class="o">))</span>
            <span class="o">.</span><span class="na">getEntity</span><span class="o">();</span>

        <span class="n">String</span> <span class="n">responseBody</span> <span class="o">=</span> <span class="n">EntityUtils</span><span class="o">.</span><span class="na">toString</span><span class="o">(</span><span class="n">entity</span><span class="o">);</span>
        <span class="n">System</span><span class="o">.</span><span class="na">out</span><span class="o">.</span><span class="na">println</span><span class="o">(</span><span class="n">responseBody</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="k">finally</span> <span class="o">{</span>
        <span class="n">client</span><span class="o">.</span><span class="na">close</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></figure>

<p>We will get an exception similar to:</p>

<figure class="highlight"><pre><code class="language-no-highlight" data-lang="no-highlight">Exception in thread "main" javax.net.ssl.SSLHandshakeException:
sun.security.validator.ValidatorException: PKIX path building failed:
sun.security.provider.certpath.SunCertPathBuilderException: unable
to find valid certification path to requested target</code></pre></figure>

<p>We get this exception because certificate returned by ZAP
proxy is not trusted.
To fix this problem we must generate a new ZAP root cert and add it
(temporarily) to Java keystore.</p>

<p>Generate a new cert and save it somewhere
(Tools -&gt; Options -&gt; Dynamic SSL Certificates):
<img src="assets/images/2019-01-25/gen_cert.png" alt="ZAP generate a new root certificate" />
Don’t forget to click OK.</p>

<p>Then add ZAP root certificate to Java keystore:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="nv">$ </span><span class="nb">cd</span> <span class="nv">$JAVA_HOME</span>/jre/lib/security
<span class="nv">$ </span><span class="nb">pwd</span>
/usr/lib/jvm/java-8-oracle/jre/lib/security
<span class="nv">$ </span><span class="c"># You should see cacerts file in this directory.</span>

<span class="nv">$ </span><span class="c"># Create a backup</span>
<span class="nv">$ </span><span class="nb">sudo </span>cp cacerts cacerts.bakup2019-01-26

<span class="nv">$ </span><span class="c"># Add certificate to the store</span>
<span class="nv">$ </span><span class="nb">sudo </span>keytool <span class="nt">-importcert</span> <span class="se">\</span>
 <span class="nt">-alias</span> zap-proxy.org <span class="se">\</span>
 <span class="nt">-file</span> ~/owasp_zap_root_ca.cer <span class="se">\</span>
 <span class="nt">-keystore</span> cacerts
<span class="nv">$ </span><span class="c"># When asked about keystore password </span>
<span class="nv">$ </span><span class="c"># write: changeit (the default password)</span></code></pre></figure>

<p>If we run our app again, we will be able to intercept an HTTPS request:
<img src="assets/images/2019-01-25/intercept_https.png" alt="Intercepted HTTPS call" /></p>

<p>This again should work with <code class="highlighter-rouge">proxychains-ng</code>.
Sometimes to make it work you will have to <strong>uncommend</strong> <code class="highlighter-rouge">proxy_dns</code>
option in <code class="highlighter-rouge">/etc/proxychains.conf</code> file, that I earlier said to
comment out. Why is this sometimes needed, to be honest, I don’t know but
it works this way…</p>

<p><strong>For security reasons</strong> after you finished your debugging session,
you should remove ZAP certificate from Java keystore:</p>

<figure class="highlight"><pre><code class="language-shell" data-lang="shell"><span class="nv">$ </span><span class="nb">cd</span> <span class="nv">$JAVA_HOME</span>/jre/lib/security

<span class="nv">$ </span><span class="c"># Make sure you see your cert</span>
<span class="nv">$ </span><span class="nb">sudo </span>keytool <span class="nt">-list</span> <span class="nt">-v</span> <span class="nt">-keystore</span> cacerts | <span class="nb">grep </span>zap-proxy.org
Enter keystore password:  changeit

<span class="nv">$ </span><span class="c"># Remove it</span>
<span class="nv">$ </span><span class="nb">sudo </span>keytool <span class="nt">-delete</span> <span class="nt">-alias</span> zap-proxy.org <span class="nt">-keystore</span> cacerts

<span class="nv">$ </span><span class="c"># Make sure it's gone</span>
<span class="nv">$ </span><span class="nb">sudo </span>keytool <span class="nt">-list</span> <span class="nt">-v</span> <span class="nt">-keystore</span> cacerts | <span class="nb">grep </span>zap-proxy.org
Enter keystore password:  changeit</code></pre></figure>

<p>Always generate a new ZAP proxy certificate
before adding it to Java keystore. If you must do this
often, I can advice you to create a script and/or bash alias to
make entire process more convenient.</p>


	  ]]></description>
	</item>

	<item>
	  <title>ReadOnly does not mean Immutable</title>
	  <link>//read-only-does-not-mean-immutable</link>
	  <author></author>
	  <pubDate>2019-01-06T01:00:00+01:00</pubDate>
	  <guid>//read-only-does-not-mean-immutable</guid>
	  <description><![CDATA[
	     <p>Recently I have introduced a subtle bug into my code.
It all started when I was creating a few
value object classes:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">Method</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Name</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="nf">Method</span><span class="p">(</span><span class="kt">string</span> <span class="n">name</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">Name</span> <span class="p">=</span> <span class="n">name</span><span class="p">;</span>
    <span class="p">}</span>
    <span class="c1">// Equals, GetHashCode, ToString skipped</span>
    <span class="c1">// to save space.</span>
<span class="p">}</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">TypedArgument</span> <span class="p">{</span>
    <span class="k">public</span> <span class="n">Type</span> <span class="n">Type</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="kt">object</span> <span class="n">Value</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="nf">TypedArgument</span><span class="p">(</span><span class="n">Type</span> <span class="n">type</span><span class="p">,</span> <span class="kt">object</span> <span class="k">value</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">Type</span> <span class="p">=</span> <span class="n">type</span><span class="p">;</span>
        <span class="n">Value</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">MethodCall</span> <span class="p">{</span>
    <span class="k">public</span> <span class="n">Method</span> <span class="n">CalledMethod</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="n">IReadOnlyList</span><span class="p">&lt;</span><span class="n">TypedArgument</span><span class="p">&gt;</span> <span class="n">PassedArguments</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="k">public</span> <span class="nf">MethodCall</span><span class="p">(</span>
        <span class="n">Method</span> <span class="n">calledMethod</span><span class="p">,</span>
        <span class="n">IReadOnlyList</span><span class="p">&lt;</span><span class="n">TypedArgument</span><span class="p">&gt;</span> <span class="n">args</span><span class="p">)</span>
    <span class="p">{</span>
        <span class="n">CalledMethod</span> <span class="p">=</span> <span class="n">calledMethod</span><span class="p">;</span>
        <span class="c1">// NOTICE: No defensive copy.</span>
        <span class="n">PassedArguments</span> <span class="p">=</span> <span class="n">args</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>While implementing <code class="highlighter-rouge">MethodCall</code> class constructor, I wrongly assumed
that <code class="highlighter-rouge">IReadOnlyList&lt;T&gt;</code> behaves like an immutable list.
In other words that its content never changes.
Due to this wrong assumption I did not create a defensive copy,
that I usually do for collection arguments.
Instead I just assigned <code class="highlighter-rouge">args</code> parameter to
a readonly property named <code class="highlighter-rouge">PassedArguments</code>.</p>

<p><code class="highlighter-rouge">MethodCall</code> object was then used by another component
called <code class="highlighter-rouge">MethodCallSpy</code>:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">MethodCallSpy</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">MethodCall</span><span class="p">&gt;</span> <span class="n">_methodCalls</span>
        <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">MethodCall</span><span class="p">&gt;();</span>

    <span class="k">public</span> <span class="n">IReadOnlyList</span><span class="p">&lt;</span><span class="n">MethodCall</span><span class="p">&gt;</span> <span class="n">MethodCalls</span>
        <span class="p">=&gt;</span> <span class="n">_methodCalls</span><span class="p">;</span>

    <span class="k">private</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">TypedArgument</span><span class="p">&gt;</span> <span class="n">_currentArguments</span>
        <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">TypedArgument</span><span class="p">&gt;();</span>

    <span class="k">public</span> <span class="k">void</span> <span class="nf">AddArgument</span><span class="p">(</span><span class="n">TypedArgument</span> <span class="n">arg</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">_currentArguments</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">arg</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">void</span> <span class="nf">AddMethodCall</span><span class="p">(</span><span class="n">Method</span> <span class="n">method</span><span class="p">)</span> <span class="p">{</span>
        <span class="kt">var</span> <span class="n">methodCall</span> <span class="p">=</span> 
            <span class="k">new</span> <span class="nf">MethodCall</span><span class="p">(</span><span class="n">method</span><span class="p">,</span> <span class="n">_currentArguments</span><span class="p">);</span>
        <span class="n">_methodCalls</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">methodCall</span><span class="p">);</span>

        <span class="c1">// NOTICE: Old List&lt;T&gt; is not modified.</span>
        <span class="n">_currentArguments</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">TypedArgument</span><span class="p">&gt;();</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p><code class="highlighter-rouge">MethodCallSpy</code>
gathers <code class="highlighter-rouge">TypedArgument</code>s passed to it via <code class="highlighter-rouge">AddArgument</code> calls
in <code class="highlighter-rouge">_currentArguments</code> list. 
Then when someone calls <code class="highlighter-rouge">AddMethodCall</code> method, it uses stored
<code class="highlighter-rouge">TypedArgument</code>s and a value of <code class="highlighter-rouge">method</code> parameter to construct
a new <code class="highlighter-rouge">MethodCall</code> object and adds it to <code class="highlighter-rouge">_methodCalls</code> list.</p>

<p><code class="highlighter-rouge">MethodCallSpy</code> class worked perfectly, at least until I
returned to it a few days later to make some improvements.
Yes, I know, I know
<a href="https://xkcd.com/1691/">“premature optimization is the root of all evil”</a>
but this was my quick’n’dirty pet project and I just cannot resist:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// readonly added.</span>
<span class="k">private</span> <span class="k">readonly</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">TypedArgument</span><span class="p">&gt;</span> <span class="n">_currentArguments</span>
    <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">TypedArgument</span><span class="p">&gt;();</span>
<span class="k">public</span> <span class="k">void</span> <span class="nf">AddMethodCall_AfterRefactoring</span><span class="p">(</span><span class="n">Method</span> <span class="n">method</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// Assumes that MethodCall will make a defensive copy</span>
    <span class="c1">// of _currentArguments list.</span>
    <span class="kt">var</span> <span class="n">methodCall</span> <span class="p">=</span> 
        <span class="k">new</span> <span class="nf">MethodCall</span><span class="p">(</span><span class="n">method</span><span class="p">,</span> <span class="n">_currentArguments</span><span class="p">);</span>

    <span class="n">_methodCalls</span><span class="p">.</span><span class="nf">Add</span><span class="p">(</span><span class="n">methodCall</span><span class="p">);</span>

    <span class="c1">// NOTICE: We use clear instead of creating a new list</span>
    <span class="n">_currentArguments</span><span class="p">.</span><span class="nf">Clear</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>

<p>Of course I also made a lot of other refactorings without
running my tests (I had only a few integration tests).
This was another mistake of mine. Looks like good
programming practices help even if you are building
quickly a Proof Of Concept solution.</p>

<p>When I finally ran my tests, they all have failed. For some reason
<code class="highlighter-rouge">MethodCall</code> objects did not contain any <code class="highlighter-rouge">TypedArgument</code>s.
Strange, isn’t it…</p>

<p>After a quarter of debugging, I have found that the bug was
introduced by my wrong assumptions about <code class="highlighter-rouge">IReadOnlyList&lt;T&gt;</code>
interface.</p>

<p><code class="highlighter-rouge">IReadOnlyList&lt;T&gt;</code>, <code class="highlighter-rouge">IReadOnlyCollection&lt;T&gt;</code> interfaces and
<code class="highlighter-rouge">ReadOnlyCollection&lt;T&gt;</code> class where introduced
to protect owners of the collections, not the receivers.
For example if a method is declared like this:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">void</span> <span class="n">ProcessList</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">IReadOnlyList</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">list</span><span class="p">);</span></code></pre></figure>

<p>We can be sure, that it will not attempt to modify
the list that we are going to pass to it:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">list</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="p">{</span> <span class="s">"foo"</span><span class="p">,</span> <span class="s">"bar"</span> <span class="p">};</span>
<span class="nf">ProcessList</span><span class="p">(</span><span class="n">list</span><span class="p">);</span>
<span class="c1">// still: list == new List&lt;string&gt; { "foo", "bar" }</span></code></pre></figure>

<p>Of course <code class="highlighter-rouge">ProcessList</code> method may be
implemented in an evil way:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">private</span> <span class="k">void</span> <span class="n">ProcessList</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">IReadOnlyList</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">list</span><span class="p">)</span> <span class="p">{</span>
    <span class="p">(</span><span class="n">list</span> <span class="k">as</span> <span class="n">IList</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;)[</span><span class="m">0</span><span class="p">]</span> <span class="p">=</span> <span class="k">default</span><span class="p">(</span><span class="n">T</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>But we can protect our lists from evil code by using <code class="highlighter-rouge">AsReadOnly</code>
method, that returns a <code class="highlighter-rouge">List&lt;T&gt;</code> instance
wrapped in a <code class="highlighter-rouge">ReadOnlyCollection&lt;T&gt;</code> object
(<a href="https://github.com/dotnet/corefx/blob/master/src/Common/src/CoreLib/System/Collections/Generic/List.cs#L251">source code</a>).</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">list</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="p">{</span> <span class="s">"foo"</span><span class="p">,</span> <span class="s">"bar"</span> <span class="p">};</span>
<span class="nf">ProcessList</span><span class="p">(</span><span class="n">list</span><span class="p">.</span><span class="nf">AsReadOnly</span><span class="p">());</span>
<span class="c1">// Our list can be modified now</span>
<span class="c1">// only by using reflection</span>
<span class="c1">// to get access to private fields</span>
<span class="c1">// of ReadOnlyCollection&lt;T&gt; class.</span></code></pre></figure>

<p>On the other hand receivers of <code class="highlighter-rouge">IReadOnlyList&lt;T&gt;</code> arguments
are not protected at all. Consider this short program:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="na">[Fact]</span>
<span class="k">public</span> <span class="k">void</span> <span class="nf">ReadonlyButNotForYou</span><span class="p">()</span> <span class="p">{</span>
    <span class="kt">var</span> <span class="n">list</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="p">{</span> <span class="m">1</span><span class="p">,</span> <span class="m">2</span><span class="p">,</span> <span class="m">3</span> <span class="p">};</span>

    <span class="kt">int</span> <span class="nf">extraInt</span><span class="p">()</span> <span class="p">{</span>
        <span class="n">list</span><span class="p">[</span><span class="m">0</span><span class="p">]</span> <span class="p">=</span> <span class="m">42</span><span class="p">;</span>
        <span class="k">return</span> <span class="n">list</span><span class="p">[</span><span class="m">0</span><span class="p">];</span>
    <span class="p">}</span>

    <span class="nf">ProcessList</span><span class="p">(</span><span class="n">list</span><span class="p">,</span> <span class="n">extraInt</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">private</span> <span class="k">void</span> <span class="nf">ProcessList</span><span class="p">(</span><span class="n">IReadOnlyList</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">ints</span><span class="p">,</span> <span class="n">Func</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="n">extraInt</span><span class="p">)</span> <span class="p">{</span>
    <span class="kt">int</span> <span class="n">first</span> <span class="p">=</span> <span class="n">ints</span><span class="p">.</span><span class="nf">First</span><span class="p">();</span>
    <span class="kt">int</span> <span class="n">tmp</span> <span class="p">=</span> <span class="nf">extraInt</span><span class="p">();</span>
    <span class="kt">int</span> <span class="n">firstAgain</span> <span class="p">=</span> <span class="n">ints</span><span class="p">.</span><span class="nf">First</span><span class="p">();</span>

    <span class="n">Assert</span><span class="p">.</span><span class="nf">Equal</span><span class="p">(</span><span class="n">first</span><span class="p">,</span> <span class="n">firstAgain</span><span class="p">);</span> <span class="c1">// fails</span>
<span class="p">}</span></code></pre></figure>

<p>It demonstrates that <code class="highlighter-rouge">IReadOnlyList&lt;T&gt;</code> can change even
during duration of a single method!</p>

<p>So what should we do to avoid this class of bugs?
Option one is to use old and proven defensive copy
technique:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="nf">MethodCall</span><span class="p">(</span>
    <span class="n">Method</span> <span class="n">calledMethod</span><span class="p">,</span> 
    <span class="n">IReadOnlyList</span><span class="p">&lt;</span><span class="n">TypedArgument</span><span class="p">&gt;</span> <span class="n">args</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">CalledMethod</span> <span class="p">=</span> <span class="n">calledMethod</span><span class="p">;</span>
    <span class="n">PassedArguments</span> <span class="p">=</span> 
        <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">TypedArgument</span><span class="p">&gt;(</span><span class="n">args</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>Remember not to use <code class="highlighter-rouge">ReadOnlyCollection&lt;T&gt;</code> class to create
a defensive copy. This class is only a wrapper - it
does not copy the actual data.</p>

<p>The second option is to use truly immutable
data structures, for example from
<a href="https://www.nuget.org/packages/System.Collections.Immutable">System.Collections.Immutable</a>
package:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="nf">MethodCall</span><span class="p">(</span>
    <span class="n">Method</span> <span class="n">calledMethod</span><span class="p">,</span> 
    <span class="n">IImmutableList</span><span class="p">&lt;</span><span class="n">TypedArgument</span><span class="p">&gt;</span> <span class="n">args</span><span class="p">)</span>
<span class="p">{</span>
    <span class="n">CalledMethod</span> <span class="p">=</span> <span class="n">calledMethod</span><span class="p">;</span>
    <span class="n">PassedArguments</span> <span class="p">=</span> <span class="n">args</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>These types are truly immutable, they never change their
contents after they are created.</p>

<p>One problem that I have with <code class="highlighter-rouge">System.Collections.Immutable</code>
is that immutable types have often different performance
characteristics than their mutable counterparts.
For example <code class="highlighter-rouge">ImmutableList</code> is implemented using,
guess what, a good old AVL tree
(<a href="https://github.com/dotnet/corefx/blob/master/src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList_1.cs#L28">source code</a>).</p>

<p>On the other hand <code class="highlighter-rouge">ImmutableArray</code> that is backed by a
regular array, seems like a perfect candidate for making
defensive copies. You can read more about <code class="highlighter-rouge">ImmutableArray</code>
in <a href="https://blogs.msdn.microsoft.com/dotnet/2013/06/24/please-welcome-immutablearrayt/">this MSDN article</a>.</p>

<p>It is never wrong to take a look at the collection source code
before using it (all links to GitHub):</p>

<ul>
  <li><a href="https://github.com/dotnet/corefx/blob/master/src/Common/src/CoreLib/System/Collections/ObjectModel/ReadOnlyCollection.cs">ReadOnlyCollection</a></li>
  <li><a href="https://github.com/dotnet/corefx/blob/master/src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableList_1.cs">ImmutableList</a></li>
  <li><a href="https://github.com/dotnet/corefx/blob/master/src/System.Collections.Immutable/src/System/Collections/Immutable/ImmutableArray_1.cs">ImmutableArray</a></li>
</ul>


	  ]]></description>
	</item>

	<item>
	  <title>Random thoughts on Maybe</title>
	  <link>//random-thoughts-on-maybe</link>
	  <author></author>
	  <pubDate>2019-01-01T01:00:00+01:00</pubDate>
	  <guid>//random-thoughts-on-maybe</guid>
	  <description><![CDATA[
	     <p>With functional programming on the rise nowadays, 
more and more people start using functional 
patterns in their code.
One of the simplest patterns is <code class="highlighter-rouge">Maybe&lt;T&gt;</code> monad
also called <code class="highlighter-rouge">Option&lt;T&gt;</code> or <code class="highlighter-rouge">Optional&lt;T&gt;</code>.
<code class="highlighter-rouge">Maybe&lt;T&gt;</code>’s primary use case is to represent a possibly
missing value.</p>

<p>I have already use <code class="highlighter-rouge">Maybe&lt;T&gt;</code> a few times in real
codebases and in this post I want to gather my thoughts
on <code class="highlighter-rouge">Maybe&lt;T&gt;</code> and how, I think, it should be used.</p>

<h4 id="why-we-use-maybet">Why we use <code class="highlighter-rouge">Maybe&lt;T&gt;</code>?</h4>

<p>Most people that use <code class="highlighter-rouge">Maybe&lt;T&gt;</code> generally fall into
one of the two categories.</p>

<h5 id="category-1-wants-to-eliminate-nullreferenceexception">Category 1: Wants to eliminate <code class="highlighter-rouge">NullReferenceException</code></h5>

<p>For a long time before <code class="highlighter-rouge">Maybe&lt;T&gt;</code> programmers tried to
clearly state to the clients of their API that a given
method may return <code class="highlighter-rouge">null</code> instead of an object.
Some of them used special naming conventions or 
comments, for example:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// Naming convention and XML documentation</span>
<span class="c1">// comments in action.</span>
<span class="k">public</span> <span class="k">interface</span> <span class="nc">IUserRepository</span> <span class="p">{</span>
    <span class="c1">/// &lt;returns&gt;</span>
    <span class="c1">/// Returns &lt;c&gt;null&lt;/c&gt; if user is not found.</span>
    <span class="c1">/// &lt;/returns&gt;</span>
    <span class="n">User</span> <span class="nf">FindById</span><span class="p">(</span><span class="n">UserId</span> <span class="n">id</span><span class="p">);</span>

    <span class="c1">/// &lt;exception cref="EntityNotFound"&gt;</span>
    <span class="c1">/// If user is not found.</span>
    <span class="c1">/// &lt;/exception&gt;</span>
    <span class="n">User</span> <span class="nf">FindRequiredById</span><span class="p">(</span><span class="n">UserId</span> <span class="n">id</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>Others resorted to using special marking attributes and
static code analysis tools. 
A good example of this category is 
<a href="https://www.nuget.org/packages/JetBrains.Annotations">JetBrains.Annotations</a> package, that can be used together with ReSharper
to detect missing null checks:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">interface</span> <span class="nc">IUserRepository</span> <span class="p">{</span>
    <span class="p">[</span><span class="n">CanBeNull</span><span class="p">]</span>
    <span class="n">User</span> <span class="nf">FindById</span><span class="p">(</span><span class="n">UserId</span> <span class="n">id</span><span class="p">);</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">interface</span> <span class="nc">IUserService</span> <span class="p">{</span>
    <span class="k">void</span> <span class="nf">ActivateUser</span><span class="p">([</span><span class="n">NotNull</span><span class="p">]</span> <span class="n">User</span> <span class="n">user</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>Yet another solution to this problem were 
<a href="https://www.infoq.com/articles/code-contracts-csharp">Code Contracts</a>
developed by Microsoft.</p>

<p>None of those solutions is perfect and <code class="highlighter-rouge">Maybe&lt;T&gt;</code> seems
to offer a better alternative. 
Why? Because it is checked by the compiler,
does not require additional tools and does not slow
down compilation.
But remember there is 
<a href="https://en.wikipedia.org/wiki/No_Silver_Bullet">no silver bullet</a>,
and <code class="highlighter-rouge">Maybe&lt;T&gt;</code> is not perfect either.</p>

<p>We can use <code class="highlighter-rouge">Maybe&lt;T&gt;</code> like this:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">interface</span> <span class="nc">IUserRepository</span> <span class="p">{</span>
    <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">User</span><span class="p">&gt;</span> <span class="nf">FindById</span><span class="p">(</span><span class="n">UserId</span> <span class="n">id</span><span class="p">);</span>
<span class="p">}</span>
<span class="c1">// and usage:</span>
<span class="kt">var</span> <span class="n">user</span> <span class="p">=</span> <span class="n">usersRepository</span><span class="p">.</span><span class="nf">FindById</span><span class="p">(</span><span class="n">userId</span><span class="p">);</span>
<span class="k">if</span> <span class="p">(</span><span class="n">user</span><span class="p">.</span><span class="n">HasValue</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nf">Ok</span><span class="p">(</span><span class="n">user</span><span class="p">);</span>
<span class="p">}</span>
<span class="k">else</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nf">NotFound</span><span class="p">();</span>
<span class="p">}</span></code></pre></figure>

<p>If you find yourself in this category of programmers, 
you would definitely
want to use a lightweight library that
does not force you to embrace a more functional style.
One good library that I can recommend is: 
<a href="https://github.com/vkhorikov/CSharpFunctionalExtensions">CSharpFunctionalExtensions</a>.</p>

<p>If you choose a different library, please make sure to check
that <code class="highlighter-rouge">Maybe&lt;T&gt;</code> is implemented using <code class="highlighter-rouge">struct</code>, otherwise you
may be surprised:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">Maybe</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">GetUserAgent</span><span class="p">()</span> <span class="p">{</span>
    <span class="k">return</span> <span class="k">null</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>One small downside of using a <code class="highlighter-rouge">struct</code> is
possibility of declaration of a nullable <code class="highlighter-rouge">Maybe&lt;T&gt;</code> type:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// Don't do this:</span>
<span class="n">Maybe</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;?</span> <span class="n">bad</span><span class="p">;</span></code></pre></figure>

<p>When I was writing this article I tried to gather some
best practices of using <code class="highlighter-rouge">Maybe&lt;T&gt;</code>. 
Unfortunately it was very difficult to provide a comprehensive
list. There is not much material on this on the web (I mean using 
<code class="highlighter-rouge">Maybe&lt;T&gt;</code> <em>not</em> in the FP fashion) and the available
material is often contradictory. 
And so instead of providing you with a list of best practices, 
I will only give you some hints where you can look for advice.</p>

<p>We should start our search by looking at
Java 8, which was published in 2014 and introduced 
<code class="highlighter-rouge">java.util.Optional&lt;T&gt;</code> class. 
The purpose of this class is to be a nullability marker
for method results just like our <code class="highlighter-rouge">Maybe&lt;T&gt;</code>. 
There are a lot of articles about how <code class="highlighter-rouge">Optional&lt;T&gt;</code> should
and should not be used. 
A good starting point will be 
<a href="https://stackoverflow.com/questions/26327957/should-java-8-getters-return-optional-type">this SO question</a>
with the first two answers. 
From this question alone we may learn e.g. to never wrap
a collection into <code class="highlighter-rouge">Maybe&lt;T&gt;</code>, 
instead of we should return a possibly empty collection.</p>

<p>The downside of reading Java’s best practices is that some
of them do not apply to C#. For example let’s look at the
advice given in <a href="https://stackoverflow.com/a/39005452/1779504">this SO answer</a>:</p>

<blockquote>
  <p>When a method can accept optional parameters, 
it’s preferable to adopt the well-proven approach 
and design such case using method overloading.</p>
</blockquote>

<p>In other words author suggest to change:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// this ctor:</span>
<span class="k">public</span> <span class="nf">SystemMessage</span><span class="p">(</span>
    <span class="kt">string</span> <span class="n">title</span><span class="p">,</span>
    <span class="kt">string</span> <span class="n">body</span><span class="p">,</span>
    <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">Attachment</span><span class="p">&gt;</span> <span class="n">attachment</span><span class="p">);</span>

<span class="c1">// into two ctor's:</span>
<span class="k">public</span> <span class="nf">SystemMessage</span><span class="p">(</span>
    <span class="kt">string</span> <span class="n">title</span><span class="p">,</span>
    <span class="kt">string</span> <span class="n">body</span><span class="p">,</span>
    <span class="n">Attachment</span> <span class="n">attachment</span><span class="p">);</span>

<span class="k">public</span> <span class="nf">SystemMessage</span><span class="p">(</span>
    <span class="kt">string</span> <span class="n">title</span><span class="p">,</span>
    <span class="kt">string</span> <span class="n">body</span><span class="p">);</span>

<span class="c1">// Because using these ctor's would be easier for</span>
<span class="c1">// the clients. Consider:</span>
<span class="k">new</span> <span class="nf">SystemMessage</span><span class="p">(</span><span class="s">"foo"</span><span class="p">,</span> <span class="s">"bar"</span><span class="p">,</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">Attachment</span><span class="p">&gt;.</span><span class="n">None</span><span class="p">)</span>
<span class="k">new</span> <span class="nf">SystemMessage</span><span class="p">(</span><span class="s">"foo"</span><span class="p">,</span> <span class="s">"bar"</span><span class="p">,</span> 
    <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">Attachment</span><span class="p">&gt;.</span><span class="nf">From</span><span class="p">(</span><span class="n">attachment</span><span class="p">))</span>
<span class="c1">// vs</span>
<span class="k">new</span> <span class="nf">SystemMessage</span><span class="p">(</span><span class="s">"foo"</span><span class="p">,</span> <span class="s">"bar"</span><span class="p">);</span>
<span class="k">new</span> <span class="nf">SystemMessage</span><span class="p">(</span><span class="s">"foo"</span><span class="p">,</span> <span class="s">"bar"</span><span class="p">,</span> <span class="n">attachment</span><span class="p">);</span></code></pre></figure>

<p>But this argument does not applies to C#, where we can
use implicit conversion operator with default parameters
to achieve exactly the same effect without using overloads:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">struct</span> <span class="nc">Maybe</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="p">{</span> 
    <span class="k">private</span> <span class="n">T</span> <span class="n">_value</span><span class="p">;</span>
    <span class="k">private</span> <span class="kt">bool</span> <span class="n">_present</span><span class="p">;</span>
    
    <span class="k">public</span> <span class="nf">Maybe</span><span class="p">(</span><span class="n">T</span> <span class="k">value</span><span class="p">)</span> <span class="p">{</span> 
        <span class="n">_value</span> <span class="p">=</span> <span class="k">value</span><span class="p">;</span>
        <span class="n">_present</span> <span class="p">=</span> <span class="p">(</span><span class="k">value</span> <span class="p">!=</span> <span class="k">null</span><span class="p">);</span>
    <span class="p">}</span>
    
    <span class="k">public</span> <span class="k">static</span> <span class="k">implicit</span> <span class="k">operator</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">T</span> <span class="k">value</span><span class="p">)</span>
        <span class="p">=&gt;</span> <span class="k">value</span> <span class="p">==</span> <span class="k">null</span> <span class="p">?</span> <span class="k">new</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;()</span> <span class="p">:</span> <span class="k">new</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">value</span><span class="p">);</span> 
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">Attachment</span> <span class="p">{</span> <span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">SystemMessage</span> <span class="p">{</span>
    <span class="k">public</span> <span class="nf">SystemMessage</span><span class="p">(</span>
        <span class="kt">string</span> <span class="n">title</span><span class="p">,</span> <span class="kt">string</span> <span class="n">body</span><span class="p">,</span> 
        <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">Attachment</span><span class="p">&gt;</span> <span class="n">attachment</span> <span class="p">=</span> <span class="k">default</span><span class="p">(</span><span class="n">Maybe</span><span class="p">&lt;</span><span class="n">Attachment</span><span class="p">&gt;))</span> <span class="p">{</span> 
    <span class="p">}</span>
<span class="p">}</span>   

<span class="k">public</span> <span class="k">class</span> <span class="nc">Program</span>
<span class="p">{</span>
    <span class="k">public</span> <span class="k">static</span> <span class="k">void</span> <span class="nf">Main</span><span class="p">()</span> <span class="p">{</span> 
        <span class="k">new</span> <span class="nf">SystemMessage</span><span class="p">(</span><span class="s">"foo"</span><span class="p">,</span> <span class="s">"bar"</span><span class="p">);</span>
        <span class="k">new</span> <span class="nf">SystemMessage</span><span class="p">(</span><span class="s">"foo"</span><span class="p">,</span> <span class="s">"bar"</span><span class="p">,</span> <span class="k">new</span> <span class="nf">Attachment</span><span class="p">());</span>
    <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>As we can see every Java’ish advice must be taken with 
a grain of salt.</p>

<p>Fortunately for us there is more and more C# posts about
using <code class="highlighter-rouge">Maybe&lt;T&gt;</code>. For example <a href="https://enterprisecraftsmanship.com/2015/03/13/functional-c-non-nullable-reference-types/">this one</a>
from the author of CSharpFunctionalExtensions library.</p>

<p>Although I cannot provide you with a list of best practices,
I think I have gathered enough experience to provide
you with a list of <code class="highlighter-rouge">Maybe&lt;T&gt;</code> code smells:</p>

<ul>
  <li>Nested <code class="highlighter-rouge">Maybe</code>s are wrong, for example <code class="highlighter-rouge">Maybe&lt;Maybe&lt;string&gt;&gt;</code>.
 Usually this is a sign that you should replace one of
 <code class="highlighter-rouge">Map</code> calls by a <code class="highlighter-rouge">FlatMap</code> (alternatively a <code class="highlighter-rouge">Select</code> by a <code class="highlighter-rouge">SelectMany</code> call).</li>
  <li><code class="highlighter-rouge">Maybe</code>s that wrap collections are wrong, for example <code class="highlighter-rouge">Maybe&lt;List&lt;User&gt;&gt;</code>.
 Instead return a non-empty or empty collection.</li>
  <li><code class="highlighter-rouge">Maybe</code>s wrapping nullable types are wrong, for example <code class="highlighter-rouge">Maybe&lt;int?&gt;</code>.
 Instead convert nullable type <code class="highlighter-rouge">T?</code> to <code class="highlighter-rouge">Maybe&lt;T&gt;</code>. 
 Even if you chosen library does not support such conversion out of 
 the box, you may write an extension method that provides this functionality
 yourself:</li>
</ul>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">ToMaybe</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="k">this</span> <span class="n">T</span><span class="p">?</span> <span class="k">value</span><span class="p">)</span>
        <span class="k">where</span> <span class="n">T</span><span class="p">:</span> <span class="k">struct</span>
    <span class="err">=&gt;</span> <span class="nc">value</span><span class="p">.</span><span class="n">HasValue</span> <span class="p">?</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;.</span><span class="nf">From</span><span class="p">(</span><span class="k">value</span><span class="p">.</span><span class="n">Value</span><span class="p">)</span> <span class="p">:</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;.</span><span class="n">None</span><span class="p">;</span></code></pre></figure>

<ul>
  <li>Nested callbacks when using <code class="highlighter-rouge">Maybe&lt;T&gt;</code> fluent interface are wrong.
 For example:</li>
</ul>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// BAD Fluent interface spaghetti</span>
<span class="kt">var</span> <span class="n">cultureBad</span> <span class="p">=</span> <span class="n">user</span><span class="p">.</span><span class="nf">Select</span><span class="p">(</span>
    <span class="n">u</span> <span class="p">=&gt;</span> <span class="nf">LoadPreferences</span><span class="p">(</span><span class="n">u</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">prefs</span> <span class="p">=&gt;</span> <span class="n">prefs</span><span class="p">.</span><span class="n">Culture</span><span class="p">));</span>

<span class="c1">// GOOD, only one operation per Select method call</span>
<span class="kt">var</span> <span class="n">cultureGood</span> <span class="p">=</span> <span class="n">user</span>
    <span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">u</span> <span class="p">=&gt;</span> <span class="nf">LoadPreferences</span><span class="p">(</span><span class="n">u</span><span class="p">))</span>
    <span class="p">.</span><span class="nf">Select</span><span class="p">(</span><span class="n">prefs</span> <span class="p">=&gt;</span> <span class="n">prefs</span><span class="p">.</span><span class="n">Culture</span><span class="p">);</span></code></pre></figure>

<p>Also be mindful when using <code class="highlighter-rouge">Maybe&lt;T&gt;</code> with properties.
A declaration like:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">Culture</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span></code></pre></figure>

<p>Means that you may both get and set an optional value.
In other words assignment of <code class="highlighter-rouge">None</code> value to this 
property should be valid:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="n">foo</span><span class="p">.</span><span class="n">Culture</span> <span class="p">=</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;.</span><span class="n">None</span><span class="p">;</span></code></pre></figure>

<p>A property that can return <code class="highlighter-rouge">None</code> but must be
set to some value should be split into a getter and a method:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// AVOID:</span>
<span class="n">Maybe</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">Culture</span> <span class="p">{</span>
    <span class="k">get</span> <span class="p">{</span> <span class="k">return</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;.</span><span class="nf">From</span><span class="p">(</span><span class="n">_culture</span><span class="p">);</span> <span class="p">}</span>
    <span class="k">set</span> <span class="p">{</span>
        <span class="k">if</span> <span class="p">(</span><span class="k">value</span><span class="p">.</span><span class="n">HasNoValue</span><span class="p">)</span>
            <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span><span class="s">"Culture cannot be empty."</span><span class="p">);</span>
        <span class="n">_culture</span> <span class="p">=</span> <span class="k">value</span><span class="p">.</span><span class="n">Value</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="c1">// PREFER:</span>
<span class="n">Maybe</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">Culture</span>
    <span class="p">=&gt;</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;.</span><span class="nf">From</span><span class="p">(</span><span class="n">_culture</span><span class="p">);</span>

<span class="k">void</span> <span class="nf">SetCulture</span><span class="p">(</span><span class="kt">string</span> <span class="n">culture</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">culture</span> <span class="p">==</span> <span class="k">null</span><span class="p">)</span>
        <span class="k">throw</span> <span class="k">new</span> <span class="nf">ArgumentException</span><span class="p">(</span><span class="s">"Culture cannot be empty."</span><span class="p">);</span>
    <span class="n">_culture</span> <span class="p">=</span> <span class="n">culture</span><span class="p">;</span>
<span class="p">}</span></code></pre></figure>

<p>As you probably heard C# 8.0 is going to introduce a nullable reference types (NRT).
Will NRT replace <code class="highlighter-rouge">Maybe&lt;T&gt;</code>?
For “Category 1” programmers, NRTs offer a better
alternative to <code class="highlighter-rouge">Maybe&lt;T&gt;</code>. On the other hand a lot of people
that start in “Category 1”, slowly begin to embrace more FP approach.
Usually people start by using <code class="highlighter-rouge">Maybe&lt;T&gt;</code> fluent interface to transform
one <code class="highlighter-rouge">Maybe&lt;T&gt;</code> value into another. After some time they take a leap and
switch to writing in a more functional fashion.</p>

<p>We may also take a look at <a href="https://kotlinlang.org/">Kotlin</a>,
a language created by JetBrains that from the very beginning 
<a href="https://kotlinlang.org/docs/reference/null-safety.html">offered nullable reference types</a>. 
And yet the most popular Kotlin functional library
<a href="https://github.com/MarioAriasC/funKTionale">funKTionale</a> 
still offers an <code class="highlighter-rouge">Option</code> type. 
So it looks like NRT or not, <code class="highlighter-rouge">Maybe&lt;T&gt;</code> is going to stay with us for sure.</p>

<h5 id="category-2-wants-to-embrace-fp-paradigm">Category 2: Wants to embrace FP paradigm</h5>

<p>Programmers belonging to this category embraced FP. They
often think about using F# at work and are a bit disappointed
by poor C# pattern matching facilities.</p>

<p>Code written in FP fashion will never use <code class="highlighter-rouge">if</code> to check
if <code class="highlighter-rouge">Maybe&lt;T&gt;</code> contains some value, instead a fluent interface
will be used to transform <code class="highlighter-rouge">Maybe&lt;T&gt;</code>s into some other values, for example:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">private</span> <span class="n">UserRepository</span> <span class="n">_userRepository</span><span class="p">;</span>

<span class="c1">// NOTICE: No if's in code</span>
<span class="k">public</span> <span class="k">static</span> <span class="n">Option</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="nf">GetUserCulture</span><span class="p">(</span><span class="kt">int</span> <span class="n">userId</span><span class="p">)</span>
    <span class="p">=&gt;</span> <span class="n">_userRepository</span><span class="p">.</span><span class="nf">FindById</span><span class="p">(</span><span class="n">userId</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">BiMap</span><span class="p">(</span>
            <span class="n">Some</span><span class="p">:</span> <span class="n">user</span> <span class="p">=&gt;</span> <span class="nf">GetUserCulture</span><span class="p">(</span><span class="n">user</span><span class="p">),</span>
            <span class="n">None</span><span class="p">:</span> <span class="n">_</span> <span class="p">=&gt;</span> <span class="k">null</span><span class="p">);</span>

<span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">GetUserCulture</span><span class="p">(</span><span class="n">User</span> <span class="n">user</span><span class="p">)</span>
    <span class="p">=&gt;</span> <span class="n">user</span><span class="p">.</span><span class="n">Preferences</span>    
            <span class="p">.</span><span class="nf">Map</span><span class="p">(</span><span class="n">prefs</span> <span class="p">=&gt;</span> <span class="n">prefs</span><span class="p">.</span><span class="n">Culture</span><span class="p">)</span>
            <span class="p">.</span><span class="nf">IfNone</span><span class="p">(</span><span class="s">"en-US"</span><span class="p">);</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">UserRepository</span> <span class="p">{</span>
    <span class="k">private</span> <span class="k">readonly</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">User</span><span class="p">&gt;</span> <span class="n">_users</span> <span class="p">=</span> <span class="k">new</span> <span class="n">List</span><span class="p">&lt;</span><span class="n">User</span><span class="p">&gt;</span> <span class="p">{</span>
        <span class="k">new</span> <span class="nf">User</span><span class="p">(</span><span class="m">1</span><span class="p">,</span> <span class="k">null</span><span class="p">),</span>
        <span class="k">new</span> <span class="nf">User</span><span class="p">(</span><span class="m">2</span><span class="p">,</span> <span class="k">new</span> <span class="n">UserPreferences</span> <span class="p">{</span>
            <span class="n">Culture</span> <span class="p">=</span> <span class="s">"pl-PL"</span>
        <span class="p">})</span>
    <span class="p">};</span>

    <span class="c1">// NOTICE: Extra extension methods for IEnumerable&lt;T&gt;</span>
    <span class="c1">// that return Option&lt;T&gt; instead of null's.</span>
    <span class="k">public</span> <span class="n">Option</span><span class="p">&lt;</span><span class="n">User</span><span class="p">&gt;</span> <span class="nf">FindById</span><span class="p">(</span><span class="kt">int</span> <span class="n">userId</span><span class="p">)</span> <span class="p">{</span>
        <span class="k">return</span> <span class="n">_users</span><span class="p">.</span><span class="nf">Find</span><span class="p">(</span><span class="n">u</span> <span class="p">=&gt;</span> <span class="n">u</span><span class="p">.</span><span class="n">UserId</span> <span class="p">==</span> <span class="n">userId</span><span class="p">);</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">User</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">int</span> <span class="n">UserId</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">private</span> <span class="n">UserPreferences</span> <span class="n">_preferences</span><span class="p">;</span>
    <span class="k">public</span> <span class="n">Option</span><span class="p">&lt;</span><span class="n">UserPreferences</span><span class="p">&gt;</span> <span class="n">Preferences</span>
        <span class="p">=&gt;</span> <span class="nf">Optional</span><span class="p">(</span><span class="n">_preferences</span><span class="p">);</span>

    <span class="k">public</span> <span class="nf">User</span><span class="p">(</span><span class="kt">int</span> <span class="n">userId</span><span class="p">,</span> <span class="n">UserPreferences</span> <span class="n">preferences</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">UserId</span> <span class="p">=</span> <span class="n">userId</span><span class="p">;</span>
        <span class="n">_preferences</span> <span class="p">=</span> <span class="n">preferences</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">UserPreferences</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Culture</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="k">set</span><span class="p">;</span> <span class="p">}</span>
<span class="p">}</span></code></pre></figure>

<p>Alternatively we may change our previous method to:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">static</span> <span class="kt">string</span> <span class="nf">GetUserCulture2</span><span class="p">(</span><span class="kt">int</span> <span class="n">userId</span><span class="p">)</span>
    <span class="p">=&gt;</span> <span class="n">_userRepository</span><span class="p">.</span><span class="nf">FindById</span><span class="p">(</span><span class="n">userId</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">Bind</span><span class="p">(</span><span class="n">user</span> <span class="p">=&gt;</span> <span class="n">user</span><span class="p">.</span><span class="n">Preferences</span><span class="p">)</span> <span class="c1">// FlatMap</span>
        <span class="p">.</span><span class="nf">Map</span><span class="p">(</span><span class="n">prefs</span> <span class="p">=&gt;</span> <span class="n">prefs</span><span class="p">.</span><span class="n">Culture</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">IfNone</span><span class="p">(</span><span class="s">"en-US"</span><span class="p">);</span> <span class="c1">// default culture</span></code></pre></figure>

<p>The only difference between these two methods
is the value returned for users not present in the repository.
<code class="highlighter-rouge">GetUserCulture</code> returns for them <code class="highlighter-rouge">None()</code> but <code class="highlighter-rouge">GetUserCulture2</code>
returns a default culture (<code class="highlighter-rouge">Some("en-US")</code>).</p>

<p>Another sign of a functional design, is that monads like <code class="highlighter-rouge">Maybe&lt;T&gt;</code>
will be unpacked only on the outskirts of the application.
For example in a typical RESTful service, <code class="highlighter-rouge">Maybe&lt;T&gt;</code> value will 
be unpacked only in the controller:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// GET /user/{userId}/culture</span>
<span class="k">public</span> <span class="n">IActionResult</span> <span class="nf">Get</span><span class="p">(</span><span class="kt">int</span> <span class="n">userId</span><span class="p">)</span> <span class="p">{</span>
    <span class="c1">// WARNING: In real apps do not return bare strings </span>
    <span class="c1">// from the REST api. </span>
    <span class="c1">// Always wrap them in DTOs / ViewModels / QueryResponses.</span>
    <span class="n">Maybe</span><span class="p">&lt;</span><span class="kt">string</span><span class="p">&gt;</span> <span class="n">culture</span> <span class="p">=</span> <span class="nf">GetUserCulture</span><span class="p">();</span>
    <span class="k">return</span> <span class="nf">Maybe</span><span class="p">(</span><span class="n">culture</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Presumably in the base controller</span>
<span class="k">public</span> <span class="n">IActionResult</span> <span class="n">Maybe</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">Maybe</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">m</span><span class="p">)</span>
    <span class="p">=&gt;</span> <span class="n">m</span><span class="p">.</span><span class="nf">Map</span><span class="p">(</span><span class="k">value</span> <span class="p">=&gt;</span> <span class="nf">Ok</span><span class="p">(</span><span class="k">value</span><span class="p">))</span>
        <span class="p">.</span><span class="nf">IfNone</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nf">NotFound</span><span class="p">());</span></code></pre></figure>

<p>In this category of programmers there is also a small group
of zealots, that in my opinion go a little bit to far in their cult of monads. 
They propose to use LINQ query syntax to transform monads.
Let my explain this using an example:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="c1">// We want to sum three Option&lt;int&gt; values.</span>
<span class="k">private</span> <span class="k">static</span> <span class="n">Option</span><span class="p">&lt;</span><span class="kt">int</span><span class="p">&gt;</span> <span class="nf">GetOptionalInt</span><span class="p">()</span>
    <span class="p">=&gt;</span> <span class="m">3</span><span class="p">;</span>

<span class="c1">// Using fluent interface:</span>
<span class="kt">var</span> <span class="n">sum</span> <span class="p">=</span> <span class="nf">GetOptionalInt</span><span class="p">()</span>
    <span class="p">.</span><span class="nf">SelectMany</span><span class="p">(</span><span class="n">_</span> <span class="p">=&gt;</span> <span class="nf">GetOptionalInt</span><span class="p">(),</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">+</span><span class="n">b</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">SelectMany</span><span class="p">(</span><span class="n">_</span> <span class="p">=&gt;</span> <span class="nf">GetOptionalInt</span><span class="p">(),</span> <span class="p">(</span><span class="n">a</span><span class="p">,</span><span class="n">b</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="n">a</span><span class="p">+</span><span class="n">b</span><span class="p">);</span>

<span class="c1">// Using LINQ query:</span>
<span class="kt">var</span> <span class="n">sum2</span> <span class="p">=</span>  <span class="k">from</span> <span class="n">n1</span> <span class="k">in</span> <span class="nf">GetOptionalInt</span><span class="p">()</span>
            <span class="k">from</span> <span class="n">n2</span> <span class="k">in</span> <span class="nf">GetOptionalInt</span><span class="p">()</span>
            <span class="k">from</span> <span class="n">n3</span> <span class="k">in</span> <span class="nf">GetOptionalInt</span><span class="p">()</span>
            <span class="k">select</span> <span class="n">n1</span><span class="p">+</span><span class="n">n2</span><span class="p">+</span><span class="n">n3</span><span class="p">;</span></code></pre></figure>

<p>I must admin that LINQ query offers some advantages like
ability to use <code class="highlighter-rouge">let</code> and <code class="highlighter-rouge">where</code> keywords. Also some transformations
may be easier to express using LINQ query syntax, for example:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">sum2</span> <span class="p">=</span>  
    <span class="k">from</span> <span class="n">n1</span> <span class="k">in</span> <span class="nf">GetOptionalInt</span><span class="p">()</span>
    <span class="k">from</span> <span class="n">n2</span> <span class="k">in</span> <span class="nf">GetOptionalInt</span><span class="p">()</span>
    <span class="k">from</span> <span class="n">n3</span> <span class="k">in</span> <span class="nf">GetOptionalInt</span><span class="p">()</span>
    <span class="k">let</span> <span class="n">max</span> <span class="p">=</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Max</span><span class="p">(</span><span class="n">n1</span><span class="p">,</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Max</span><span class="p">(</span><span class="n">n2</span><span class="p">,</span> <span class="n">n3</span><span class="p">))</span>
    <span class="k">let</span> <span class="n">min</span> <span class="p">=</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Min</span><span class="p">(</span><span class="n">n1</span><span class="p">,</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Min</span><span class="p">(</span><span class="n">n2</span><span class="p">,</span> <span class="n">n3</span><span class="p">))</span>
    <span class="k">where</span> <span class="n">min</span> <span class="p">!=</span> <span class="m">0</span>
    <span class="k">select</span> <span class="n">max</span> <span class="p">/</span> <span class="n">min</span><span class="p">;</span></code></pre></figure>

<p>Yet in my opinion fluent interface is in 90% of cases 
a more readable and understandable way 
to transform <code class="highlighter-rouge">Maybe&lt;T&gt;</code>s and other monads.
For example we may rewrite the last code snippet to:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">res</span> <span class="p">=</span> <span class="nf">Combine</span><span class="p">(</span>
        <span class="nf">GetOptionalInt</span><span class="p">(),</span>
        <span class="nf">GetOptionalInt</span><span class="p">(),</span>
        <span class="nf">GetOptionalInt</span><span class="p">()</span>
    <span class="p">)</span>
    <span class="p">.</span><span class="nf">Map</span><span class="p">(</span><span class="n">nnn</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="p">(</span><span class="kt">var</span> <span class="n">n1</span><span class="p">,</span> <span class="kt">var</span> <span class="n">n2</span><span class="p">,</span> <span class="kt">var</span> <span class="n">n3</span><span class="p">)</span> <span class="p">=</span> <span class="n">nnn</span><span class="p">;</span>
        <span class="k">return</span> <span class="k">new</span> <span class="p">{</span> 
            <span class="n">Max</span> <span class="p">=</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Max</span><span class="p">(</span><span class="n">n1</span><span class="p">,</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Max</span><span class="p">(</span><span class="n">n2</span><span class="p">,</span> <span class="n">n3</span><span class="p">)),</span>
            <span class="n">Min</span> <span class="p">=</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Min</span><span class="p">(</span><span class="n">n1</span><span class="p">,</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Min</span><span class="p">(</span><span class="n">n2</span><span class="p">,</span> <span class="n">n3</span><span class="p">))</span>
        <span class="p">};</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nf">Filter</span><span class="p">(</span><span class="n">m</span> <span class="p">=&gt;</span> <span class="n">m</span><span class="p">.</span><span class="n">Min</span> <span class="p">!=</span> <span class="m">0</span><span class="p">)</span>
    <span class="p">.</span><span class="nf">Map</span><span class="p">(</span><span class="n">m</span> <span class="p">=&gt;</span> <span class="n">m</span><span class="p">.</span><span class="n">Max</span> <span class="p">/</span> <span class="n">m</span><span class="p">.</span><span class="n">Min</span><span class="p">);</span>

<span class="c1">// We need a few utils</span>
<span class="k">private</span> <span class="k">static</span> <span class="n">Option</span><span class="p">&lt;(</span><span class="n">T</span><span class="p">,</span><span class="n">T</span><span class="p">)&gt;</span> <span class="n">Combine</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">Option</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">a</span><span class="p">,</span> <span class="n">Option</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">b</span><span class="p">)</span>
    <span class="p">=&gt;</span> <span class="n">a</span><span class="p">.</span><span class="nf">SelectMany</span><span class="p">(</span>
            <span class="n">_</span> <span class="p">=&gt;</span> <span class="n">b</span><span class="p">,</span>
            <span class="p">(</span><span class="n">aValue</span><span class="p">,</span> <span class="n">bValue</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="n">aValue</span><span class="p">,</span> <span class="n">bValue</span><span class="p">));</span>

<span class="k">private</span> <span class="k">static</span> <span class="n">Option</span><span class="p">&lt;(</span><span class="n">T</span><span class="p">,</span><span class="n">T</span><span class="p">,</span><span class="n">T</span><span class="p">)&gt;</span> <span class="n">Combine</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;(</span><span class="n">Option</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">a</span><span class="p">,</span> <span class="n">Option</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">b</span><span class="p">,</span> <span class="n">Option</span><span class="p">&lt;</span><span class="n">T</span><span class="p">&gt;</span> <span class="n">c</span><span class="p">)</span>
    <span class="p">=&gt;</span> <span class="nf">Combine</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">)</span>
        <span class="p">.</span><span class="nf">SelectMany</span><span class="p">(</span>
            <span class="n">_</span> <span class="p">=&gt;</span> <span class="n">c</span><span class="p">,</span>
            <span class="p">(</span><span class="n">tt</span><span class="p">,</span> <span class="n">cValue</span><span class="p">)</span> <span class="p">=&gt;</span> <span class="p">(</span><span class="n">tt</span><span class="p">.</span><span class="n">Item1</span><span class="p">,</span> <span class="n">tt</span><span class="p">.</span><span class="n">Item2</span><span class="p">,</span> <span class="n">cValue</span><span class="p">));</span></code></pre></figure>

<p>Not as pretty as LINQ query but still readable.</p>

<p>At the end of the day consistency is what matters on real
projects. Choose one style and follow it consistently.</p>

<p>In this category we find libraries like 
<a href="https://github.com/louthy/language-ext">LanguageExt</a>.
This library has many flaws but still it is the best 
functional library on the market. 
My biggest disappointment with LanguageExt is poor documentation,
which basically consists of just a list of functions without any guidelines how
this library should be used and how it affects overall architecture.
Compare this with <a href="https://www.vavr.io/vavr-docs/">Vavr</a>
(the most popular FP library for JVM) and you can clearly
see the difference.</p>

<p>If you decided that you want to use FP in you code, you
should definitively check awesome
<a href="https://fsharpforfunandprofit.com/rop/">Railway oriented programming</a>
talk.</p>

<p><code class="highlighter-rouge">Maybe&lt;T&gt;</code> is not the only monad that is popular, other
frequently used one is <code class="highlighter-rouge">Either&lt;L,R&gt;</code>. 
<code class="highlighter-rouge">Either&lt;L,R&gt;</code> is used to represent either a result of computation or an error.
You may think of <code class="highlighter-rouge">Either&lt;L,R&gt;</code> as a functional response to exceptions.
If you want to use <code class="highlighter-rouge">Maybe&lt;T&gt;</code> efficiently, you must learn 
how it can be transformed it into other monads, in particular into <code class="highlighter-rouge">Either&lt;L,R&gt;</code>.
E.g. we may make our last example more robust if we provide
information to the user why the computation failed:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="kt">var</span> <span class="n">result</span> <span class="p">=</span> <span class="nf">Combine</span><span class="p">(</span>
    <span class="nf">GetOptionalInt</span><span class="p">(),</span>
    <span class="nf">GetOptionalInt</span><span class="p">(),</span>
    <span class="nf">GetOptionalInt</span><span class="p">()</span>
    <span class="p">)</span>
    <span class="p">.</span><span class="nf">Map</span><span class="p">(</span><span class="n">ttt</span> <span class="p">=&gt;</span> <span class="p">{</span>
        <span class="p">(</span><span class="kt">var</span> <span class="n">n1</span><span class="p">,</span> <span class="kt">var</span> <span class="n">n2</span><span class="p">,</span> <span class="kt">var</span> <span class="n">n3</span><span class="p">)</span> <span class="p">=</span> <span class="n">ttt</span><span class="p">;</span>
        <span class="k">return</span> <span class="k">new</span> <span class="p">{</span> 
            <span class="n">Max</span> <span class="p">=</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Max</span><span class="p">(</span><span class="n">n1</span><span class="p">,</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Max</span><span class="p">(</span><span class="n">n2</span><span class="p">,</span> <span class="n">n3</span><span class="p">)),</span>
            <span class="n">Min</span> <span class="p">=</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Min</span><span class="p">(</span><span class="n">n1</span><span class="p">,</span> <span class="n">Math</span><span class="p">.</span><span class="nf">Min</span><span class="p">(</span><span class="n">n2</span><span class="p">,</span> <span class="n">n3</span><span class="p">))</span>
        <span class="p">};</span>
    <span class="p">})</span>
    <span class="p">.</span><span class="nf">ToEither</span><span class="p">(()</span> <span class="p">=&gt;</span> <span class="nf">Error</span><span class="p">(</span><span class="s">"Not all values are available."</span><span class="p">))</span>
    <span class="p">.</span><span class="nf">Bind</span><span class="p">(</span><span class="n">m</span> <span class="p">=&gt;</span> <span class="nf">Divide</span><span class="p">(</span><span class="n">m</span><span class="p">.</span><span class="n">Max</span><span class="p">,</span> <span class="n">m</span><span class="p">.</span><span class="n">Min</span><span class="p">));</span> <span class="c1">// FlatMap</span>

<span class="n">Either</span><span class="p">&lt;</span><span class="n">Error</span><span class="p">,</span> <span class="kt">int</span><span class="p">&gt;</span> <span class="nf">Divide</span><span class="p">(</span><span class="kt">int</span> <span class="n">a</span><span class="p">,</span> <span class="kt">int</span> <span class="n">b</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">if</span> <span class="p">(</span><span class="n">b</span> <span class="p">==</span> <span class="m">0</span><span class="p">)</span> <span class="k">return</span> <span class="nf">Left</span><span class="p">(</span><span class="nf">Error</span><span class="p">(</span><span class="s">"Cannot divide by zero"</span><span class="p">));</span>
    <span class="k">return</span> <span class="nf">Right</span><span class="p">(</span><span class="n">a</span> <span class="p">/</span> <span class="n">b</span><span class="p">);</span>
<span class="p">}</span>

<span class="c1">// Helper classes:</span>
<span class="k">public</span> <span class="k">class</span> <span class="nc">Error</span> <span class="p">{</span>
    <span class="k">public</span> <span class="kt">string</span> <span class="n">Message</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>

    <span class="k">public</span> <span class="nf">Error</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">)</span> <span class="p">{</span>
        <span class="n">Message</span> <span class="p">=</span> <span class="n">message</span><span class="p">;</span>
    <span class="p">}</span>

    <span class="k">public</span> <span class="k">override</span> <span class="kt">string</span> <span class="nf">ToString</span><span class="p">()</span>
        <span class="p">=&gt;</span> <span class="s">$"Error(</span><span class="p">{</span><span class="n">Message</span><span class="p">}</span><span class="s">)"</span><span class="p">;</span>
<span class="p">}</span>

<span class="k">public</span> <span class="k">class</span> <span class="nc">ErrorHelpers</span> <span class="p">{</span>
    <span class="c1">// For `using static` import...</span>
    <span class="k">public</span> <span class="k">static</span> <span class="n">Error</span> <span class="nf">Error</span><span class="p">(</span><span class="kt">string</span> <span class="n">message</span><span class="p">)</span>
        <span class="p">=&gt;</span> <span class="k">new</span> <span class="nf">Error</span><span class="p">(</span><span class="n">message</span><span class="p">);</span>
<span class="p">}</span></code></pre></figure>

<p>Since FP is on the rise, you will find a lot of books, blogs, podcasts
and MOOC’s about using FP in C#. Also .NET has amazing F# community
that is very welcoming to the beginners.
One of the best blogs about FP in C# is in my opinion
<a href="http://blog.ploeh.dk/archive/">Mark Seemann blog</a>.</p>

<h4 id="what-to-do-with-none">What to do with None?</h4>

<p>How much value you will be able to extract from <code class="highlighter-rouge">Maybe&lt;T&gt;</code> depends on
your attitude towards <code class="highlighter-rouge">None</code>s. 
Every time when you have to handle <code class="highlighter-rouge">None</code>, you must decide if it is 
the result of 
<a href="https://www.quora.com/What-are-essential-and-accidental-complexity">the accidental complexity</a>
e.g. someone passed a wrong id to the REST API) 
or if you just discovered a new edge case in your domain.</p>

<p>To better understand the problem let’s follow an imaginary example.
Joe must write a simple function that will
send an email message to all users whose subscriptions will end in the next month.
During implementation Joe notices that <code class="highlighter-rouge">EmailAddress</code> field in <code class="highlighter-rouge">User</code> entity 
is declared as <code class="highlighter-rouge">Option&lt;Email&gt;</code>:</p>

<figure class="highlight"><pre><code class="language-csharp" data-lang="csharp"><span class="k">public</span> <span class="k">class</span> <span class="nc">User</span> <span class="p">{</span>
    <span class="k">public</span> <span class="n">Option</span><span class="p">&lt;</span><span class="n">Email</span><span class="p">&gt;</span> <span class="n">EmailAddress</span> <span class="p">{</span> <span class="k">get</span><span class="p">;</span> <span class="p">}</span>
    <span class="c1">// ...</span>
<span class="p">}</span></code></pre></figure>

<p>Now Joe knows that for some strange reason not all users have email addresses.
Joe logs into production DB to confirm that some email addresses are missing 
and indeed they are. Looks like Joe just discovered a new edge case.
Joe goes to Mark a business analyst to describe the problem. Mark is a long
timer in the company and knows that for a short period of time users
were able to log into the platform using their phone numbers instead of emails.
A new solution is created. Users that have no email address will receive 
a text message instead of an email. Also users without email will be asked to
enter their email address next time they log into the platform. Success!</p>

<p>On the other hand consider what will happen if Joe just
dig out the email address from <code class="highlighter-rouge">Maybe&lt;T&gt;</code> by accessing <code class="highlighter-rouge">Value</code> or if he just
log a warning about missing email address 
without telling anyone from the business side?</p>

<h5 id="end-of-the-part-i">End of the part I</h5>

<p>Soon I will write a follow up to this post in which 
we will try to implement a perfect <code class="highlighter-rouge">Maybe&lt;T&gt;</code> type on our own and we will see
that it is not an easy task in C#.</p>


	  ]]></description>
	</item>


</channel>
</rss>
